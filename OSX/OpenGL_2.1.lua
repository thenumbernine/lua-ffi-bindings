local ffi = require 'ffi'
ffi.cdef[[
/* + BEGIN ./OpenGL/gl.h */
/* ++ BEGIN ./OpenGL/gltypes.h */
/* +++ BEGIN /Library/Developer/CommandLineTools/usr/lib/clang/15.0.0/include/stdint.h */
]] require 'ffi.req' 'c.stdint' ffi.cdef[[
/* +++ END   /Library/Developer/CommandLineTools/usr/lib/clang/15.0.0/include/stdint.h */
typedef uint32_t GLbitfield;
typedef uint8_t GLboolean;
typedef int8_t GLbyte;
typedef float GLclampf;
typedef uint32_t GLenum;
typedef float GLfloat;
typedef int32_t GLint;
typedef int16_t GLshort;
typedef int32_t GLsizei;
typedef uint8_t GLubyte;
typedef uint32_t GLuint;
typedef uint16_t GLushort;
typedef void GLvoid;
typedef char GLchar;
typedef char GLcharARB;
typedef void *GLhandleARB;
typedef double GLdouble;
typedef double GLclampd;
typedef int32_t GLfixed;
typedef uint16_t GLhalf;
typedef uint16_t GLhalfARB;
typedef int64_t GLint64;
typedef struct __GLsync *GLsync;
typedef uint64_t GLuint64;
typedef int64_t GLint64EXT;
typedef uint64_t GLuint64EXT;
typedef intptr_t GLintptr;
typedef intptr_t GLsizeiptr;
typedef intptr_t GLintptrARB;
typedef intptr_t GLsizeiptrARB;
/* ++ END   ./OpenGL/gltypes.h */
/* ++ BEGIN ./OpenGL/glext.h */
/* +++ BEGIN ./OpenGL/gltypes.h */
/* +++ END   ./OpenGL/gltypes.h */
enum { GL_ARB_color_buffer_float = 1 };
enum { GL_ARB_depth_buffer_float = 1 };
enum { GL_ARB_depth_clamp = 1 };
enum { GL_ARB_depth_texture = 1 };
enum { GL_ARB_draw_buffers = 1 };
enum { GL_ARB_draw_elements_base_vertex = 1 };
enum { GL_ARB_draw_instanced = 1 };
enum { GL_ARB_fragment_program = 1 };
enum { GL_ARB_fragment_program_shadow = 1 };
enum { GL_ARB_fragment_shader = 1 };
enum { GL_ARB_framebuffer_object = 1 };
enum { GL_ARB_framebuffer_sRGB = 1 };
enum { GL_ARB_half_float_pixel = 1 };
enum { GL_ARB_half_float_vertex = 1 };
enum { GL_ARB_imaging = 1 };
enum { GL_ARB_instanced_arrays = 1 };
enum { GL_ARB_multisample = 1 };
enum { GL_ARB_multitexture = 1 };
enum { GL_ARB_occlusion_query = 1 };
enum { GL_ARB_pixel_buffer_object = 1 };
enum { GL_ARB_point_parameters = 1 };
enum { GL_ARB_point_sprite = 1 };
enum { GL_ARB_provoking_vertex = 1 };
enum { GL_ARB_seamless_cube_map = 1 };
enum { GL_ARB_shader_objects = 1 };
enum { GL_ARB_shader_texture_lod = 1 };
enum { GL_ARB_shading_language_100 = 1 };
enum { GL_ARB_shadow = 1 };
enum { GL_ARB_shadow_ambient = 1 };
enum { GL_ARB_sync = 1 };
enum { GL_ARB_texture_border_clamp = 1 };
enum { GL_ARB_texture_compression = 1 };
enum { GL_ARB_texture_compression_rgtc = 1 };
enum { GL_ARB_texture_cube_map = 1 };
enum { GL_ARB_texture_env_add = 1 };
enum { GL_ARB_texture_env_combine = 1 };
enum { GL_ARB_texture_env_crossbar = 1 };
enum { GL_ARB_texture_env_dot3 = 1 };
enum { GL_ARB_texture_float = 1 };
enum { GL_ARB_texture_mirrored_repeat = 1 };
enum { GL_ARB_texture_non_power_of_two = 1 };
enum { GL_ARB_texture_rectangle = 1 };
enum { GL_ARB_texture_rg = 1 };
enum { GL_ARB_transpose_matrix = 1 };
enum { GL_ARB_vertex_array_bgra = 1 };
enum { GL_ARB_vertex_blend = 1 };
enum { GL_ARB_vertex_buffer_object = 1 };
enum { GL_ARB_vertex_program = 1 };
enum { GL_ARB_vertex_shader = 1 };
enum { GL_ARB_window_pos = 1 };
enum { GL_EXT_abgr = 1 };
enum { GL_EXT_bgra = 1 };
enum { GL_EXT_bindable_uniform = 1 };
enum { GL_EXT_blend_color = 1 };
enum { GL_EXT_blend_equation_separate = 1 };
enum { GL_EXT_blend_func_separate = 1 };
enum { GL_EXT_blend_minmax = 1 };
enum { GL_EXT_blend_subtract = 1 };
enum { GL_EXT_clip_volume_hint = 1 };
enum { GL_EXT_debug_label = 1 };
enum { GL_EXT_debug_marker = 1 };
enum { GL_EXT_depth_bounds_test = 1 };
enum { GL_EXT_draw_buffers2 = 1 };
enum { GL_EXT_draw_range_elements = 1 };
enum { GL_EXT_fog_coord = 1 };
enum { GL_EXT_framebuffer_blit = 1 };
enum { GL_EXT_framebuffer_multisample = 1 };
enum { GL_EXT_framebuffer_multisample_blit_scaled = 1 };
enum { GL_EXT_framebuffer_object = 1 };
enum { GL_EXT_framebuffer_sRGB = 1 };
enum { GL_EXT_geometry_shader4 = 1 };
enum { GL_EXT_gpu_program_parameters = 1 };
enum { GL_EXT_gpu_shader4 = 1 };
enum { GL_EXT_multi_draw_arrays = 1 };
enum { GL_EXT_packed_depth_stencil = 1 };
enum { GL_EXT_packed_float = 1 };
enum { GL_EXT_provoking_vertex = 1 };
enum { GL_EXT_rescale_normal = 1 };
enum { GL_EXT_secondary_color = 1 };
enum { GL_EXT_separate_specular_color = 1 };
enum { GL_EXT_shadow_funcs = 1 };
enum { GL_EXT_stencil_two_side = 1 };
enum { GL_EXT_stencil_wrap = 1 };
enum { GL_EXT_texture_array = 1 };
enum { GL_EXT_texture_compression_dxt1 = 1 };
enum { GL_EXT_texture_compression_s3tc = 1 };
enum { GL_EXT_texture_env_add = 1 };
enum { GL_EXT_texture_filter_anisotropic = 1 };
enum { GL_EXT_texture_integer = 1 };
enum { GL_EXT_texture_lod_bias = 1 };
enum { GL_EXT_texture_mirror_clamp = 1 };
enum { GL_EXT_texture_rectangle = 1 };
enum { GL_EXT_texture_shared_exponent = 1 };
enum { GL_EXT_texture_sRGB = 1 };
enum { GL_EXT_texture_sRGB_decode = 1 };
enum { GL_EXT_timer_query = 1 };
enum { GL_EXT_transform_feedback = 1 };
enum { GL_EXT_vertex_array_bgra = 1 };
enum { GL_APPLE_aux_depth_stencil = 1 };
enum { GL_APPLE_client_storage = 1 };
enum { GL_APPLE_element_array = 1 };
enum { GL_APPLE_fence = 1 };
enum { GL_APPLE_float_pixels = 1 };
enum { GL_APPLE_flush_buffer_range = 1 };
enum { GL_APPLE_flush_render = 1 };
enum { GL_APPLE_object_purgeable = 1 };
enum { GL_APPLE_packed_pixels = 1 };
enum { GL_APPLE_pixel_buffer = 1 };
enum { GL_APPLE_rgb_422 = 1 };
enum { GL_APPLE_row_bytes = 1 };
enum { GL_APPLE_specular_vector = 1 };
enum { GL_APPLE_texture_range = 1 };
enum { GL_APPLE_transform_hint = 1 };
enum { GL_APPLE_vertex_array_object = 1 };
enum { GL_APPLE_vertex_array_range = 1 };
enum { GL_APPLE_vertex_point_size = 1 };
enum { GL_APPLE_vertex_program_evaluators = 1 };
enum { GL_APPLE_ycbcr_422 = 1 };
enum { GL_ATI_blend_equation_separate = 1 };
enum { GL_ATI_blend_weighted_minmax = 1 };
enum { GL_ATI_separate_stencil = 1 };
enum { GL_ATI_texture_compression_3dc = 1 };
enum { GL_ATI_texture_env_combine3 = 1 };
enum { GL_ATI_texture_float = 1 };
enum { GL_ATI_texture_mirror_once = 1 };
enum { GL_IBM_rasterpos_clip = 1 };
enum { GL_NV_blend_square = 1 };
enum { GL_NV_conditional_render = 1 };
enum { GL_NV_depth_clamp = 1 };
enum { GL_NV_fog_distance = 1 };
enum { GL_NV_fragment_program_option = 1 };
enum { GL_NV_fragment_program2 = 1 };
enum { GL_NV_light_max_exponent = 1 };
enum { GL_NV_multisample_filter_hint = 1 };
enum { GL_NV_point_sprite = 1 };
enum { GL_NV_texgen_reflection = 1 };
enum { GL_NV_texture_barrier = 1 };
enum { GL_NV_vertex_program2_option = 1 };
enum { GL_NV_vertex_program3 = 1 };
enum { GL_SGI_color_matrix = 1 };
enum { GL_SGIS_generate_mipmap = 1 };
enum { GL_SGIS_texture_edge_clamp = 1 };
enum { GL_SGIS_texture_lod = 1 };
enum { GL_GLEXT_VERSION = 8 };
enum { GL_RGBA_FLOAT_MODE_ARB = 34848 };
enum { GL_CLAMP_VERTEX_COLOR_ARB = 35098 };
enum { GL_CLAMP_FRAGMENT_COLOR_ARB = 35099 };
enum { GL_CLAMP_READ_COLOR_ARB = 35100 };
enum { GL_FIXED_ONLY_ARB = 35101 };
enum { GL_DEPTH_COMPONENT32F = 36012 };
enum { GL_DEPTH32F_STENCIL8 = 36013 };
enum { GL_FLOAT_32_UNSIGNED_INT_24_8_REV = 36269 };
enum { GL_DEPTH_CLAMP = 34383 };
enum { GL_DEPTH_COMPONENT16_ARB = 33189 };
enum { GL_DEPTH_COMPONENT24_ARB = 33190 };
enum { GL_DEPTH_COMPONENT32_ARB = 33191 };
enum { GL_TEXTURE_DEPTH_SIZE_ARB = 34890 };
enum { GL_DEPTH_TEXTURE_MODE_ARB = 34891 };
enum { GL_MAX_DRAW_BUFFERS_ARB = 34852 };
enum { GL_DRAW_BUFFER0_ARB = 34853 };
enum { GL_DRAW_BUFFER1_ARB = 34854 };
enum { GL_DRAW_BUFFER2_ARB = 34855 };
enum { GL_DRAW_BUFFER3_ARB = 34856 };
enum { GL_DRAW_BUFFER4_ARB = 34857 };
enum { GL_DRAW_BUFFER5_ARB = 34858 };
enum { GL_DRAW_BUFFER6_ARB = 34859 };
enum { GL_DRAW_BUFFER7_ARB = 34860 };
enum { GL_DRAW_BUFFER8_ARB = 34861 };
enum { GL_DRAW_BUFFER9_ARB = 34862 };
enum { GL_DRAW_BUFFER10_ARB = 34863 };
enum { GL_DRAW_BUFFER11_ARB = 34864 };
enum { GL_DRAW_BUFFER12_ARB = 34865 };
enum { GL_DRAW_BUFFER13_ARB = 34866 };
enum { GL_DRAW_BUFFER14_ARB = 34867 };
enum { GL_DRAW_BUFFER15_ARB = 34868 };
enum { GL_FRAGMENT_PROGRAM_ARB = 34820 };
enum { GL_PROGRAM_ALU_INSTRUCTIONS_ARB = 34821 };
enum { GL_PROGRAM_TEX_INSTRUCTIONS_ARB = 34822 };
enum { GL_PROGRAM_TEX_INDIRECTIONS_ARB = 34823 };
enum { GL_PROGRAM_NATIVE_ALU_INSTRUCTIONS_ARB = 34824 };
enum { GL_PROGRAM_NATIVE_TEX_INSTRUCTIONS_ARB = 34825 };
enum { GL_PROGRAM_NATIVE_TEX_INDIRECTIONS_ARB = 34826 };
enum { GL_MAX_PROGRAM_ALU_INSTRUCTIONS_ARB = 34827 };
enum { GL_MAX_PROGRAM_TEX_INSTRUCTIONS_ARB = 34828 };
enum { GL_MAX_PROGRAM_TEX_INDIRECTIONS_ARB = 34829 };
enum { GL_MAX_PROGRAM_NATIVE_ALU_INSTRUCTIONS_ARB = 34830 };
enum { GL_MAX_PROGRAM_NATIVE_TEX_INSTRUCTIONS_ARB = 34831 };
enum { GL_MAX_PROGRAM_NATIVE_TEX_INDIRECTIONS_ARB = 34832 };
enum { GL_MAX_TEXTURE_COORDS_ARB = 34929 };
enum { GL_MAX_TEXTURE_IMAGE_UNITS_ARB = 34930 };
enum { GL_FRAGMENT_SHADER_ARB = 35632 };
enum { GL_MAX_FRAGMENT_UNIFORM_COMPONENTS_ARB = 35657 };
enum { GL_FRAGMENT_SHADER_DERIVATIVE_HINT_ARB = 35723 };
/* redefining matching value: #define GL_MAX_TEXTURE_COORDS_ARB                            0x8871 */
/* redefining matching value: #define GL_MAX_TEXTURE_IMAGE_UNITS_ARB                       0x8872 */
enum { GL_INVALID_FRAMEBUFFER_OPERATION = 1286 };
enum { GL_FRAMEBUFFER_ATTACHMENT_COLOR_ENCODING = 33296 };
enum { GL_FRAMEBUFFER_ATTACHMENT_COMPONENT_TYPE = 33297 };
enum { GL_FRAMEBUFFER_ATTACHMENT_RED_SIZE = 33298 };
enum { GL_FRAMEBUFFER_ATTACHMENT_GREEN_SIZE = 33299 };
enum { GL_FRAMEBUFFER_ATTACHMENT_BLUE_SIZE = 33300 };
enum { GL_FRAMEBUFFER_ATTACHMENT_ALPHA_SIZE = 33301 };
enum { GL_FRAMEBUFFER_ATTACHMENT_DEPTH_SIZE = 33302 };
enum { GL_FRAMEBUFFER_ATTACHMENT_STENCIL_SIZE = 33303 };
enum { GL_FRAMEBUFFER_DEFAULT = 33304 };
enum { GL_FRAMEBUFFER_UNDEFINED = 33305 };
enum { GL_DEPTH_STENCIL_ATTACHMENT = 33306 };
enum { GL_MAX_RENDERBUFFER_SIZE = 34024 };
enum { GL_DEPTH_STENCIL = 34041 };
enum { GL_UNSIGNED_INT_24_8 = 34042 };
enum { GL_DEPTH24_STENCIL8 = 35056 };
enum { GL_TEXTURE_STENCIL_SIZE = 35057 };
enum { GL_TEXTURE_RED_TYPE = 35856 };
enum { GL_TEXTURE_GREEN_TYPE = 35857 };
enum { GL_TEXTURE_BLUE_TYPE = 35858 };
enum { GL_TEXTURE_ALPHA_TYPE = 35859 };
enum { GL_TEXTURE_DEPTH_TYPE = 35862 };
enum { GL_UNSIGNED_NORMALIZED = 35863 };
enum { GL_FRAMEBUFFER_BINDING = 36006 };
enum { GL_DRAW_FRAMEBUFFER_BINDING = 36006 };
enum { GL_RENDERBUFFER_BINDING = 36007 };
enum { GL_READ_FRAMEBUFFER = 36008 };
enum { GL_DRAW_FRAMEBUFFER = 36009 };
enum { GL_READ_FRAMEBUFFER_BINDING = 36010 };
enum { GL_RENDERBUFFER_SAMPLES = 36011 };
enum { GL_FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE = 36048 };
enum { GL_FRAMEBUFFER_ATTACHMENT_OBJECT_NAME = 36049 };
enum { GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL = 36050 };
enum { GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE = 36051 };
enum { GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_LAYER = 36052 };
enum { GL_FRAMEBUFFER_COMPLETE = 36053 };
enum { GL_FRAMEBUFFER_INCOMPLETE_ATTACHMENT = 36054 };
enum { GL_FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT = 36055 };
enum { GL_FRAMEBUFFER_INCOMPLETE_DRAW_BUFFER = 36059 };
enum { GL_FRAMEBUFFER_INCOMPLETE_READ_BUFFER = 36060 };
enum { GL_FRAMEBUFFER_UNSUPPORTED = 36061 };
enum { GL_MAX_COLOR_ATTACHMENTS = 36063 };
enum { GL_COLOR_ATTACHMENT0 = 36064 };
enum { GL_COLOR_ATTACHMENT1 = 36065 };
enum { GL_COLOR_ATTACHMENT2 = 36066 };
enum { GL_COLOR_ATTACHMENT3 = 36067 };
enum { GL_COLOR_ATTACHMENT4 = 36068 };
enum { GL_COLOR_ATTACHMENT5 = 36069 };
enum { GL_COLOR_ATTACHMENT6 = 36070 };
enum { GL_COLOR_ATTACHMENT7 = 36071 };
enum { GL_COLOR_ATTACHMENT8 = 36072 };
enum { GL_COLOR_ATTACHMENT9 = 36073 };
enum { GL_COLOR_ATTACHMENT10 = 36074 };
enum { GL_COLOR_ATTACHMENT11 = 36075 };
enum { GL_COLOR_ATTACHMENT12 = 36076 };
enum { GL_COLOR_ATTACHMENT13 = 36077 };
enum { GL_COLOR_ATTACHMENT14 = 36078 };
enum { GL_COLOR_ATTACHMENT15 = 36079 };
enum { GL_DEPTH_ATTACHMENT = 36096 };
enum { GL_STENCIL_ATTACHMENT = 36128 };
enum { GL_FRAMEBUFFER = 36160 };
enum { GL_RENDERBUFFER = 36161 };
enum { GL_RENDERBUFFER_WIDTH = 36162 };
enum { GL_RENDERBUFFER_HEIGHT = 36163 };
enum { GL_RENDERBUFFER_INTERNAL_FORMAT = 36164 };
enum { GL_STENCIL_INDEX1 = 36166 };
enum { GL_STENCIL_INDEX4 = 36167 };
enum { GL_STENCIL_INDEX8 = 36168 };
enum { GL_STENCIL_INDEX16 = 36169 };
enum { GL_RENDERBUFFER_RED_SIZE = 36176 };
enum { GL_RENDERBUFFER_GREEN_SIZE = 36177 };
enum { GL_RENDERBUFFER_BLUE_SIZE = 36178 };
enum { GL_RENDERBUFFER_ALPHA_SIZE = 36179 };
enum { GL_RENDERBUFFER_DEPTH_SIZE = 36180 };
enum { GL_RENDERBUFFER_STENCIL_SIZE = 36181 };
enum { GL_FRAMEBUFFER_INCOMPLETE_MULTISAMPLE = 36182 };
enum { GL_MAX_SAMPLES = 36183 };
enum { GL_FRAMEBUFFER_SRGB = 36281 };
enum { GL_HALF_FLOAT_ARB = 5131 };
enum { GL_HALF_FLOAT = 5131 };
enum { GL_VERTEX_ATTRIB_ARRAY_DIVISOR_ARB = 35070 };
enum { GL_MULTISAMPLE_ARB = 32925 };
enum { GL_SAMPLE_ALPHA_TO_COVERAGE_ARB = 32926 };
enum { GL_SAMPLE_ALPHA_TO_ONE_ARB = 32927 };
enum { GL_SAMPLE_COVERAGE_ARB = 32928 };
enum { GL_SAMPLE_BUFFERS_ARB = 32936 };
enum { GL_SAMPLES_ARB = 32937 };
enum { GL_SAMPLE_COVERAGE_VALUE_ARB = 32938 };
enum { GL_SAMPLE_COVERAGE_INVERT_ARB = 32939 };
enum { GL_MULTISAMPLE_BIT_ARB = 536870912 };
enum { GL_TEXTURE0_ARB = 33984 };
enum { GL_TEXTURE1_ARB = 33985 };
enum { GL_TEXTURE2_ARB = 33986 };
enum { GL_TEXTURE3_ARB = 33987 };
enum { GL_TEXTURE4_ARB = 33988 };
enum { GL_TEXTURE5_ARB = 33989 };
enum { GL_TEXTURE6_ARB = 33990 };
enum { GL_TEXTURE7_ARB = 33991 };
enum { GL_TEXTURE8_ARB = 33992 };
enum { GL_TEXTURE9_ARB = 33993 };
enum { GL_TEXTURE10_ARB = 33994 };
enum { GL_TEXTURE11_ARB = 33995 };
enum { GL_TEXTURE12_ARB = 33996 };
enum { GL_TEXTURE13_ARB = 33997 };
enum { GL_TEXTURE14_ARB = 33998 };
enum { GL_TEXTURE15_ARB = 33999 };
enum { GL_TEXTURE16_ARB = 34000 };
enum { GL_TEXTURE17_ARB = 34001 };
enum { GL_TEXTURE18_ARB = 34002 };
enum { GL_TEXTURE19_ARB = 34003 };
enum { GL_TEXTURE20_ARB = 34004 };
enum { GL_TEXTURE21_ARB = 34005 };
enum { GL_TEXTURE22_ARB = 34006 };
enum { GL_TEXTURE23_ARB = 34007 };
enum { GL_TEXTURE24_ARB = 34008 };
enum { GL_TEXTURE25_ARB = 34009 };
enum { GL_TEXTURE26_ARB = 34010 };
enum { GL_TEXTURE27_ARB = 34011 };
enum { GL_TEXTURE28_ARB = 34012 };
enum { GL_TEXTURE29_ARB = 34013 };
enum { GL_TEXTURE30_ARB = 34014 };
enum { GL_TEXTURE31_ARB = 34015 };
enum { GL_ACTIVE_TEXTURE_ARB = 34016 };
enum { GL_CLIENT_ACTIVE_TEXTURE_ARB = 34017 };
enum { GL_MAX_TEXTURE_UNITS_ARB = 34018 };
enum { GL_SAMPLES_PASSED_ARB = 35092 };
enum { GL_QUERY_COUNTER_BITS_ARB = 34916 };
enum { GL_CURRENT_QUERY_ARB = 34917 };
enum { GL_QUERY_RESULT_ARB = 34918 };
enum { GL_QUERY_RESULT_AVAILABLE_ARB = 34919 };
enum { GL_PIXEL_PACK_BUFFER_ARB = 35051 };
enum { GL_PIXEL_UNPACK_BUFFER_ARB = 35052 };
enum { GL_PIXEL_PACK_BUFFER_BINDING_ARB = 35053 };
enum { GL_PIXEL_UNPACK_BUFFER_BINDING_ARB = 35055 };
enum { GL_POINT_SIZE_MIN_ARB = 33062 };
enum { GL_POINT_SIZE_MAX_ARB = 33063 };
enum { GL_POINT_FADE_THRESHOLD_SIZE_ARB = 33064 };
enum { GL_POINT_DISTANCE_ATTENUATION_ARB = 33065 };
enum { GL_POINT_SPRITE_ARB = 34913 };
enum { GL_COORD_REPLACE_ARB = 34914 };
enum { GL_FIRST_VERTEX_CONVENTION = 36429 };
enum { GL_LAST_VERTEX_CONVENTION = 36430 };
enum { GL_PROVOKING_VERTEX = 36431 };
enum { GL_QUADS_FOLLOW_PROVOKING_VERTEX_CONVENTION = 36428 };
enum { GL_TEXTURE_CUBE_MAP_SEAMLESS = 34895 };
enum { GL_PROGRAM_OBJECT_ARB = 35648 };
enum { GL_OBJECT_TYPE_ARB = 35662 };
enum { GL_OBJECT_SUBTYPE_ARB = 35663 };
enum { GL_OBJECT_DELETE_STATUS_ARB = 35712 };
enum { GL_OBJECT_COMPILE_STATUS_ARB = 35713 };
enum { GL_OBJECT_LINK_STATUS_ARB = 35714 };
enum { GL_OBJECT_VALIDATE_STATUS_ARB = 35715 };
enum { GL_OBJECT_INFO_LOG_LENGTH_ARB = 35716 };
enum { GL_OBJECT_ATTACHED_OBJECTS_ARB = 35717 };
enum { GL_OBJECT_ACTIVE_UNIFORMS_ARB = 35718 };
enum { GL_OBJECT_ACTIVE_UNIFORM_MAX_LENGTH_ARB = 35719 };
enum { GL_OBJECT_SHADER_SOURCE_LENGTH_ARB = 35720 };
enum { GL_SHADER_OBJECT_ARB = 35656 };
enum { GL_FLOAT_VEC2_ARB = 35664 };
enum { GL_FLOAT_VEC3_ARB = 35665 };
enum { GL_FLOAT_VEC4_ARB = 35666 };
enum { GL_INT_VEC2_ARB = 35667 };
enum { GL_INT_VEC3_ARB = 35668 };
enum { GL_INT_VEC4_ARB = 35669 };
enum { GL_BOOL_ARB = 35670 };
enum { GL_BOOL_VEC2_ARB = 35671 };
enum { GL_BOOL_VEC3_ARB = 35672 };
enum { GL_BOOL_VEC4_ARB = 35673 };
enum { GL_FLOAT_MAT2_ARB = 35674 };
enum { GL_FLOAT_MAT3_ARB = 35675 };
enum { GL_FLOAT_MAT4_ARB = 35676 };
enum { GL_SAMPLER_1D_ARB = 35677 };
enum { GL_SAMPLER_2D_ARB = 35678 };
enum { GL_SAMPLER_3D_ARB = 35679 };
enum { GL_SAMPLER_CUBE_ARB = 35680 };
enum { GL_SAMPLER_1D_SHADOW_ARB = 35681 };
enum { GL_SAMPLER_2D_SHADOW_ARB = 35682 };
enum { GL_SAMPLER_2D_RECT_ARB = 35683 };
enum { GL_SAMPLER_2D_RECT_SHADOW_ARB = 35684 };
enum { GL_SHADING_LANGUAGE_VERSION_ARB = 35724 };
enum { GL_TEXTURE_COMPARE_MODE_ARB = 34892 };
enum { GL_TEXTURE_COMPARE_FUNC_ARB = 34893 };
enum { GL_COMPARE_R_TO_TEXTURE_ARB = 34894 };
enum { GL_TEXTURE_COMPARE_FAIL_VALUE_ARB = 32959 };
enum { GL_MAX_SERVER_WAIT_TIMEOUT = 37137 };
enum { GL_OBJECT_TYPE = 37138 };
enum { GL_SYNC_CONDITION = 37139 };
enum { GL_SYNC_STATUS = 37140 };
enum { GL_SYNC_FLAGS = 37141 };
enum { GL_SYNC_FENCE = 37142 };
enum { GL_SYNC_GPU_COMMANDS_COMPLETE = 37143 };
enum { GL_UNSIGNALED = 37144 };
enum { GL_SIGNALED = 37145 };
enum { GL_ALREADY_SIGNALED = 37146 };
enum { GL_TIMEOUT_EXPIRED = 37147 };
enum { GL_CONDITION_SATISFIED = 37148 };
enum { GL_WAIT_FAILED = 37149 };
enum { GL_SYNC_FLUSH_COMMANDS_BIT = 1 };
/* #define GL_TIMEOUT_IGNORED                                   0xFFFFFFFFFFFFFFFFull ### string, not number "0xFFFFFFFFFFFFFFFFull" */
enum { GL_CLAMP_TO_BORDER_ARB = 33069 };
enum { GL_COMPRESSED_ALPHA_ARB = 34025 };
enum { GL_COMPRESSED_LUMINANCE_ARB = 34026 };
enum { GL_COMPRESSED_LUMINANCE_ALPHA_ARB = 34027 };
enum { GL_COMPRESSED_INTENSITY_ARB = 34028 };
enum { GL_COMPRESSED_RGB_ARB = 34029 };
enum { GL_COMPRESSED_RGBA_ARB = 34030 };
enum { GL_TEXTURE_COMPRESSION_HINT_ARB = 34031 };
enum { GL_TEXTURE_COMPRESSED_IMAGE_SIZE_ARB = 34464 };
enum { GL_TEXTURE_COMPRESSED_ARB = 34465 };
enum { GL_NUM_COMPRESSED_TEXTURE_FORMATS_ARB = 34466 };
enum { GL_COMPRESSED_TEXTURE_FORMATS_ARB = 34467 };
enum { GL_COMPRESSED_RED_RGTC1 = 36283 };
enum { GL_COMPRESSED_SIGNED_RED_RGTC1 = 36284 };
enum { GL_COMPRESSED_RG_RGTC2 = 36285 };
enum { GL_COMPRESSED_SIGNED_RG_RGTC2 = 36286 };
enum { GL_NORMAL_MAP_ARB = 34065 };
enum { GL_REFLECTION_MAP_ARB = 34066 };
enum { GL_TEXTURE_CUBE_MAP_ARB = 34067 };
enum { GL_TEXTURE_BINDING_CUBE_MAP_ARB = 34068 };
enum { GL_TEXTURE_CUBE_MAP_POSITIVE_X_ARB = 34069 };
enum { GL_TEXTURE_CUBE_MAP_NEGATIVE_X_ARB = 34070 };
enum { GL_TEXTURE_CUBE_MAP_POSITIVE_Y_ARB = 34071 };
enum { GL_TEXTURE_CUBE_MAP_NEGATIVE_Y_ARB = 34072 };
enum { GL_TEXTURE_CUBE_MAP_POSITIVE_Z_ARB = 34073 };
enum { GL_TEXTURE_CUBE_MAP_NEGATIVE_Z_ARB = 34074 };
enum { GL_PROXY_TEXTURE_CUBE_MAP_ARB = 34075 };
enum { GL_MAX_CUBE_MAP_TEXTURE_SIZE_ARB = 34076 };
enum { GL_COMBINE_ARB = 34160 };
enum { GL_COMBINE_RGB_ARB = 34161 };
enum { GL_COMBINE_ALPHA_ARB = 34162 };
enum { GL_RGB_SCALE_ARB = 34163 };
enum { GL_ADD_SIGNED_ARB = 34164 };
enum { GL_INTERPOLATE_ARB = 34165 };
enum { GL_CONSTANT_ARB = 34166 };
enum { GL_PRIMARY_COLOR_ARB = 34167 };
enum { GL_PREVIOUS_ARB = 34168 };
enum { GL_SUBTRACT_ARB = 34023 };
enum { GL_SOURCE0_RGB_ARB = 34176 };
enum { GL_SOURCE1_RGB_ARB = 34177 };
enum { GL_SOURCE2_RGB_ARB = 34178 };
enum { GL_SOURCE0_ALPHA_ARB = 34184 };
enum { GL_SOURCE1_ALPHA_ARB = 34185 };
enum { GL_SOURCE2_ALPHA_ARB = 34186 };
enum { GL_OPERAND0_RGB_ARB = 34192 };
enum { GL_OPERAND1_RGB_ARB = 34193 };
enum { GL_OPERAND2_RGB_ARB = 34194 };
enum { GL_OPERAND0_ALPHA_ARB = 34200 };
enum { GL_OPERAND1_ALPHA_ARB = 34201 };
enum { GL_OPERAND2_ALPHA_ARB = 34202 };
enum { GL_DOT3_RGB_ARB = 34478 };
enum { GL_DOT3_RGBA_ARB = 34479 };
enum { GL_TEXTURE_RED_TYPE_ARB = 35856 };
enum { GL_TEXTURE_GREEN_TYPE_ARB = 35857 };
enum { GL_TEXTURE_BLUE_TYPE_ARB = 35858 };
enum { GL_TEXTURE_ALPHA_TYPE_ARB = 35859 };
enum { GL_TEXTURE_LUMINANCE_TYPE_ARB = 35860 };
enum { GL_TEXTURE_INTENSITY_TYPE_ARB = 35861 };
enum { GL_TEXTURE_DEPTH_TYPE_ARB = 35862 };
enum { GL_UNSIGNED_NORMALIZED_ARB = 35863 };
enum { GL_RGBA32F_ARB = 34836 };
enum { GL_RGB32F_ARB = 34837 };
enum { GL_ALPHA32F_ARB = 34838 };
enum { GL_INTENSITY32F_ARB = 34839 };
enum { GL_LUMINANCE32F_ARB = 34840 };
enum { GL_LUMINANCE_ALPHA32F_ARB = 34841 };
enum { GL_RGBA16F_ARB = 34842 };
enum { GL_RGB16F_ARB = 34843 };
enum { GL_ALPHA16F_ARB = 34844 };
enum { GL_INTENSITY16F_ARB = 34845 };
enum { GL_LUMINANCE16F_ARB = 34846 };
enum { GL_LUMINANCE_ALPHA16F_ARB = 34847 };
enum { GL_MIRRORED_REPEAT_ARB = 33648 };
enum { GL_TEXTURE_RECTANGLE_ARB = 34037 };
enum { GL_TEXTURE_BINDING_RECTANGLE_ARB = 34038 };
enum { GL_PROXY_TEXTURE_RECTANGLE_ARB = 34039 };
enum { GL_MAX_RECTANGLE_TEXTURE_SIZE_ARB = 34040 };
enum { GL_COMPRESSED_RED = 33317 };
enum { GL_COMPRESSED_RG = 33318 };
enum { GL_RG = 33319 };
enum { GL_RG_INTEGER = 33320 };
enum { GL_R8 = 33321 };
enum { GL_R16 = 33322 };
enum { GL_RG8 = 33323 };
enum { GL_RG16 = 33324 };
enum { GL_R16F = 33325 };
enum { GL_R32F = 33326 };
enum { GL_RG16F = 33327 };
enum { GL_RG32F = 33328 };
enum { GL_R8I = 33329 };
enum { GL_R8UI = 33330 };
enum { GL_R16I = 33331 };
enum { GL_R16UI = 33332 };
enum { GL_R32I = 33333 };
enum { GL_R32UI = 33334 };
enum { GL_RG8I = 33335 };
enum { GL_RG8UI = 33336 };
enum { GL_RG16I = 33337 };
enum { GL_RG16UI = 33338 };
enum { GL_RG32I = 33339 };
enum { GL_RG32UI = 33340 };
enum { GL_TRANSPOSE_MODELVIEW_MATRIX_ARB = 34019 };
enum { GL_TRANSPOSE_PROJECTION_MATRIX_ARB = 34020 };
enum { GL_TRANSPOSE_TEXTURE_MATRIX_ARB = 34021 };
enum { GL_TRANSPOSE_COLOR_MATRIX_ARB = 34022 };
enum { GL_MAX_VERTEX_UNITS_ARB = 34468 };
enum { GL_ACTIVE_VERTEX_UNITS_ARB = 34469 };
enum { GL_WEIGHT_SUM_UNITY_ARB = 34470 };
enum { GL_VERTEX_BLEND_ARB = 34471 };
enum { GL_CURRENT_WEIGHT_ARB = 34472 };
enum { GL_WEIGHT_ARRAY_TYPE_ARB = 34473 };
enum { GL_WEIGHT_ARRAY_STRIDE_ARB = 34474 };
enum { GL_WEIGHT_ARRAY_SIZE_ARB = 34475 };
enum { GL_WEIGHT_ARRAY_POINTER_ARB = 34476 };
enum { GL_WEIGHT_ARRAY_ARB = 34477 };
enum { GL_MODELVIEW0_ARB = 5888 };
enum { GL_MODELVIEW1_ARB = 34058 };
enum { GL_MODELVIEW2_ARB = 34594 };
enum { GL_MODELVIEW3_ARB = 34595 };
enum { GL_MODELVIEW4_ARB = 34596 };
enum { GL_MODELVIEW5_ARB = 34597 };
enum { GL_MODELVIEW6_ARB = 34598 };
enum { GL_MODELVIEW7_ARB = 34599 };
enum { GL_MODELVIEW8_ARB = 34600 };
enum { GL_MODELVIEW9_ARB = 34601 };
enum { GL_MODELVIEW10_ARB = 34602 };
enum { GL_MODELVIEW11_ARB = 34603 };
enum { GL_MODELVIEW12_ARB = 34604 };
enum { GL_MODELVIEW13_ARB = 34605 };
enum { GL_MODELVIEW14_ARB = 34606 };
enum { GL_MODELVIEW15_ARB = 34607 };
enum { GL_MODELVIEW16_ARB = 34608 };
enum { GL_MODELVIEW17_ARB = 34609 };
enum { GL_MODELVIEW18_ARB = 34610 };
enum { GL_MODELVIEW19_ARB = 34611 };
enum { GL_MODELVIEW20_ARB = 34612 };
enum { GL_MODELVIEW21_ARB = 34613 };
enum { GL_MODELVIEW22_ARB = 34614 };
enum { GL_MODELVIEW23_ARB = 34615 };
enum { GL_MODELVIEW24_ARB = 34616 };
enum { GL_MODELVIEW25_ARB = 34617 };
enum { GL_MODELVIEW26_ARB = 34618 };
enum { GL_MODELVIEW27_ARB = 34619 };
enum { GL_MODELVIEW28_ARB = 34620 };
enum { GL_MODELVIEW29_ARB = 34621 };
enum { GL_MODELVIEW30_ARB = 34622 };
enum { GL_MODELVIEW31_ARB = 34623 };
enum { GL_ARRAY_BUFFER_ARB = 34962 };
enum { GL_ELEMENT_ARRAY_BUFFER_ARB = 34963 };
enum { GL_ARRAY_BUFFER_BINDING_ARB = 34964 };
enum { GL_ELEMENT_ARRAY_BUFFER_BINDING_ARB = 34965 };
enum { GL_VERTEX_ARRAY_BUFFER_BINDING_ARB = 34966 };
enum { GL_NORMAL_ARRAY_BUFFER_BINDING_ARB = 34967 };
enum { GL_COLOR_ARRAY_BUFFER_BINDING_ARB = 34968 };
enum { GL_INDEX_ARRAY_BUFFER_BINDING_ARB = 34969 };
enum { GL_TEXTURE_COORD_ARRAY_BUFFER_BINDING_ARB = 34970 };
enum { GL_EDGE_FLAG_ARRAY_BUFFER_BINDING_ARB = 34971 };
enum { GL_SECONDARY_COLOR_ARRAY_BUFFER_BINDING_ARB = 34972 };
enum { GL_FOG_COORD_ARRAY_BUFFER_BINDING_ARB = 34973 };
enum { GL_WEIGHT_ARRAY_BUFFER_BINDING_ARB = 34974 };
enum { GL_VERTEX_ATTRIB_ARRAY_BUFFER_BINDING_ARB = 34975 };
enum { GL_STREAM_DRAW_ARB = 35040 };
enum { GL_STREAM_READ_ARB = 35041 };
enum { GL_STREAM_COPY_ARB = 35042 };
enum { GL_STATIC_DRAW_ARB = 35044 };
enum { GL_STATIC_READ_ARB = 35045 };
enum { GL_STATIC_COPY_ARB = 35046 };
enum { GL_DYNAMIC_DRAW_ARB = 35048 };
enum { GL_DYNAMIC_READ_ARB = 35049 };
enum { GL_DYNAMIC_COPY_ARB = 35050 };
enum { GL_READ_ONLY_ARB = 35000 };
enum { GL_WRITE_ONLY_ARB = 35001 };
enum { GL_READ_WRITE_ARB = 35002 };
enum { GL_BUFFER_SIZE_ARB = 34660 };
enum { GL_BUFFER_USAGE_ARB = 34661 };
enum { GL_BUFFER_ACCESS_ARB = 35003 };
enum { GL_BUFFER_MAPPED_ARB = 35004 };
enum { GL_BUFFER_MAP_POINTER_ARB = 35005 };
enum { GL_FOG_COORDINATE_ARRAY_BUFFER_BINDING_ARB = 34973 };
enum { GL_VERTEX_PROGRAM_ARB = 34336 };
enum { GL_VERTEX_PROGRAM_POINT_SIZE_ARB = 34370 };
enum { GL_VERTEX_PROGRAM_TWO_SIDE_ARB = 34371 };
enum { GL_PROGRAM_FORMAT_ASCII_ARB = 34933 };
enum { GL_VERTEX_ATTRIB_ARRAY_ENABLED_ARB = 34338 };
enum { GL_VERTEX_ATTRIB_ARRAY_SIZE_ARB = 34339 };
enum { GL_VERTEX_ATTRIB_ARRAY_STRIDE_ARB = 34340 };
enum { GL_VERTEX_ATTRIB_ARRAY_TYPE_ARB = 34341 };
enum { GL_VERTEX_ATTRIB_ARRAY_NORMALIZED_ARB = 34922 };
enum { GL_CURRENT_VERTEX_ATTRIB_ARB = 34342 };
enum { GL_VERTEX_ATTRIB_ARRAY_POINTER_ARB = 34373 };
enum { GL_PROGRAM_LENGTH_ARB = 34343 };
enum { GL_PROGRAM_FORMAT_ARB = 34934 };
enum { GL_PROGRAM_NAME_ARB = 34423 };
enum { GL_PROGRAM_BINDING_ARB = 34423 };
enum { GL_PROGRAM_INSTRUCTIONS_ARB = 34976 };
enum { GL_MAX_PROGRAM_INSTRUCTIONS_ARB = 34977 };
enum { GL_PROGRAM_NATIVE_INSTRUCTIONS_ARB = 34978 };
enum { GL_MAX_PROGRAM_NATIVE_INSTRUCTIONS_ARB = 34979 };
enum { GL_PROGRAM_TEMPORARIES_ARB = 34980 };
enum { GL_MAX_PROGRAM_TEMPORARIES_ARB = 34981 };
enum { GL_PROGRAM_NATIVE_TEMPORARIES_ARB = 34982 };
enum { GL_MAX_PROGRAM_NATIVE_TEMPORARIES_ARB = 34983 };
enum { GL_PROGRAM_PARAMETERS_ARB = 34984 };
enum { GL_MAX_PROGRAM_PARAMETERS_ARB = 34985 };
enum { GL_PROGRAM_NATIVE_PARAMETERS_ARB = 34986 };
enum { GL_MAX_PROGRAM_NATIVE_PARAMETERS_ARB = 34987 };
enum { GL_PROGRAM_ATTRIBS_ARB = 34988 };
enum { GL_MAX_PROGRAM_ATTRIBS_ARB = 34989 };
enum { GL_PROGRAM_NATIVE_ATTRIBS_ARB = 34990 };
enum { GL_MAX_PROGRAM_NATIVE_ATTRIBS_ARB = 34991 };
enum { GL_PROGRAM_ADDRESS_REGISTERS_ARB = 34992 };
enum { GL_MAX_PROGRAM_ADDRESS_REGISTERS_ARB = 34993 };
enum { GL_PROGRAM_NATIVE_ADDRESS_REGISTERS_ARB = 34994 };
enum { GL_MAX_PROGRAM_NATIVE_ADDRESS_REGISTERS_ARB = 34995 };
enum { GL_MAX_PROGRAM_LOCAL_PARAMETERS_ARB = 34996 };
enum { GL_MAX_PROGRAM_ENV_PARAMETERS_ARB = 34997 };
enum { GL_PROGRAM_UNDER_NATIVE_LIMITS_ARB = 34998 };
enum { GL_PROGRAM_STRING_ARB = 34344 };
enum { GL_PROGRAM_ERROR_POSITION_ARB = 34379 };
enum { GL_CURRENT_MATRIX_ARB = 34369 };
enum { GL_TRANSPOSE_CURRENT_MATRIX_ARB = 34999 };
enum { GL_CURRENT_MATRIX_STACK_DEPTH_ARB = 34368 };
enum { GL_MAX_VERTEX_ATTRIBS_ARB = 34921 };
enum { GL_MAX_PROGRAM_MATRICES_ARB = 34351 };
enum { GL_MAX_PROGRAM_MATRIX_STACK_DEPTH_ARB = 34350 };
enum { GL_PROGRAM_ERROR_STRING_ARB = 34932 };
enum { GL_MATRIX0_ARB = 35008 };
enum { GL_MATRIX1_ARB = 35009 };
enum { GL_MATRIX2_ARB = 35010 };
enum { GL_MATRIX3_ARB = 35011 };
enum { GL_MATRIX4_ARB = 35012 };
enum { GL_MATRIX5_ARB = 35013 };
enum { GL_MATRIX6_ARB = 35014 };
enum { GL_MATRIX7_ARB = 35015 };
enum { GL_MATRIX8_ARB = 35016 };
enum { GL_MATRIX9_ARB = 35017 };
enum { GL_MATRIX10_ARB = 35018 };
enum { GL_MATRIX11_ARB = 35019 };
enum { GL_MATRIX12_ARB = 35020 };
enum { GL_MATRIX13_ARB = 35021 };
enum { GL_MATRIX14_ARB = 35022 };
enum { GL_MATRIX15_ARB = 35023 };
enum { GL_MATRIX16_ARB = 35024 };
enum { GL_MATRIX17_ARB = 35025 };
enum { GL_MATRIX18_ARB = 35026 };
enum { GL_MATRIX19_ARB = 35027 };
enum { GL_MATRIX20_ARB = 35028 };
enum { GL_MATRIX21_ARB = 35029 };
enum { GL_MATRIX22_ARB = 35030 };
enum { GL_MATRIX23_ARB = 35031 };
enum { GL_MATRIX24_ARB = 35032 };
enum { GL_MATRIX25_ARB = 35033 };
enum { GL_MATRIX26_ARB = 35034 };
enum { GL_MATRIX27_ARB = 35035 };
enum { GL_MATRIX28_ARB = 35036 };
enum { GL_MATRIX29_ARB = 35037 };
enum { GL_MATRIX30_ARB = 35038 };
enum { GL_MATRIX31_ARB = 35039 };
enum { GL_COLOR_SUM_ARB = 33880 };
enum { GL_VERTEX_SHADER_ARB = 35633 };
enum { GL_MAX_VERTEX_UNIFORM_COMPONENTS_ARB = 35658 };
/* redefining matching value: #define GL_MAX_TEXTURE_COORDS_ARB                            0x8871 */
/* redefining matching value: #define GL_MAX_TEXTURE_IMAGE_UNITS_ARB                       0x8872 */
enum { GL_MAX_VARYING_FLOATS_ARB = 35659 };
/* redefining matching value: #define GL_MAX_VERTEX_ATTRIBS_ARB                            0x8869 */
enum { GL_MAX_COMBINED_TEXTURE_IMAGE_UNITS_ARB = 35661 };
/* redefining matching value: #define GL_VERTEX_PROGRAM_POINT_SIZE_ARB                     0x8642 */
/* redefining matching value: #define GL_VERTEX_PROGRAM_TWO_SIDE_ARB                       0x8643 */
enum { GL_OBJECT_ACTIVE_ATTRIBUTES_ARB = 35721 };
enum { GL_OBJECT_ACTIVE_ATTRIBUTE_MAX_LENGTH_ARB = 35722 };
/* redefining matching value: #define GL_VERTEX_ATTRIB_ARRAY_ENABLED_ARB                   0x8622 */
/* redefining matching value: #define GL_VERTEX_ATTRIB_ARRAY_SIZE_ARB                      0x8623 */
/* redefining matching value: #define GL_VERTEX_ATTRIB_ARRAY_STRIDE_ARB                    0x8624 */
/* redefining matching value: #define GL_VERTEX_ATTRIB_ARRAY_TYPE_ARB                      0x8625 */
/* redefining matching value: #define GL_VERTEX_ATTRIB_ARRAY_NORMALIZED_ARB                0x886A */
/* redefining matching value: #define GL_CURRENT_VERTEX_ATTRIB_ARB                         0x8626 */
/* redefining matching value: #define GL_VERTEX_ATTRIB_ARRAY_POINTER_ARB                   0x8645 */
enum { GL_MAX_VERTEX_TEXTURE_IMAGE_UNITS_ARB = 35660 };
enum { GL_ABGR_EXT = 32768 };
enum { GL_BGR_EXT = 32992 };
enum { GL_BGRA_EXT = 32993 };
enum { GL_MAX_VERTEX_BINDABLE_UNIFORMS_EXT = 36322 };
enum { GL_MAX_FRAGMENT_BINDABLE_UNIFORMS_EXT = 36323 };
enum { GL_MAX_GEOMETRY_BINDABLE_UNIFORMS_EXT = 36324 };
enum { GL_MAX_BINDABLE_UNIFORM_SIZE_EXT = 36333 };
enum { GL_UNIFORM_BUFFER_BINDING_EXT = 36335 };
enum { GL_UNIFORM_BUFFER_EXT = 36334 };
enum { GL_CONSTANT_COLOR_EXT = 32769 };
enum { GL_ONE_MINUS_CONSTANT_COLOR_EXT = 32770 };
enum { GL_CONSTANT_ALPHA_EXT = 32771 };
enum { GL_ONE_MINUS_CONSTANT_ALPHA_EXT = 32772 };
enum { GL_BLEND_COLOR_EXT = 32773 };
enum { GL_BLEND_EQUATION_RGB_EXT = 32777 };
enum { GL_BLEND_EQUATION_ALPHA_EXT = 34877 };
enum { GL_BLEND_DST_RGB_EXT = 32968 };
enum { GL_BLEND_SRC_RGB_EXT = 32969 };
enum { GL_BLEND_DST_ALPHA_EXT = 32970 };
enum { GL_BLEND_SRC_ALPHA_EXT = 32971 };
enum { GL_FUNC_ADD_EXT = 32774 };
enum { GL_MIN_EXT = 32775 };
enum { GL_MAX_EXT = 32776 };
enum { GL_BLEND_EQUATION_EXT = 32777 };
enum { GL_FUNC_SUBTRACT_EXT = 32778 };
enum { GL_FUNC_REVERSE_SUBTRACT_EXT = 32779 };
enum { GL_CLIP_VOLUME_CLIPPING_HINT_EXT = 33008 };
enum { GL_BUFFER_OBJECT_EXT = 37201 };
enum { GL_SHADER_OBJECT_EXT = 35656 };
enum { GL_PROGRAM_OBJECT_EXT = 35648 };
enum { GL_QUERY_OBJECT_EXT = 37203 };
enum { GL_VERTEX_ARRAY_OBJECT_EXT = 37204 };
enum { GL_SAMPLER = 33510 };
enum { GL_SYNC_OBJECT_APPLE = 35411 };
enum { GL_DEPTH_BOUNDS_TEST_EXT = 34960 };
enum { GL_DEPTH_BOUNDS_EXT = 34961 };
enum { GL_MAX_ELEMENTS_VERTICES_EXT = 33000 };
enum { GL_MAX_ELEMENTS_INDICES_EXT = 33001 };
enum { GL_FOG_COORDINATE_SOURCE_EXT = 33872 };
enum { GL_FOG_COORDINATE_EXT = 33873 };
enum { GL_FRAGMENT_DEPTH_EXT = 33874 };
enum { GL_CURRENT_FOG_COORDINATE_EXT = 33875 };
enum { GL_FOG_COORDINATE_ARRAY_TYPE_EXT = 33876 };
enum { GL_FOG_COORDINATE_ARRAY_STRIDE_EXT = 33877 };
enum { GL_FOG_COORDINATE_ARRAY_POINTER_EXT = 33878 };
enum { GL_FOG_COORDINATE_ARRAY_EXT = 33879 };
enum { GL_READ_FRAMEBUFFER_EXT = 36008 };
enum { GL_DRAW_FRAMEBUFFER_EXT = 36009 };
enum { GL_DRAW_FRAMEBUFFER_BINDING_EXT = 36006 };
enum { GL_READ_FRAMEBUFFER_BINDING_EXT = 36010 };
enum { GL_RENDERBUFFER_SAMPLES_EXT = 36011 };
enum { GL_FRAMEBUFFER_INCOMPLETE_MULTISAMPLE_EXT = 36182 };
enum { GL_MAX_SAMPLES_EXT = 36183 };
enum { GL_SCALED_RESOLVE_FASTEST_EXT = 37050 };
enum { GL_SCALED_RESOLVE_NICEST_EXT = 37051 };
enum { GL_FRAMEBUFFER_EXT = 36160 };
enum { GL_RENDERBUFFER_EXT = 36161 };
enum { GL_STENCIL_INDEX1_EXT = 36166 };
enum { GL_STENCIL_INDEX4_EXT = 36167 };
enum { GL_STENCIL_INDEX8_EXT = 36168 };
enum { GL_STENCIL_INDEX16_EXT = 36169 };
enum { GL_RENDERBUFFER_WIDTH_EXT = 36162 };
enum { GL_RENDERBUFFER_HEIGHT_EXT = 36163 };
enum { GL_RENDERBUFFER_INTERNAL_FORMAT_EXT = 36164 };
enum { GL_RENDERBUFFER_RED_SIZE_EXT = 36176 };
enum { GL_RENDERBUFFER_GREEN_SIZE_EXT = 36177 };
enum { GL_RENDERBUFFER_BLUE_SIZE_EXT = 36178 };
enum { GL_RENDERBUFFER_ALPHA_SIZE_EXT = 36179 };
enum { GL_RENDERBUFFER_DEPTH_SIZE_EXT = 36180 };
enum { GL_RENDERBUFFER_STENCIL_SIZE_EXT = 36181 };
enum { GL_FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE_EXT = 36048 };
enum { GL_FRAMEBUFFER_ATTACHMENT_OBJECT_NAME_EXT = 36049 };
enum { GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL_EXT = 36050 };
enum { GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE_EXT = 36051 };
enum { GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_3D_ZOFFSET_EXT = 36052 };
enum { GL_COLOR_ATTACHMENT0_EXT = 36064 };
enum { GL_COLOR_ATTACHMENT1_EXT = 36065 };
enum { GL_COLOR_ATTACHMENT2_EXT = 36066 };
enum { GL_COLOR_ATTACHMENT3_EXT = 36067 };
enum { GL_COLOR_ATTACHMENT4_EXT = 36068 };
enum { GL_COLOR_ATTACHMENT5_EXT = 36069 };
enum { GL_COLOR_ATTACHMENT6_EXT = 36070 };
enum { GL_COLOR_ATTACHMENT7_EXT = 36071 };
enum { GL_COLOR_ATTACHMENT8_EXT = 36072 };
enum { GL_COLOR_ATTACHMENT9_EXT = 36073 };
enum { GL_COLOR_ATTACHMENT10_EXT = 36074 };
enum { GL_COLOR_ATTACHMENT11_EXT = 36075 };
enum { GL_COLOR_ATTACHMENT12_EXT = 36076 };
enum { GL_COLOR_ATTACHMENT13_EXT = 36077 };
enum { GL_COLOR_ATTACHMENT14_EXT = 36078 };
enum { GL_COLOR_ATTACHMENT15_EXT = 36079 };
enum { GL_DEPTH_ATTACHMENT_EXT = 36096 };
enum { GL_STENCIL_ATTACHMENT_EXT = 36128 };
enum { GL_FRAMEBUFFER_COMPLETE_EXT = 36053 };
enum { GL_FRAMEBUFFER_INCOMPLETE_ATTACHMENT_EXT = 36054 };
enum { GL_FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT_EXT = 36055 };
enum { GL_FRAMEBUFFER_INCOMPLETE_DIMENSIONS_EXT = 36057 };
enum { GL_FRAMEBUFFER_INCOMPLETE_FORMATS_EXT = 36058 };
enum { GL_FRAMEBUFFER_INCOMPLETE_DRAW_BUFFER_EXT = 36059 };
enum { GL_FRAMEBUFFER_INCOMPLETE_READ_BUFFER_EXT = 36060 };
enum { GL_FRAMEBUFFER_UNSUPPORTED_EXT = 36061 };
enum { GL_FRAMEBUFFER_BINDING_EXT = 36006 };
enum { GL_RENDERBUFFER_BINDING_EXT = 36007 };
enum { GL_MAX_COLOR_ATTACHMENTS_EXT = 36063 };
enum { GL_MAX_RENDERBUFFER_SIZE_EXT = 34024 };
enum { GL_INVALID_FRAMEBUFFER_OPERATION_EXT = 1286 };
enum { GL_FRAMEBUFFER_SRGB_EXT = 36281 };
enum { GL_FRAMEBUFFER_SRGB_CAPABLE_EXT = 36282 };
enum { GL_GEOMETRY_SHADER_EXT = 36313 };
enum { GL_GEOMETRY_VERTICES_OUT_EXT = 36314 };
enum { GL_GEOMETRY_INPUT_TYPE_EXT = 36315 };
enum { GL_GEOMETRY_OUTPUT_TYPE_EXT = 36316 };
enum { GL_MAX_GEOMETRY_TEXTURE_IMAGE_UNITS_EXT = 35881 };
enum { GL_MAX_GEOMETRY_VARYING_COMPONENTS_EXT = 36317 };
enum { GL_MAX_VERTEX_VARYING_COMPONENTS_EXT = 36318 };
enum { GL_MAX_VARYING_COMPONENTS_EXT = 35659 };
enum { GL_MAX_GEOMETRY_UNIFORM_COMPONENTS_EXT = 36319 };
enum { GL_MAX_GEOMETRY_OUTPUT_VERTICES_EXT = 36320 };
enum { GL_MAX_GEOMETRY_TOTAL_OUTPUT_COMPONENTS_EXT = 36321 };
enum { GL_LINES_ADJACENCY_EXT = 10 };
enum { GL_LINE_STRIP_ADJACENCY_EXT = 11 };
enum { GL_TRIANGLES_ADJACENCY_EXT = 12 };
enum { GL_TRIANGLE_STRIP_ADJACENCY_EXT = 13 };
enum { GL_FRAMEBUFFER_INCOMPLETE_LAYER_TARGETS_EXT = 36264 };
enum { GL_FRAMEBUFFER_INCOMPLETE_LAYER_COUNT_EXT = 36265 };
enum { GL_FRAMEBUFFER_ATTACHMENT_LAYERED_EXT = 36263 };
enum { GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_LAYER_EXT = 36052 };
enum { GL_PROGRAM_POINT_SIZE_EXT = 34370 };
enum { GL_VERTEX_ATTRIB_ARRAY_INTEGER_EXT = 35069 };
enum { GL_SAMPLER_1D_ARRAY_EXT = 36288 };
enum { GL_SAMPLER_2D_ARRAY_EXT = 36289 };
enum { GL_SAMPLER_BUFFER_EXT = 36290 };
enum { GL_SAMPLER_1D_ARRAY_SHADOW_EXT = 36291 };
enum { GL_SAMPLER_2D_ARRAY_SHADOW_EXT = 36292 };
enum { GL_SAMPLER_CUBE_SHADOW_EXT = 36293 };
enum { GL_UNSIGNED_INT_VEC2_EXT = 36294 };
enum { GL_UNSIGNED_INT_VEC3_EXT = 36295 };
enum { GL_UNSIGNED_INT_VEC4_EXT = 36296 };
enum { GL_INT_SAMPLER_1D_EXT = 36297 };
enum { GL_INT_SAMPLER_2D_EXT = 36298 };
enum { GL_INT_SAMPLER_3D_EXT = 36299 };
enum { GL_INT_SAMPLER_CUBE_EXT = 36300 };
enum { GL_INT_SAMPLER_2D_RECT_EXT = 36301 };
enum { GL_INT_SAMPLER_1D_ARRAY_EXT = 36302 };
enum { GL_INT_SAMPLER_2D_ARRAY_EXT = 36303 };
enum { GL_INT_SAMPLER_BUFFER_EXT = 36304 };
enum { GL_UNSIGNED_INT_SAMPLER_1D_EXT = 36305 };
enum { GL_UNSIGNED_INT_SAMPLER_2D_EXT = 36306 };
enum { GL_UNSIGNED_INT_SAMPLER_3D_EXT = 36307 };
enum { GL_UNSIGNED_INT_SAMPLER_CUBE_EXT = 36308 };
enum { GL_UNSIGNED_INT_SAMPLER_2D_RECT_EXT = 36309 };
enum { GL_UNSIGNED_INT_SAMPLER_1D_ARRAY_EXT = 36310 };
enum { GL_UNSIGNED_INT_SAMPLER_2D_ARRAY_EXT = 36311 };
enum { GL_UNSIGNED_INT_SAMPLER_BUFFER_EXT = 36312 };
enum { GL_MIN_PROGRAM_TEXEL_OFFSET_EXT = 35076 };
enum { GL_MAX_PROGRAM_TEXEL_OFFSET_EXT = 35077 };
enum { GL_DEPTH_STENCIL_EXT = 34041 };
enum { GL_UNSIGNED_INT_24_8_EXT = 34042 };
enum { GL_DEPTH24_STENCIL8_EXT = 35056 };
enum { GL_TEXTURE_STENCIL_SIZE_EXT = 35057 };
enum { GL_R11F_G11F_B10F_EXT = 35898 };
enum { GL_UNSIGNED_INT_10F_11F_11F_REV_EXT = 35899 };
enum { GL_RGBA_SIGNED_COMPONENTS_EXT = 35900 };
enum { GL_FIRST_VERTEX_CONVENTION_EXT = 36429 };
enum { GL_LAST_VERTEX_CONVENTION_EXT = 36430 };
enum { GL_PROVOKING_VERTEX_EXT = 36431 };
enum { GL_QUADS_FOLLOW_PROVOKING_VERTEX_CONVENTION_EXT = 36428 };
enum { GL_RESCALE_NORMAL_EXT = 32826 };
enum { GL_COLOR_SUM_EXT = 33880 };
enum { GL_CURRENT_SECONDARY_COLOR_EXT = 33881 };
enum { GL_SECONDARY_COLOR_ARRAY_SIZE_EXT = 33882 };
enum { GL_SECONDARY_COLOR_ARRAY_TYPE_EXT = 33883 };
enum { GL_SECONDARY_COLOR_ARRAY_STRIDE_EXT = 33884 };
enum { GL_SECONDARY_COLOR_ARRAY_POINTER_EXT = 33885 };
enum { GL_SECONDARY_COLOR_ARRAY_EXT = 33886 };
enum { GL_LIGHT_MODEL_COLOR_CONTROL_EXT = 33272 };
enum { GL_SINGLE_COLOR_EXT = 33273 };
enum { GL_SEPARATE_SPECULAR_COLOR_EXT = 33274 };
enum { GL_STENCIL_TEST_TWO_SIDE_EXT = 35088 };
enum { GL_ACTIVE_STENCIL_FACE_EXT = 35089 };
enum { GL_INCR_WRAP_EXT = 34055 };
enum { GL_DECR_WRAP_EXT = 34056 };
enum { GL_TEXTURE_1D_ARRAY_EXT = 35864 };
enum { GL_PROXY_TEXTURE_1D_ARRAY_EXT = 35865 };
enum { GL_TEXTURE_2D_ARRAY_EXT = 35866 };
enum { GL_PROXY_TEXTURE_2D_ARRAY_EXT = 35867 };
enum { GL_TEXTURE_BINDING_1D_ARRAY_EXT = 35868 };
enum { GL_TEXTURE_BINDING_2D_ARRAY_EXT = 35869 };
enum { GL_MAX_ARRAY_TEXTURE_LAYERS_EXT = 35071 };
enum { GL_COMPARE_REF_DEPTH_TO_TEXTURE_EXT = 34894 };
enum { GL_COMPRESSED_RGB_S3TC_DXT1_EXT = 33776 };
enum { GL_COMPRESSED_RGBA_S3TC_DXT1_EXT = 33777 };
enum { GL_COMPRESSED_RGBA_S3TC_DXT3_EXT = 33778 };
enum { GL_COMPRESSED_RGBA_S3TC_DXT5_EXT = 33779 };
enum { GL_TEXTURE_MAX_ANISOTROPY_EXT = 34046 };
enum { GL_MAX_TEXTURE_MAX_ANISOTROPY_EXT = 34047 };
enum { GL_RGBA_INTEGER_MODE_EXT = 36254 };
enum { GL_RGBA32UI_EXT = 36208 };
enum { GL_RGB32UI_EXT = 36209 };
enum { GL_ALPHA32UI_EXT = 36210 };
enum { GL_INTENSITY32UI_EXT = 36211 };
enum { GL_LUMINANCE32UI_EXT = 36212 };
enum { GL_LUMINANCE_ALPHA32UI_EXT = 36213 };
enum { GL_RGBA16UI_EXT = 36214 };
enum { GL_RGB16UI_EXT = 36215 };
enum { GL_ALPHA16UI_EXT = 36216 };
enum { GL_INTENSITY16UI_EXT = 36217 };
enum { GL_LUMINANCE16UI_EXT = 36218 };
enum { GL_LUMINANCE_ALPHA16UI_EXT = 36219 };
enum { GL_RGBA8UI_EXT = 36220 };
enum { GL_RGB8UI_EXT = 36221 };
enum { GL_ALPHA8UI_EXT = 36222 };
enum { GL_INTENSITY8UI_EXT = 36223 };
enum { GL_LUMINANCE8UI_EXT = 36224 };
enum { GL_LUMINANCE_ALPHA8UI_EXT = 36225 };
enum { GL_RGBA32I_EXT = 36226 };
enum { GL_RGB32I_EXT = 36227 };
enum { GL_ALPHA32I_EXT = 36228 };
enum { GL_INTENSITY32I_EXT = 36229 };
enum { GL_LUMINANCE32I_EXT = 36230 };
enum { GL_LUMINANCE_ALPHA32I_EXT = 36231 };
enum { GL_RGBA16I_EXT = 36232 };
enum { GL_RGB16I_EXT = 36233 };
enum { GL_ALPHA16I_EXT = 36234 };
enum { GL_INTENSITY16I_EXT = 36235 };
enum { GL_LUMINANCE16I_EXT = 36236 };
enum { GL_LUMINANCE_ALPHA16I_EXT = 36237 };
enum { GL_RGBA8I_EXT = 36238 };
enum { GL_RGB8I_EXT = 36239 };
enum { GL_ALPHA8I_EXT = 36240 };
enum { GL_INTENSITY8I_EXT = 36241 };
enum { GL_LUMINANCE8I_EXT = 36242 };
enum { GL_LUMINANCE_ALPHA8I_EXT = 36243 };
enum { GL_RED_INTEGER_EXT = 36244 };
enum { GL_GREEN_INTEGER_EXT = 36245 };
enum { GL_BLUE_INTEGER_EXT = 36246 };
enum { GL_ALPHA_INTEGER_EXT = 36247 };
enum { GL_RGB_INTEGER_EXT = 36248 };
enum { GL_RGBA_INTEGER_EXT = 36249 };
enum { GL_BGR_INTEGER_EXT = 36250 };
enum { GL_BGRA_INTEGER_EXT = 36251 };
enum { GL_LUMINANCE_INTEGER_EXT = 36252 };
enum { GL_LUMINANCE_ALPHA_INTEGER_EXT = 36253 };
enum { GL_MAX_TEXTURE_LOD_BIAS_EXT = 34045 };
enum { GL_TEXTURE_FILTER_CONTROL_EXT = 34048 };
enum { GL_TEXTURE_LOD_BIAS_EXT = 34049 };
enum { GL_MIRROR_CLAMP_EXT = 34626 };
enum { GL_MIRROR_CLAMP_TO_EDGE_EXT = 34627 };
enum { GL_MIRROR_CLAMP_TO_BORDER_EXT = 35090 };
enum { GL_TEXTURE_RECTANGLE_EXT = 34037 };
enum { GL_TEXTURE_BINDING_RECTANGLE_EXT = 34038 };
enum { GL_PROXY_TEXTURE_RECTANGLE_EXT = 34039 };
enum { GL_MAX_RECTANGLE_TEXTURE_SIZE_EXT = 34040 };
enum { GL_RGB9_E5_EXT = 35901 };
enum { GL_UNSIGNED_INT_5_9_9_9_REV_EXT = 35902 };
enum { GL_TEXTURE_SHARED_SIZE_EXT = 35903 };
enum { GL_SRGB_EXT = 35904 };
enum { GL_SRGB8_EXT = 35905 };
enum { GL_SRGB_ALPHA_EXT = 35906 };
enum { GL_SRGB8_ALPHA8_EXT = 35907 };
enum { GL_SLUMINANCE_ALPHA_EXT = 35908 };
enum { GL_SLUMINANCE8_ALPHA8_EXT = 35909 };
enum { GL_SLUMINANCE_EXT = 35910 };
enum { GL_SLUMINANCE8_EXT = 35911 };
enum { GL_COMPRESSED_SRGB_EXT = 35912 };
enum { GL_COMPRESSED_SRGB_ALPHA_EXT = 35913 };
enum { GL_COMPRESSED_SLUMINANCE_EXT = 35914 };
enum { GL_COMPRESSED_SLUMINANCE_ALPHA_EXT = 35915 };
enum { GL_COMPRESSED_SRGB_S3TC_DXT1_EXT = 35916 };
enum { GL_COMPRESSED_SRGB_ALPHA_S3TC_DXT1_EXT = 35917 };
enum { GL_COMPRESSED_SRGB_ALPHA_S3TC_DXT3_EXT = 35918 };
enum { GL_COMPRESSED_SRGB_ALPHA_S3TC_DXT5_EXT = 35919 };
enum { GL_TEXTURE_SRGB_DECODE_EXT = 35400 };
enum { GL_DECODE_EXT = 35401 };
enum { GL_SKIP_DECODE_EXT = 35402 };
enum { GL_TIME_ELAPSED_EXT = 35007 };
enum { GL_TRANSFORM_FEEDBACK_BUFFER_EXT = 35982 };
enum { GL_TRANSFORM_FEEDBACK_BUFFER_START_EXT = 35972 };
enum { GL_TRANSFORM_FEEDBACK_BUFFER_SIZE_EXT = 35973 };
enum { GL_TRANSFORM_FEEDBACK_BUFFER_BINDING_EXT = 35983 };
enum { GL_INTERLEAVED_ATTRIBS_EXT = 35980 };
enum { GL_SEPARATE_ATTRIBS_EXT = 35981 };
enum { GL_PRIMITIVES_GENERATED_EXT = 35975 };
enum { GL_TRANSFORM_FEEDBACK_PRIMITIVES_WRITTEN_EXT = 35976 };
enum { GL_RASTERIZER_DISCARD_EXT = 35977 };
enum { GL_MAX_TRANSFORM_FEEDBACK_INTERLEAVED_COMPONENTS_EXT = 35978 };
enum { GL_MAX_TRANSFORM_FEEDBACK_SEPARATE_ATTRIBS_EXT = 35979 };
enum { GL_MAX_TRANSFORM_FEEDBACK_SEPARATE_COMPONENTS_EXT = 35968 };
enum { GL_TRANSFORM_FEEDBACK_VARYINGS_EXT = 35971 };
enum { GL_TRANSFORM_FEEDBACK_BUFFER_MODE_EXT = 35967 };
enum { GL_TRANSFORM_FEEDBACK_VARYING_MAX_LENGTH_EXT = 35958 };
enum { GL_AUX_DEPTH_STENCIL_APPLE = 35348 };
enum { GL_UNPACK_CLIENT_STORAGE_APPLE = 34226 };
enum { GL_ELEMENT_ARRAY_APPLE = 35340 };
enum { GL_ELEMENT_ARRAY_TYPE_APPLE = 35341 };
enum { GL_ELEMENT_ARRAY_POINTER_APPLE = 35342 };
enum { GL_DRAW_PIXELS_APPLE = 35338 };
enum { GL_FENCE_APPLE = 35339 };
enum { GL_BUFFER_OBJECT_APPLE = 34227 };
enum { GL_HALF_APPLE = 5131 };
enum { GL_COLOR_FLOAT_APPLE = 35343 };
enum { GL_RGBA_FLOAT32_APPLE = 34836 };
enum { GL_RGB_FLOAT32_APPLE = 34837 };
enum { GL_ALPHA_FLOAT32_APPLE = 34838 };
enum { GL_INTENSITY_FLOAT32_APPLE = 34839 };
enum { GL_LUMINANCE_FLOAT32_APPLE = 34840 };
enum { GL_LUMINANCE_ALPHA_FLOAT32_APPLE = 34841 };
enum { GL_RGBA_FLOAT16_APPLE = 34842 };
enum { GL_RGB_FLOAT16_APPLE = 34843 };
enum { GL_ALPHA_FLOAT16_APPLE = 34844 };
enum { GL_INTENSITY_FLOAT16_APPLE = 34845 };
enum { GL_LUMINANCE_FLOAT16_APPLE = 34846 };
enum { GL_LUMINANCE_ALPHA_FLOAT16_APPLE = 34847 };
enum { GL_BUFFER_SERIALIZED_MODIFY_APPLE = 35346 };
enum { GL_BUFFER_FLUSHING_UNMAP_APPLE = 35347 };
enum { GL_RELEASED_APPLE = 35353 };
enum { GL_VOLATILE_APPLE = 35354 };
enum { GL_RETAINED_APPLE = 35355 };
enum { GL_UNDEFINED_APPLE = 35356 };
enum { GL_PURGEABLE_APPLE = 35357 };
enum { GL_MIN_PBUFFER_VIEWPORT_DIMS_APPLE = 35344 };
enum { GL_RGB_422_APPLE = 35359 };
enum { GL_PACK_ROW_BYTES_APPLE = 35349 };
enum { GL_UNPACK_ROW_BYTES_APPLE = 35350 };
enum { GL_PACK_IMAGE_BYTES_APPLE = 35351 };
enum { GL_UNPACK_IMAGE_BYTES_APPLE = 35352 };
enum { GL_LIGHT_MODEL_SPECULAR_VECTOR_APPLE = 34224 };
enum { GL_TEXTURE_RANGE_LENGTH_APPLE = 34231 };
enum { GL_TEXTURE_RANGE_POINTER_APPLE = 34232 };
enum { GL_TEXTURE_STORAGE_HINT_APPLE = 34236 };
enum { GL_TEXTURE_MINIMIZE_STORAGE_APPLE = 34230 };
enum { GL_STORAGE_PRIVATE_APPLE = 34237 };
enum { GL_STORAGE_CACHED_APPLE = 34238 };
enum { GL_STORAGE_SHARED_APPLE = 34239 };
enum { GL_TRANSFORM_HINT_APPLE = 34225 };
enum { GL_VERTEX_ARRAY_BINDING_APPLE = 34229 };
enum { GL_VERTEX_ARRAY_RANGE_APPLE = 34077 };
enum { GL_VERTEX_ARRAY_RANGE_LENGTH_APPLE = 34078 };
enum { GL_MAX_VERTEX_ARRAY_RANGE_ELEMENT_APPLE = 34080 };
enum { GL_VERTEX_ARRAY_RANGE_POINTER_APPLE = 34081 };
enum { GL_VERTEX_ARRAY_STORAGE_HINT_APPLE = 34079 };
enum { GL_STORAGE_CLIENT_APPLE = 34228 };
/* redefining matching value: #define GL_STORAGE_PRIVATE_APPLE                             0x85BD */
/* redefining matching value: #define GL_STORAGE_CACHED_APPLE                              0x85BE */
/* redefining matching value: #define GL_STORAGE_SHARED_APPLE                              0x85BF */
enum { GL_VERTEX_POINT_SIZE_APPLE = 35366 };
enum { GL_CURRENT_POINT_SIZE_APPLE = 35367 };
enum { GL_POINT_SIZE_ARRAY_APPLE = 35740 };
enum { GL_POINT_SIZE_ARRAY_TYPE_APPLE = 35210 };
enum { GL_POINT_SIZE_ARRAY_STRIDE_APPLE = 35211 };
enum { GL_POINT_SIZE_ARRAY_POINTER_APPLE = 35212 };
enum { GL_POINT_SIZE_ARRAY_BUFFER_BINDING_APPLE = 35743 };
enum { GL_VERTEX_ATTRIB_MAP1_APPLE = 35328 };
enum { GL_VERTEX_ATTRIB_MAP2_APPLE = 35329 };
enum { GL_VERTEX_ATTRIB_MAP1_SIZE_APPLE = 35330 };
enum { GL_VERTEX_ATTRIB_MAP1_COEFF_APPLE = 35331 };
enum { GL_VERTEX_ATTRIB_MAP1_ORDER_APPLE = 35332 };
enum { GL_VERTEX_ATTRIB_MAP1_DOMAIN_APPLE = 35333 };
enum { GL_VERTEX_ATTRIB_MAP2_SIZE_APPLE = 35334 };
enum { GL_VERTEX_ATTRIB_MAP2_COEFF_APPLE = 35335 };
enum { GL_VERTEX_ATTRIB_MAP2_ORDER_APPLE = 35336 };
enum { GL_VERTEX_ATTRIB_MAP2_DOMAIN_APPLE = 35337 };
enum { GL_YCBCR_422_APPLE = 34233 };
enum { GL_UNSIGNED_SHORT_8_8_APPLE = 34234 };
enum { GL_UNSIGNED_SHORT_8_8_REV_APPLE = 34235 };
enum { GL_ALPHA_BLEND_EQUATION_ATI = 34877 };
enum { GL_MIN_WEIGHTED_ATI = 34685 };
enum { GL_MAX_WEIGHTED_ATI = 34686 };
enum { GL_STENCIL_BACK_FUNC_ATI = 34816 };
enum { GL_STENCIL_BACK_FAIL_ATI = 34817 };
enum { GL_STENCIL_BACK_PASS_DEPTH_FAIL_ATI = 34818 };
enum { GL_STENCIL_BACK_PASS_DEPTH_PASS_ATI = 34819 };
enum { GL_COMPRESSED_LUMINANCE_ALPHA_3DC_ATI = 34871 };
enum { GL_MODULATE_ADD_ATI = 34628 };
enum { GL_MODULATE_SIGNED_ADD_ATI = 34629 };
enum { GL_MODULATE_SUBTRACT_ATI = 34630 };
enum { GL_RGBA_FLOAT32_ATI = 34836 };
enum { GL_RGB_FLOAT32_ATI = 34837 };
enum { GL_ALPHA_FLOAT32_ATI = 34838 };
enum { GL_INTENSITY_FLOAT32_ATI = 34839 };
enum { GL_LUMINANCE_FLOAT32_ATI = 34840 };
enum { GL_LUMINANCE_ALPHA_FLOAT32_ATI = 34841 };
enum { GL_RGBA_FLOAT16_ATI = 34842 };
enum { GL_RGB_FLOAT16_ATI = 34843 };
enum { GL_ALPHA_FLOAT16_ATI = 34844 };
enum { GL_INTENSITY_FLOAT16_ATI = 34845 };
enum { GL_LUMINANCE_FLOAT16_ATI = 34846 };
enum { GL_LUMINANCE_ALPHA_FLOAT16_ATI = 34847 };
enum { GL_MIRROR_CLAMP_ATI = 34626 };
enum { GL_MIRROR_CLAMP_TO_EDGE_ATI = 34627 };
enum { GL_RASTER_POSITION_UNCLIPPED_IBM = 103010 };
enum { GL_QUERY_WAIT_NV = 36371 };
enum { GL_QUERY_NO_WAIT_NV = 36372 };
enum { GL_QUERY_BY_REGION_WAIT_NV = 36373 };
enum { GL_QUERY_BY_REGION_NO_WAIT_NV = 36374 };
enum { GL_DEPTH_CLAMP_NV = 34383 };
enum { GL_FOG_DISTANCE_MODE_NV = 34138 };
enum { GL_EYE_RADIAL_NV = 34139 };
enum { GL_EYE_PLANE_ABSOLUTE_NV = 34140 };
enum { GL_MAX_PROGRAM_IF_DEPTH_NV = 35062 };
enum { GL_MAX_PROGRAM_LOOP_DEPTH_NV = 35063 };
enum { GL_MAX_PROGRAM_LOOP_COUNT_NV = 35064 };
enum { GL_MAX_PROGRAM_EXEC_INSTRUCTIONS_NV = 35060 };
enum { GL_MAX_PROGRAM_CALL_DEPTH_NV = 35061 };
enum { GL_MAX_SHININESS_NV = 34052 };
enum { GL_MAX_SPOT_EXPONENT_NV = 34053 };
enum { GL_MULTISAMPLE_FILTER_HINT_NV = 34100 };
enum { GL_POINT_SPRITE_NV = 34913 };
enum { GL_COORD_REPLACE_NV = 34914 };
enum { GL_POINT_SPRITE_R_MODE_NV = 34915 };
enum { GL_NORMAL_MAP_NV = 34065 };
enum { GL_REFLECTION_MAP_NV = 34066 };
enum { GL_COLOR_MATRIX_SGI = 32945 };
enum { GL_COLOR_MATRIX_STACK_DEPTH_SGI = 32946 };
enum { GL_MAX_COLOR_MATRIX_STACK_DEPTH_SGI = 32947 };
enum { GL_POST_COLOR_MATRIX_RED_SCALE_SGI = 32948 };
enum { GL_POST_COLOR_MATRIX_GREEN_SCALE_SGI = 32949 };
enum { GL_POST_COLOR_MATRIX_BLUE_SCALE_SGI = 32950 };
enum { GL_POST_COLOR_MATRIX_ALPHA_SCALE_SGI = 32951 };
enum { GL_POST_COLOR_MATRIX_RED_BIAS_SGI = 32952 };
enum { GL_POST_COLOR_MATRIX_GREEN_BIAS_SGI = 32953 };
enum { GL_POST_COLOR_MATRIX_BLUE_BIAS_SGI = 32954 };
enum { GL_POST_COLOR_MATRIX_ALPHA_BIAS_SGI = 32955 };
enum { GL_GENERATE_MIPMAP_SGIS = 33169 };
enum { GL_GENERATE_MIPMAP_HINT_SGIS = 33170 };
enum { GL_CLAMP_TO_EDGE_SGIS = 33071 };
enum { GL_TEXTURE_MIN_LOD_SGIS = 33082 };
enum { GL_TEXTURE_MAX_LOD_SGIS = 33083 };
enum { GL_TEXTURE_BASE_LEVEL_SGIS = 33084 };
enum { GL_TEXTURE_MAX_LEVEL_SGIS = 33085 };
extern void glClampColorARB(GLenum target, GLenum clamp);
extern void glDrawBuffersARB(GLsizei n, const GLenum *bufs);
extern void glDrawElementsBaseVertex(GLenum mode, GLsizei count, GLenum type, const GLvoid *indices, GLint base_vertex);
extern void glDrawRangeElementsBaseVertex(GLenum mode, GLuint start, GLuint end, GLsizei count, GLenum type, const GLvoid *indices, GLint base_vertex);
extern void glDrawElementsInstancedBaseVertex(GLenum mode, GLsizei count, GLenum type, const GLvoid *indices, GLsizei primcount, GLint base_vertex);
extern void glMultiDrawElementsBaseVertex(GLenum mode, const GLsizei *count, GLenum type, const GLvoid* const *indices, GLsizei primcount, const GLint *base_vertex);
extern void glDrawArraysInstancedARB(GLenum mode, GLint first, GLsizei count, GLsizei primcount);
extern void glDrawElementsInstancedARB(GLenum mode, GLsizei count, GLenum type, const GLvoid *indices, GLsizei primcount);
extern GLboolean glIsRenderbuffer(GLuint renderbuffer);
extern void glBindRenderbuffer(GLenum target, GLuint renderbuffer);
extern void glDeleteRenderbuffers(GLsizei n, const GLuint *renderbuffers);
extern void glGenRenderbuffers(GLsizei n, GLuint *renderbuffers);
extern void glRenderbufferStorage(GLenum target, GLenum internalformat, GLsizei width, GLsizei height);
extern void glGetRenderbufferParameteriv(GLenum target, GLenum pname, GLint *params);
extern GLboolean glIsFramebuffer(GLuint framebuffer);
extern void glBindFramebuffer(GLenum target, GLuint framebuffer);
extern void glDeleteFramebuffers(GLsizei n, const GLuint *framebuffers);
extern void glGenFramebuffers(GLsizei n, GLuint *framebuffers);
extern GLenum glCheckFramebufferStatus(GLenum target);
extern void glFramebufferTexture1D(GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level);
extern void glFramebufferTexture2D(GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level);
extern void glFramebufferTexture3D(GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level, GLint zoffset);
extern void glFramebufferRenderbuffer(GLenum target, GLenum attachment, GLenum renderbuffertarget, GLuint renderbuffer);
extern void glGetFramebufferAttachmentParameteriv(GLenum target, GLenum attachment, GLenum pname, GLint *params);
extern void glGenerateMipmap(GLenum target);
extern void glBlitFramebuffer(GLint srcX0, GLint srcY0, GLint srcX1, GLint srcY1, GLint dstX0, GLint dstY0, GLint dstX1, GLint dstY1, GLbitfield mask, GLenum filter);
extern void glRenderbufferStorageMultisample(GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height);
extern void glFramebufferTextureLayer(GLenum target, GLenum attachment, GLuint texture, GLint level, GLint layer);
extern void glVertexAttribDivisorARB(GLuint index, GLuint divisor);
extern void glSampleCoverageARB(GLclampf value, GLboolean invert);
extern void glActiveTextureARB(GLenum texture);
extern void glClientActiveTextureARB(GLenum texture);
extern void glMultiTexCoord1dARB(GLenum target, GLdouble s);
extern void glMultiTexCoord1dvARB(GLenum target, const GLdouble *v);
extern void glMultiTexCoord1fARB(GLenum target, GLfloat s);
extern void glMultiTexCoord1fvARB(GLenum target, const GLfloat *v);
extern void glMultiTexCoord1iARB(GLenum target, GLint s);
extern void glMultiTexCoord1ivARB(GLenum target, const GLint *v);
extern void glMultiTexCoord1sARB(GLenum target, GLshort s);
extern void glMultiTexCoord1svARB(GLenum target, const GLshort *v);
extern void glMultiTexCoord2dARB(GLenum target, GLdouble s, GLdouble t);
extern void glMultiTexCoord2dvARB(GLenum target, const GLdouble *v);
extern void glMultiTexCoord2fARB(GLenum target, GLfloat s, GLfloat t);
extern void glMultiTexCoord2fvARB(GLenum target, const GLfloat *v);
extern void glMultiTexCoord2iARB(GLenum target, GLint s, GLint t);
extern void glMultiTexCoord2ivARB(GLenum target, const GLint *v);
extern void glMultiTexCoord2sARB(GLenum target, GLshort s, GLshort t);
extern void glMultiTexCoord2svARB(GLenum target, const GLshort *v);
extern void glMultiTexCoord3dARB(GLenum target, GLdouble s, GLdouble t, GLdouble r);
extern void glMultiTexCoord3dvARB(GLenum target, const GLdouble *v);
extern void glMultiTexCoord3fARB(GLenum target, GLfloat s, GLfloat t, GLfloat r);
extern void glMultiTexCoord3fvARB(GLenum target, const GLfloat *v);
extern void glMultiTexCoord3iARB(GLenum target, GLint s, GLint t, GLint r);
extern void glMultiTexCoord3ivARB(GLenum target, const GLint *v);
extern void glMultiTexCoord3sARB(GLenum target, GLshort s, GLshort t, GLshort r);
extern void glMultiTexCoord3svARB(GLenum target, const GLshort *v);
extern void glMultiTexCoord4dARB(GLenum target, GLdouble s, GLdouble t, GLdouble r, GLdouble q);
extern void glMultiTexCoord4dvARB(GLenum target, const GLdouble *v);
extern void glMultiTexCoord4fARB(GLenum target, GLfloat s, GLfloat t, GLfloat r, GLfloat q);
extern void glMultiTexCoord4fvARB(GLenum target, const GLfloat *v);
extern void glMultiTexCoord4iARB(GLenum target, GLint s, GLint t, GLint r, GLint q);
extern void glMultiTexCoord4ivARB(GLenum target, const GLint *v);
extern void glMultiTexCoord4sARB(GLenum target, GLshort s, GLshort t, GLshort r, GLshort q);
extern void glMultiTexCoord4svARB(GLenum target, const GLshort *v);
extern void glGenQueriesARB(GLsizei n, GLuint *ids);
extern void glDeleteQueriesARB(GLsizei n, const GLuint *ids);
extern GLboolean glIsQueryARB(GLuint id);
extern void glBeginQueryARB(GLenum target, GLuint id);
extern void glEndQueryARB(GLenum target);
extern void glGetQueryivARB(GLenum target, GLenum pname, GLint *params);
extern void glGetQueryObjectivARB(GLuint id, GLenum pname, GLint *params);
extern void glGetQueryObjectuivARB(GLuint id, GLenum pname, GLuint *params);
extern void glPointParameterfARB(GLenum pname, GLfloat param);
extern void glPointParameterfvARB(GLenum pname, const GLfloat *params);
extern void glProvokingVertex(GLenum mode);
extern void glDeleteObjectARB(GLhandleARB obj);
extern GLhandleARB glGetHandleARB(GLenum pname);
extern void glDetachObjectARB(GLhandleARB containerObj, GLhandleARB attachedObj);
extern GLhandleARB glCreateShaderObjectARB(GLenum shaderType);
extern void glShaderSourceARB(GLhandleARB shaderObj, GLsizei count, const GLcharARB* const *string, const GLint *length);
extern void glCompileShaderARB(GLhandleARB shaderObj);
extern GLhandleARB glCreateProgramObjectARB(void);
extern void glAttachObjectARB(GLhandleARB containerObj, GLhandleARB obj);
extern void glLinkProgramARB(GLhandleARB programObj);
extern void glUseProgramObjectARB(GLhandleARB programObj);
extern void glValidateProgramARB(GLhandleARB programObj);
extern void glUniform1fARB(GLint location, GLfloat v0);
extern void glUniform2fARB(GLint location, GLfloat v0, GLfloat v1);
extern void glUniform3fARB(GLint location, GLfloat v0, GLfloat v1, GLfloat v2);
extern void glUniform4fARB(GLint location, GLfloat v0, GLfloat v1, GLfloat v2, GLfloat v3);
extern void glUniform1iARB(GLint location, GLint v0);
extern void glUniform2iARB(GLint location, GLint v0, GLint v1);
extern void glUniform3iARB(GLint location, GLint v0, GLint v1, GLint v2);
extern void glUniform4iARB(GLint location, GLint v0, GLint v1, GLint v2, GLint v3);
extern void glUniform1fvARB(GLint location, GLsizei count, const GLfloat *value);
extern void glUniform2fvARB(GLint location, GLsizei count, const GLfloat *value);
extern void glUniform3fvARB(GLint location, GLsizei count, const GLfloat *value);
extern void glUniform4fvARB(GLint location, GLsizei count, const GLfloat *value);
extern void glUniform1ivARB(GLint location, GLsizei count, const GLint *value);
extern void glUniform2ivARB(GLint location, GLsizei count, const GLint *value);
extern void glUniform3ivARB(GLint location, GLsizei count, const GLint *value);
extern void glUniform4ivARB(GLint location, GLsizei count, const GLint *value);
extern void glUniformMatrix2fvARB(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
extern void glUniformMatrix3fvARB(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
extern void glUniformMatrix4fvARB(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
extern void glGetObjectParameterfvARB(GLhandleARB obj, GLenum pname, GLfloat *params);
extern void glGetObjectParameterivARB(GLhandleARB obj, GLenum pname, GLint *params);
extern void glGetInfoLogARB(GLhandleARB obj, GLsizei maxLength, GLsizei *length, GLcharARB *infoLog);
extern void glGetAttachedObjectsARB(GLhandleARB containerObj, GLsizei maxCount, GLsizei *count, GLhandleARB *obj);
extern GLint glGetUniformLocationARB(GLhandleARB programObj, const GLcharARB *name);
extern void glGetActiveUniformARB(GLhandleARB programObj, GLuint index, GLsizei maxLength, GLsizei *length, GLint *size, GLenum *type, GLcharARB *name);
extern void glGetUniformfvARB(GLhandleARB programObj, GLint location, GLfloat *params);
extern void glGetUniformivARB(GLhandleARB programObj, GLint location, GLint *params);
extern void glGetShaderSourceARB(GLhandleARB obj, GLsizei maxLength, GLsizei *length, GLcharARB *source);
extern GLsync glFenceSync(GLenum condition, GLbitfield flags);
extern GLboolean glIsSync(GLsync sync);
extern void glDeleteSync(GLsync sync);
extern GLenum glClientWaitSync(GLsync sync, GLbitfield flags, GLuint64 timeout);
extern void glWaitSync(GLsync sync, GLbitfield flags, GLuint64 timeout);
extern void glGetInteger64v(GLenum pname, GLint64 *params);
extern void glGetSynciv(GLsync sync, GLenum pname, GLsizei bufSize, GLsizei *length, GLint *values);
extern void glCompressedTexImage3DARB(GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLsizei imageSize, const GLvoid *data);
extern void glCompressedTexImage2DARB(GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLint border, GLsizei imageSize, const GLvoid *data);
extern void glCompressedTexImage1DARB(GLenum target, GLint level, GLenum internalformat, GLsizei width, GLint border, GLsizei imageSize, const GLvoid *data);
extern void glCompressedTexSubImage3DARB(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLsizei imageSize, const GLvoid *data);
extern void glCompressedTexSubImage2DARB(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLsizei imageSize, const GLvoid *data);
extern void glCompressedTexSubImage1DARB(GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLsizei imageSize, const GLvoid *data);
extern void glGetCompressedTexImageARB(GLenum target, GLint level, GLvoid *data);
extern void glLoadTransposeMatrixfARB(const GLfloat *m);
extern void glLoadTransposeMatrixdARB(const GLdouble *m);
extern void glMultTransposeMatrixfARB(const GLfloat *m);
extern void glMultTransposeMatrixdARB(const GLdouble *m);
extern void glWeightbvARB(GLint size, const GLbyte *weights);
extern void glWeightsvARB(GLint size, const GLshort *weights);
extern void glWeightivARB(GLint size, const GLint *weights);
extern void glWeightfvARB(GLint size, const GLfloat *weights);
extern void glWeightdvARB(GLint size, const GLdouble *weights);
extern void glWeightubvARB(GLint size, const GLubyte *weights);
extern void glWeightusvARB(GLint size, const GLushort *weights);
extern void glWeightuivARB(GLint size, const GLuint *weights);
extern void glWeightPointerARB(GLint size, GLenum type, GLsizei stride, const GLvoid *pointer);
extern void glVertexBlendARB(GLint count);
extern void glBindBufferARB(GLenum target, GLuint buffer);
extern void glDeleteBuffersARB(GLsizei n, const GLuint *buffers);
extern void glGenBuffersARB(GLsizei n, GLuint *buffers);
extern GLboolean glIsBufferARB(GLuint buffer);
extern void glBufferDataARB(GLenum target, GLsizeiptrARB size, const GLvoid *data, GLenum usage);
extern void glBufferSubDataARB(GLenum target, GLintptrARB offset, GLsizeiptrARB size, const GLvoid *data);
extern void glGetBufferSubDataARB(GLenum target, GLintptrARB offset, GLsizeiptrARB size, GLvoid *data);
extern GLvoid *glMapBufferARB(GLenum target, GLenum access);
extern GLboolean glUnmapBufferARB(GLenum target);
extern void glGetBufferParameterivARB(GLenum target, GLenum pname, GLint *params);
extern void glGetBufferPointervARB(GLenum target, GLenum pname, GLvoid **params);
extern void glBindProgramARB(GLenum target, GLuint program);
extern void glDeleteProgramsARB(GLsizei n, const GLuint *programs);
extern void glGenProgramsARB(GLsizei n, GLuint *programs);
extern GLboolean glIsProgramARB(GLuint program);
extern void glProgramEnvParameter4dARB(GLenum target, GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w);
extern void glProgramEnvParameter4dvARB(GLenum target, GLuint index, const GLdouble *params);
extern void glProgramEnvParameter4fARB(GLenum target, GLuint index, GLfloat x, GLfloat y, GLfloat z, GLfloat w);
extern void glProgramEnvParameter4fvARB(GLenum target, GLuint index, const GLfloat *params);
extern void glProgramLocalParameter4dARB(GLenum target, GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w);
extern void glProgramLocalParameter4dvARB(GLenum target, GLuint index, const GLdouble *params);
extern void glProgramLocalParameter4fARB(GLenum target, GLuint index, GLfloat x, GLfloat y, GLfloat z, GLfloat w);
extern void glProgramLocalParameter4fvARB(GLenum target, GLuint index, const GLfloat *params);
extern void glGetProgramEnvParameterdvARB(GLenum target, GLuint index, GLdouble *params);
extern void glGetProgramEnvParameterfvARB(GLenum target, GLuint index, GLfloat *params);
extern void glProgramEnvParameters4fvEXT(GLenum target, GLuint index, GLsizei count, const GLfloat *params);
extern void glProgramLocalParameters4fvEXT(GLenum target, GLuint index, GLsizei count, const GLfloat *params);
extern void glGetProgramLocalParameterdvARB(GLenum target, GLuint index, GLdouble *params);
extern void glGetProgramLocalParameterfvARB(GLenum target, GLuint index, GLfloat *params);
extern void glProgramStringARB(GLenum target, GLenum format, GLsizei len, const GLvoid *string);
extern void glGetProgramStringARB(GLenum target, GLenum pname, GLvoid *string);
extern void glGetProgramivARB(GLenum target, GLenum pname, GLint *params);
extern void glBindAttribLocationARB(GLhandleARB programObj, GLuint index, const GLcharARB *name);
extern void glGetActiveAttribARB(GLhandleARB programObj, GLuint index, GLsizei maxLength, GLsizei *length, GLint *size, GLenum *type, GLcharARB *name);
extern GLint glGetAttribLocationARB(GLhandleARB programObj, const GLcharARB *name);
extern void glVertexAttrib1dARB(GLuint index, GLdouble x);
extern void glVertexAttrib1dvARB(GLuint index, const GLdouble *v);
extern void glVertexAttrib1fARB(GLuint index, GLfloat x);
extern void glVertexAttrib1fvARB(GLuint index, const GLfloat *v);
extern void glVertexAttrib1sARB(GLuint index, GLshort x);
extern void glVertexAttrib1svARB(GLuint index, const GLshort *v);
extern void glVertexAttrib2dARB(GLuint index, GLdouble x, GLdouble y);
extern void glVertexAttrib2dvARB(GLuint index, const GLdouble *v);
extern void glVertexAttrib2fARB(GLuint index, GLfloat x, GLfloat y);
extern void glVertexAttrib2fvARB(GLuint index, const GLfloat *v);
extern void glVertexAttrib2sARB(GLuint index, GLshort x, GLshort y);
extern void glVertexAttrib2svARB(GLuint index, const GLshort *v);
extern void glVertexAttrib3dARB(GLuint index, GLdouble x, GLdouble y, GLdouble z);
extern void glVertexAttrib3dvARB(GLuint index, const GLdouble *v);
extern void glVertexAttrib3fARB(GLuint index, GLfloat x, GLfloat y, GLfloat z);
extern void glVertexAttrib3fvARB(GLuint index, const GLfloat *v);
extern void glVertexAttrib3sARB(GLuint index, GLshort x, GLshort y, GLshort z);
extern void glVertexAttrib3svARB(GLuint index, const GLshort *v);
extern void glVertexAttrib4NbvARB(GLuint index, const GLbyte *v);
extern void glVertexAttrib4NivARB(GLuint index, const GLint *v);
extern void glVertexAttrib4NsvARB(GLuint index, const GLshort *v);
extern void glVertexAttrib4NubARB(GLuint index, GLubyte x, GLubyte y, GLubyte z, GLubyte w);
extern void glVertexAttrib4NubvARB(GLuint index, const GLubyte *v);
extern void glVertexAttrib4NuivARB(GLuint index, const GLuint *v);
extern void glVertexAttrib4NusvARB(GLuint index, const GLushort *v);
extern void glVertexAttrib4bvARB(GLuint index, const GLbyte *v);
extern void glVertexAttrib4dARB(GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w);
extern void glVertexAttrib4dvARB(GLuint index, const GLdouble *v);
extern void glVertexAttrib4fARB(GLuint index, GLfloat x, GLfloat y, GLfloat z, GLfloat w);
extern void glVertexAttrib4fvARB(GLuint index, const GLfloat *v);
extern void glVertexAttrib4ivARB(GLuint index, const GLint *v);
extern void glVertexAttrib4sARB(GLuint index, GLshort x, GLshort y, GLshort z, GLshort w);
extern void glVertexAttrib4svARB(GLuint index, const GLshort *v);
extern void glVertexAttrib4ubvARB(GLuint index, const GLubyte *v);
extern void glVertexAttrib4uivARB(GLuint index, const GLuint *v);
extern void glVertexAttrib4usvARB(GLuint index, const GLushort *v);
extern void glVertexAttribPointerARB(GLuint index, GLint size, GLenum type, GLboolean normalized, GLsizei stride, const GLvoid *pointer);
extern void glDisableVertexAttribArrayARB(GLuint index);
extern void glEnableVertexAttribArrayARB(GLuint index);
extern void glGetVertexAttribPointervARB(GLuint index, GLenum pname, GLvoid **pointer);
extern void glGetVertexAttribdvARB(GLuint index, GLenum pname, GLdouble *params);
extern void glGetVertexAttribfvARB(GLuint index, GLenum pname, GLfloat *params);
extern void glGetVertexAttribivARB(GLuint index, GLenum pname, GLint *params);
extern void glWindowPos2dARB(GLdouble x, GLdouble y);
extern void glWindowPos2dvARB(const GLdouble *p);
extern void glWindowPos2fARB(GLfloat x, GLfloat y);
extern void glWindowPos2fvARB(const GLfloat *p);
extern void glWindowPos2iARB(GLint x, GLint y);
extern void glWindowPos2ivARB(const GLint *p);
extern void glWindowPos2sARB(GLshort x, GLshort y);
extern void glWindowPos2svARB(const GLshort *p);
extern void glWindowPos3dARB(GLdouble x, GLdouble y, GLdouble z);
extern void glWindowPos3dvARB(const GLdouble *p);
extern void glWindowPos3fARB(GLfloat x, GLfloat y, GLfloat z);
extern void glWindowPos3fvARB(const GLfloat *p);
extern void glWindowPos3iARB(GLint x, GLint y, GLint z);
extern void glWindowPos3ivARB(const GLint *p);
extern void glWindowPos3sARB(GLshort x, GLshort y, GLshort z);
extern void glWindowPos3svARB(const GLshort *p);
extern void glUniformBufferEXT(GLuint program, GLint location, GLuint buffer);
extern GLint glGetUniformBufferSizeEXT(GLuint program, GLint location);
extern GLintptr glGetUniformOffsetEXT(GLuint program, GLint location);
extern void glBlendColorEXT(GLclampf red, GLclampf green, GLclampf blue, GLclampf alpha);
extern void glBlendEquationSeparateEXT(GLenum modeRGB, GLenum modeAlpha);
extern void glBlendFuncSeparateEXT(GLenum sfactorRGB, GLenum dfactorRGB, GLenum sfactorAlpha, GLenum dfactorAlpha);
extern void glBlendEquationEXT(GLenum mode);
extern void glLabelObjectEXT(GLenum type, GLuint object, GLsizei length, const GLchar *label);
extern void glGetObjectLabelEXT(GLenum type, GLuint object, GLsizei bufSize, GLsizei *length, GLchar *label);
extern void glInsertEventMarkerEXT(GLsizei length, const char *marker);
extern void glPushGroupMarkerEXT(GLsizei length, const char *marker);
extern void glPopGroupMarkerEXT(void);
extern void glDepthBoundsEXT(GLclampd zmin, GLclampd zmax);
extern void glColorMaskIndexedEXT(GLuint index, GLboolean r, GLboolean g, GLboolean b, GLboolean a);
extern void glEnableIndexedEXT(GLenum target, GLuint index);
extern void glDisableIndexedEXT(GLenum target, GLuint index);
extern GLboolean glIsEnabledIndexedEXT(GLenum target, GLuint index);
extern void glDrawRangeElementsEXT(GLenum mode, GLuint start, GLuint end, GLsizei count, GLenum type, const GLvoid *indices);
extern void glFogCoordfEXT(GLfloat coord);
extern void glFogCoordfvEXT(const GLfloat *coord);
extern void glFogCoorddEXT(GLdouble coord);
extern void glFogCoorddvEXT(const GLdouble *coord);
extern void glFogCoordPointerEXT(GLenum type, GLsizei stride, const GLvoid *pointer);
extern void glBlitFramebufferEXT(GLint srcX0, GLint srcY0, GLint srcX1, GLint srcY1, GLint dstX0, GLint dstY0, GLint dstX1, GLint dstY1, GLbitfield mask, GLenum filter);
extern void glRenderbufferStorageMultisampleEXT(GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height);
extern GLboolean glIsRenderbufferEXT(GLuint renderbuffer);
extern void glBindRenderbufferEXT(GLenum target, GLuint renderbuffer);
extern void glDeleteRenderbuffersEXT(GLsizei n, const GLuint *renderbuffers);
extern void glGenRenderbuffersEXT(GLsizei n, GLuint *renderbuffers);
extern void glRenderbufferStorageEXT(GLenum target, GLenum internalformat, GLsizei width, GLsizei height);
extern void glGetRenderbufferParameterivEXT(GLenum target, GLenum pname, GLint *params);
extern GLboolean glIsFramebufferEXT(GLuint framebuffer);
extern void glBindFramebufferEXT(GLenum target, GLuint framebuffer);
extern void glDeleteFramebuffersEXT(GLsizei n, const GLuint *framebuffers);
extern void glGenFramebuffersEXT(GLsizei n, GLuint *framebuffers);
extern GLenum glCheckFramebufferStatusEXT(GLenum target);
extern void glFramebufferTexture1DEXT(GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level);
extern void glFramebufferTexture2DEXT(GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level);
extern void glFramebufferTexture3DEXT(GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level, GLint zoffset);
extern void glFramebufferRenderbufferEXT(GLenum target, GLenum attachment, GLenum renderbuffertarget, GLuint renderbuffer);
extern void glGetFramebufferAttachmentParameterivEXT(GLenum target, GLenum attachment, GLenum pname, GLint *params);
extern void glGenerateMipmapEXT(GLenum target);
extern void glProgramParameteriEXT(GLuint program, GLenum pname, GLint value);
extern void glFramebufferTextureEXT(GLenum target, GLenum attachment, GLuint texture, GLint level);
extern void glFramebufferTextureFaceEXT(GLenum target, GLenum attachment, GLuint texture, GLint level, GLenum face);
extern void glFramebufferTextureLayerEXT(GLenum target, GLenum attachment, GLuint texture, GLint level, GLint layer);
extern void glVertexAttribI1iEXT(GLuint index, GLint x);
extern void glVertexAttribI2iEXT(GLuint index, GLint x, GLint y);
extern void glVertexAttribI3iEXT(GLuint index, GLint x, GLint y, GLint z);
extern void glVertexAttribI4iEXT(GLuint index, GLint x, GLint y, GLint z, GLint w);
extern void glVertexAttribI1uiEXT(GLuint index, GLuint x);
extern void glVertexAttribI2uiEXT(GLuint index, GLuint x, GLuint y);
extern void glVertexAttribI3uiEXT(GLuint index, GLuint x, GLuint y, GLuint z);
extern void glVertexAttribI4uiEXT(GLuint index, GLuint x, GLuint y, GLuint z, GLuint w);
extern void glVertexAttribI1ivEXT(GLuint index, const GLint *v);
extern void glVertexAttribI2ivEXT(GLuint index, const GLint *v);
extern void glVertexAttribI3ivEXT(GLuint index, const GLint *v);
extern void glVertexAttribI4ivEXT(GLuint index, const GLint *v);
extern void glVertexAttribI1uivEXT(GLuint index, const GLuint *v);
extern void glVertexAttribI2uivEXT(GLuint index, const GLuint *v);
extern void glVertexAttribI3uivEXT(GLuint index, const GLuint *v);
extern void glVertexAttribI4uivEXT(GLuint index, const GLuint *v);
extern void glVertexAttribI4bvEXT(GLuint index, const GLbyte *v);
extern void glVertexAttribI4svEXT(GLuint index, const GLshort *v);
extern void glVertexAttribI4ubvEXT(GLuint index, const GLubyte *v);
extern void glVertexAttribI4usvEXT(GLuint index, const GLushort *v);
extern void glVertexAttribIPointerEXT(GLuint index, GLint size, GLenum type, GLsizei stride, const GLvoid *pointer);
extern void glGetVertexAttribIivEXT(GLuint index, GLenum pname, GLint *params);
extern void glGetVertexAttribIuivEXT(GLuint index, GLenum pname, GLuint *params);
extern void glUniform1uiEXT(GLint location, GLuint v0);
extern void glUniform2uiEXT(GLint location, GLuint v0, GLuint v1);
extern void glUniform3uiEXT(GLint location, GLuint v0, GLuint v1, GLuint v2);
extern void glUniform4uiEXT(GLint location, GLuint v0, GLuint v1, GLuint v2, GLuint v3);
extern void glUniform1uivEXT(GLint location, GLsizei count, const GLuint *value);
extern void glUniform2uivEXT(GLint location, GLsizei count, const GLuint *value);
extern void glUniform3uivEXT(GLint location, GLsizei count, const GLuint *value);
extern void glUniform4uivEXT(GLint location, GLsizei count, const GLuint *value);
extern void glGetUniformuivEXT(GLuint program, GLint location, GLuint *params);
extern void glBindFragDataLocationEXT(GLuint program, GLuint colorNumber, const GLchar *name);
extern GLint glGetFragDataLocationEXT(GLuint program, const GLchar *name);
extern void glMultiDrawArraysEXT(GLenum mode, const GLint *first, const GLsizei *count, GLsizei primcount);
extern void glMultiDrawElementsEXT(GLenum mode, const GLsizei *count, GLenum type, const GLvoid* const *indices, GLsizei primcount);
extern void glProvokingVertexEXT(GLenum mode);
extern void glSecondaryColor3bEXT(GLbyte red, GLbyte green, GLbyte blue);
extern void glSecondaryColor3bvEXT(const GLbyte *v);
extern void glSecondaryColor3dEXT(GLdouble red, GLdouble green, GLdouble blue);
extern void glSecondaryColor3dvEXT(const GLdouble *v);
extern void glSecondaryColor3fEXT(GLfloat red, GLfloat green, GLfloat blue);
extern void glSecondaryColor3fvEXT(const GLfloat *v);
extern void glSecondaryColor3iEXT(GLint red, GLint green, GLint blue);
extern void glSecondaryColor3ivEXT(const GLint *v);
extern void glSecondaryColor3sEXT(GLshort red, GLshort green, GLshort blue);
extern void glSecondaryColor3svEXT(const GLshort *v);
extern void glSecondaryColor3ubEXT(GLubyte red, GLubyte green, GLubyte blue);
extern void glSecondaryColor3ubvEXT(const GLubyte *v);
extern void glSecondaryColor3uiEXT(GLuint red, GLuint green, GLuint blue);
extern void glSecondaryColor3uivEXT(const GLuint *v);
extern void glSecondaryColor3usEXT(GLushort red, GLushort green, GLushort blue);
extern void glSecondaryColor3usvEXT(const GLushort *v);
extern void glSecondaryColorPointerEXT(GLint size, GLenum type, GLsizei stride, const GLvoid *pointer);
extern void glActiveStencilFaceEXT(GLenum face);
extern void glClearColorIiEXT( GLint r, GLint g, GLint b, GLint a );
extern void glClearColorIuiEXT( GLuint r, GLuint g, GLuint b, GLuint a );
extern void glTexParameterIivEXT( GLenum target, GLenum pname, GLint *params );
extern void glTexParameterIuivEXT( GLenum target, GLenum pname, GLuint *params );
extern void glGetTexParameterIivEXT( GLenum target, GLenum pname, GLint *params);
extern void glGetTexParameterIuivEXT( GLenum target, GLenum pname, GLuint *params);
extern void glGetQueryObjecti64vEXT(GLuint id, GLenum pname, GLint64EXT *params);
extern void glGetQueryObjectui64vEXT(GLuint id, GLenum pname, GLuint64EXT *params);
extern void glBindBufferRangeEXT(GLenum target, GLuint index, GLuint buffer, GLintptr offset, GLsizeiptr size);
extern void glBindBufferOffsetEXT(GLenum target, GLuint index, GLuint buffer, GLintptr offset);
extern void glBindBufferBaseEXT(GLenum target, GLuint index, GLuint buffer);
extern void glBeginTransformFeedbackEXT(GLenum primitiveMode);
extern void glEndTransformFeedbackEXT(void);
extern void glTransformFeedbackVaryingsEXT(GLuint program, GLsizei count, const GLchar* const *varyings, GLenum bufferMode);
extern void glGetTransformFeedbackVaryingEXT(GLuint program, GLuint index, GLsizei bufSize, GLsizei *length, GLsizei *size, GLenum *type, GLchar *name);
extern void glGetIntegerIndexedvEXT(GLenum param, GLuint index, GLint *values);
extern void glGetBooleanIndexedvEXT(GLenum param, GLuint index, GLboolean *values);
extern void glElementPointerAPPLE(GLenum type, const GLvoid *pointer);
extern void glDrawElementArrayAPPLE(GLenum mode, GLint first, GLsizei count);
extern void glDrawRangeElementArrayAPPLE(GLenum mode, GLuint start, GLuint end, GLint first, GLsizei count);
extern void glMultiDrawElementArrayAPPLE(GLenum mode, const GLint *first, const GLsizei *count, GLsizei primcount);
extern void glMultiDrawRangeElementArrayAPPLE(GLenum mode, GLuint start, GLuint end, const GLint *first, const GLsizei *count, GLsizei primcount);
extern void glGenFencesAPPLE(GLsizei n, GLuint *fences);
extern void glDeleteFencesAPPLE(GLsizei n, const GLuint *fences);
extern void glSetFenceAPPLE(GLuint fence);
extern GLboolean glIsFenceAPPLE(GLuint fence);
extern GLboolean glTestFenceAPPLE(GLuint fence);
extern void glFinishFenceAPPLE(GLuint fence);
extern GLboolean glTestObjectAPPLE(GLenum object, GLuint name);
extern void glFinishObjectAPPLE(GLenum object, GLuint name);
extern void glBufferParameteriAPPLE(GLenum target, GLenum pname, GLint param);
extern void glFlushMappedBufferRangeAPPLE(GLenum target, GLintptr offset, GLsizeiptr size);
extern void glFlushRenderAPPLE(void);
extern void glFinishRenderAPPLE(void);
extern void glSwapAPPLE(void);
extern GLenum glObjectPurgeableAPPLE(GLenum objectType, GLuint name, GLenum option);
extern GLenum glObjectUnpurgeableAPPLE(GLenum objectType, GLuint name, GLenum option);
extern void glGetObjectParameterivAPPLE(GLenum objectType, GLuint name, GLenum pname, GLint *params);
extern void glTextureRangeAPPLE(GLenum target, GLsizei length, const GLvoid *pointer);
extern void glGetTexParameterPointervAPPLE(GLenum target, GLenum pname, GLvoid **params);
extern void glBindVertexArrayAPPLE(GLuint id);
extern void glDeleteVertexArraysAPPLE(GLsizei n, const GLuint *ids);
extern void glGenVertexArraysAPPLE(GLsizei n, GLuint *ids);
extern GLboolean glIsVertexArrayAPPLE(GLuint id);
extern void glVertexArrayRangeAPPLE(GLsizei length, const GLvoid *pointer);
extern void glFlushVertexArrayRangeAPPLE(GLsizei length, const GLvoid *pointer);
extern void glVertexArrayParameteriAPPLE(GLenum pname, GLint param);
extern void glPointSizePointerAPPLE(GLenum type, GLsizei stride, const GLvoid *pointer);
extern void glVertexPointSizefAPPLE(GLfloat size);
extern void glEnableVertexAttribAPPLE(GLuint index, GLenum pname);
extern void glDisableVertexAttribAPPLE(GLuint index, GLenum pname);
extern GLboolean glIsVertexAttribEnabledAPPLE(GLuint index, GLenum pname);
extern void glMapVertexAttrib1dAPPLE(GLuint index, GLuint size, GLdouble u1, GLdouble u2, GLint stride, GLint order, const GLdouble *points);
extern void glMapVertexAttrib1fAPPLE(GLuint index, GLuint size, GLfloat u1, GLfloat u2, GLint stride, GLint order, const GLfloat *points);
extern void glMapVertexAttrib2dAPPLE(GLuint index, GLuint size, GLdouble u1, GLdouble u2, GLint ustride, GLint uorder, GLdouble v1, GLdouble v2, GLint vstride, GLint vorder, const GLdouble *points);
extern void glMapVertexAttrib2fAPPLE(GLuint index, GLuint size, GLfloat u1, GLfloat u2, GLint ustride, GLint uorder, GLfloat v1, GLfloat v2, GLint vstride, GLint vorder, const GLfloat *points);
extern void glBlendEquationSeparateATI(GLenum equationRGB, GLenum equationAlpha);
extern void glStencilOpSeparateATI(GLenum face, GLenum sfail, GLenum dpfail, GLenum dppass);
extern void glStencilFuncSeparateATI(GLenum frontfunc, GLenum backfunc, GLint ref, GLuint mask);
extern void glBeginConditionalRenderNV(GLuint id, GLenum mode);
extern void glEndConditionalRenderNV(void);
extern void glPointParameteriNV(GLenum pname, GLint param);
extern void glPointParameterivNV(GLenum pname, const GLint *params);
extern void glTextureBarrierNV (void);
/* ++ END   ./OpenGL/glext.h */
/* ++ BEGIN ./OpenGL/OpenGLAvailability.h */
/* +++ BEGIN /Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/os/availability.h */
enum { API_TO_BE_DEPRECATED = 100000 };
enum { API_TO_BE_DEPRECATED_MACOS = 100000 };
enum { API_TO_BE_DEPRECATED_IOS = 100000 };
enum { API_TO_BE_DEPRECATED_TVOS = 100000 };
enum { API_TO_BE_DEPRECATED_WATCHOS = 100000 };
enum { API_TO_BE_DEPRECATED_DRIVERKIT = 100000 };
enum { API_TO_BE_DEPRECATED_VISIONOS = 100000 };
/* ++++ BEGIN /Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/AvailabilityInternal.h */
/* +++++ BEGIN /Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/AvailabilityInternalLegacy.h */
/* +++++ END   /Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/AvailabilityInternalLegacy.h */
/* ++++ END   /Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/AvailabilityInternal.h */
/* +++ END   /Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/os/availability.h */
/* ++ END   ./OpenGL/OpenGLAvailability.h */
enum { GL_LOGIC_OP = 0 };
enum { GL_TEXTURE_COMPONENTS = 0 };
enum { GL_VERSION_1_1 = 1 };
enum { GL_VERSION_1_2 = 1 };
enum { GL_VERSION_1_3 = 1 };
enum { GL_VERSION_1_4 = 1 };
enum { GL_VERSION_1_5 = 1 };
enum { GL_VERSION_2_0 = 1 };
enum { GL_VERSION_2_1 = 1 };
enum { GL_ACCUM = 256 };
enum { GL_LOAD = 257 };
enum { GL_RETURN = 258 };
enum { GL_MULT = 259 };
enum { GL_ADD = 260 };
enum { GL_NEVER = 512 };
enum { GL_LESS = 513 };
enum { GL_EQUAL = 514 };
enum { GL_LEQUAL = 515 };
enum { GL_GREATER = 516 };
enum { GL_NOTEQUAL = 517 };
enum { GL_GEQUAL = 518 };
enum { GL_ALWAYS = 519 };
enum { GL_CURRENT_BIT = 1 };
enum { GL_POINT_BIT = 2 };
enum { GL_LINE_BIT = 4 };
enum { GL_POLYGON_BIT = 8 };
enum { GL_POLYGON_STIPPLE_BIT = 16 };
enum { GL_PIXEL_MODE_BIT = 32 };
enum { GL_LIGHTING_BIT = 64 };
enum { GL_FOG_BIT = 128 };
enum { GL_DEPTH_BUFFER_BIT = 256 };
enum { GL_ACCUM_BUFFER_BIT = 512 };
enum { GL_STENCIL_BUFFER_BIT = 1024 };
enum { GL_VIEWPORT_BIT = 2048 };
enum { GL_TRANSFORM_BIT = 4096 };
enum { GL_ENABLE_BIT = 8192 };
enum { GL_COLOR_BUFFER_BIT = 16384 };
enum { GL_HINT_BIT = 32768 };
enum { GL_EVAL_BIT = 65536 };
enum { GL_LIST_BIT = 131072 };
enum { GL_TEXTURE_BIT = 262144 };
enum { GL_SCISSOR_BIT = 524288 };
enum { GL_ALL_ATTRIB_BITS = 1048575 };
enum { GL_POINTS = 0 };
enum { GL_LINES = 1 };
enum { GL_LINE_LOOP = 2 };
enum { GL_LINE_STRIP = 3 };
enum { GL_TRIANGLES = 4 };
enum { GL_TRIANGLE_STRIP = 5 };
enum { GL_TRIANGLE_FAN = 6 };
enum { GL_QUADS = 7 };
enum { GL_QUAD_STRIP = 8 };
enum { GL_POLYGON = 9 };
enum { GL_ZERO = 0 };
enum { GL_ONE = 1 };
enum { GL_SRC_COLOR = 768 };
enum { GL_ONE_MINUS_SRC_COLOR = 769 };
enum { GL_SRC_ALPHA = 770 };
enum { GL_ONE_MINUS_SRC_ALPHA = 771 };
enum { GL_DST_ALPHA = 772 };
enum { GL_ONE_MINUS_DST_ALPHA = 773 };
enum { GL_DST_COLOR = 774 };
enum { GL_ONE_MINUS_DST_COLOR = 775 };
enum { GL_SRC_ALPHA_SATURATE = 776 };
enum { GL_TRUE = 1 };
enum { GL_FALSE = 0 };
enum { GL_CLIP_PLANE0 = 12288 };
enum { GL_CLIP_PLANE1 = 12289 };
enum { GL_CLIP_PLANE2 = 12290 };
enum { GL_CLIP_PLANE3 = 12291 };
enum { GL_CLIP_PLANE4 = 12292 };
enum { GL_CLIP_PLANE5 = 12293 };
enum { GL_BYTE = 5120 };
enum { GL_UNSIGNED_BYTE = 5121 };
enum { GL_SHORT = 5122 };
enum { GL_UNSIGNED_SHORT = 5123 };
enum { GL_INT = 5124 };
enum { GL_UNSIGNED_INT = 5125 };
enum { GL_FLOAT = 5126 };
enum { GL_2_BYTES = 5127 };
enum { GL_3_BYTES = 5128 };
enum { GL_4_BYTES = 5129 };
enum { GL_DOUBLE = 5130 };
enum { GL_NONE = 0 };
enum { GL_FRONT_LEFT = 1024 };
enum { GL_FRONT_RIGHT = 1025 };
enum { GL_BACK_LEFT = 1026 };
enum { GL_BACK_RIGHT = 1027 };
enum { GL_FRONT = 1028 };
enum { GL_BACK = 1029 };
enum { GL_LEFT = 1030 };
enum { GL_RIGHT = 1031 };
enum { GL_FRONT_AND_BACK = 1032 };
enum { GL_AUX0 = 1033 };
enum { GL_AUX1 = 1034 };
enum { GL_AUX2 = 1035 };
enum { GL_AUX3 = 1036 };
enum { GL_NO_ERROR = 0 };
enum { GL_INVALID_ENUM = 1280 };
enum { GL_INVALID_VALUE = 1281 };
enum { GL_INVALID_OPERATION = 1282 };
enum { GL_STACK_OVERFLOW = 1283 };
enum { GL_STACK_UNDERFLOW = 1284 };
enum { GL_OUT_OF_MEMORY = 1285 };
enum { GL_2D = 1536 };
enum { GL_3D = 1537 };
enum { GL_3D_COLOR = 1538 };
enum { GL_3D_COLOR_TEXTURE = 1539 };
enum { GL_4D_COLOR_TEXTURE = 1540 };
enum { GL_PASS_THROUGH_TOKEN = 1792 };
enum { GL_POINT_TOKEN = 1793 };
enum { GL_LINE_TOKEN = 1794 };
enum { GL_POLYGON_TOKEN = 1795 };
enum { GL_BITMAP_TOKEN = 1796 };
enum { GL_DRAW_PIXEL_TOKEN = 1797 };
enum { GL_COPY_PIXEL_TOKEN = 1798 };
enum { GL_LINE_RESET_TOKEN = 1799 };
enum { GL_EXP = 2048 };
enum { GL_EXP2 = 2049 };
enum { GL_CW = 2304 };
enum { GL_CCW = 2305 };
enum { GL_COEFF = 2560 };
enum { GL_ORDER = 2561 };
enum { GL_DOMAIN = 2562 };
enum { GL_CURRENT_COLOR = 2816 };
enum { GL_CURRENT_INDEX = 2817 };
enum { GL_CURRENT_NORMAL = 2818 };
enum { GL_CURRENT_TEXTURE_COORDS = 2819 };
enum { GL_CURRENT_RASTER_COLOR = 2820 };
enum { GL_CURRENT_RASTER_INDEX = 2821 };
enum { GL_CURRENT_RASTER_TEXTURE_COORDS = 2822 };
enum { GL_CURRENT_RASTER_POSITION = 2823 };
enum { GL_CURRENT_RASTER_POSITION_VALID = 2824 };
enum { GL_CURRENT_RASTER_DISTANCE = 2825 };
enum { GL_POINT_SMOOTH = 2832 };
enum { GL_POINT_SIZE = 2833 };
enum { GL_POINT_SIZE_RANGE = 2834 };
enum { GL_POINT_SIZE_GRANULARITY = 2835 };
enum { GL_LINE_SMOOTH = 2848 };
enum { GL_LINE_WIDTH = 2849 };
enum { GL_LINE_WIDTH_RANGE = 2850 };
enum { GL_LINE_WIDTH_GRANULARITY = 2851 };
enum { GL_LINE_STIPPLE = 2852 };
enum { GL_LINE_STIPPLE_PATTERN = 2853 };
enum { GL_LINE_STIPPLE_REPEAT = 2854 };
enum { GL_LIST_MODE = 2864 };
enum { GL_MAX_LIST_NESTING = 2865 };
enum { GL_LIST_BASE = 2866 };
enum { GL_LIST_INDEX = 2867 };
enum { GL_POLYGON_MODE = 2880 };
enum { GL_POLYGON_SMOOTH = 2881 };
enum { GL_POLYGON_STIPPLE = 2882 };
enum { GL_EDGE_FLAG = 2883 };
enum { GL_CULL_FACE = 2884 };
enum { GL_CULL_FACE_MODE = 2885 };
enum { GL_FRONT_FACE = 2886 };
enum { GL_LIGHTING = 2896 };
enum { GL_LIGHT_MODEL_LOCAL_VIEWER = 2897 };
enum { GL_LIGHT_MODEL_TWO_SIDE = 2898 };
enum { GL_LIGHT_MODEL_AMBIENT = 2899 };
enum { GL_SHADE_MODEL = 2900 };
enum { GL_COLOR_MATERIAL_FACE = 2901 };
enum { GL_COLOR_MATERIAL_PARAMETER = 2902 };
enum { GL_COLOR_MATERIAL = 2903 };
enum { GL_FOG = 2912 };
enum { GL_FOG_INDEX = 2913 };
enum { GL_FOG_DENSITY = 2914 };
enum { GL_FOG_START = 2915 };
enum { GL_FOG_END = 2916 };
enum { GL_FOG_MODE = 2917 };
enum { GL_FOG_COLOR = 2918 };
enum { GL_DEPTH_RANGE = 2928 };
enum { GL_DEPTH_TEST = 2929 };
enum { GL_DEPTH_WRITEMASK = 2930 };
enum { GL_DEPTH_CLEAR_VALUE = 2931 };
enum { GL_DEPTH_FUNC = 2932 };
enum { GL_ACCUM_CLEAR_VALUE = 2944 };
enum { GL_STENCIL_TEST = 2960 };
enum { GL_STENCIL_CLEAR_VALUE = 2961 };
enum { GL_STENCIL_FUNC = 2962 };
enum { GL_STENCIL_VALUE_MASK = 2963 };
enum { GL_STENCIL_FAIL = 2964 };
enum { GL_STENCIL_PASS_DEPTH_FAIL = 2965 };
enum { GL_STENCIL_PASS_DEPTH_PASS = 2966 };
enum { GL_STENCIL_REF = 2967 };
enum { GL_STENCIL_WRITEMASK = 2968 };
enum { GL_MATRIX_MODE = 2976 };
enum { GL_NORMALIZE = 2977 };
enum { GL_VIEWPORT = 2978 };
enum { GL_MODELVIEW_STACK_DEPTH = 2979 };
enum { GL_PROJECTION_STACK_DEPTH = 2980 };
enum { GL_TEXTURE_STACK_DEPTH = 2981 };
enum { GL_MODELVIEW_MATRIX = 2982 };
enum { GL_PROJECTION_MATRIX = 2983 };
enum { GL_TEXTURE_MATRIX = 2984 };
enum { GL_ATTRIB_STACK_DEPTH = 2992 };
enum { GL_CLIENT_ATTRIB_STACK_DEPTH = 2993 };
enum { GL_ALPHA_TEST = 3008 };
enum { GL_ALPHA_TEST_FUNC = 3009 };
enum { GL_ALPHA_TEST_REF = 3010 };
enum { GL_DITHER = 3024 };
enum { GL_BLEND_DST = 3040 };
enum { GL_BLEND_SRC = 3041 };
enum { GL_BLEND = 3042 };
enum { GL_LOGIC_OP_MODE = 3056 };
enum { GL_INDEX_LOGIC_OP = 3057 };
enum { GL_COLOR_LOGIC_OP = 3058 };
enum { GL_AUX_BUFFERS = 3072 };
enum { GL_DRAW_BUFFER = 3073 };
enum { GL_READ_BUFFER = 3074 };
enum { GL_SCISSOR_BOX = 3088 };
enum { GL_SCISSOR_TEST = 3089 };
enum { GL_INDEX_CLEAR_VALUE = 3104 };
enum { GL_INDEX_WRITEMASK = 3105 };
enum { GL_COLOR_CLEAR_VALUE = 3106 };
enum { GL_COLOR_WRITEMASK = 3107 };
enum { GL_INDEX_MODE = 3120 };
enum { GL_RGBA_MODE = 3121 };
enum { GL_DOUBLEBUFFER = 3122 };
enum { GL_STEREO = 3123 };
enum { GL_RENDER_MODE = 3136 };
enum { GL_PERSPECTIVE_CORRECTION_HINT = 3152 };
enum { GL_POINT_SMOOTH_HINT = 3153 };
enum { GL_LINE_SMOOTH_HINT = 3154 };
enum { GL_POLYGON_SMOOTH_HINT = 3155 };
enum { GL_FOG_HINT = 3156 };
enum { GL_TEXTURE_GEN_S = 3168 };
enum { GL_TEXTURE_GEN_T = 3169 };
enum { GL_TEXTURE_GEN_R = 3170 };
enum { GL_TEXTURE_GEN_Q = 3171 };
enum { GL_PIXEL_MAP_I_TO_I = 3184 };
enum { GL_PIXEL_MAP_S_TO_S = 3185 };
enum { GL_PIXEL_MAP_I_TO_R = 3186 };
enum { GL_PIXEL_MAP_I_TO_G = 3187 };
enum { GL_PIXEL_MAP_I_TO_B = 3188 };
enum { GL_PIXEL_MAP_I_TO_A = 3189 };
enum { GL_PIXEL_MAP_R_TO_R = 3190 };
enum { GL_PIXEL_MAP_G_TO_G = 3191 };
enum { GL_PIXEL_MAP_B_TO_B = 3192 };
enum { GL_PIXEL_MAP_A_TO_A = 3193 };
enum { GL_PIXEL_MAP_I_TO_I_SIZE = 3248 };
enum { GL_PIXEL_MAP_S_TO_S_SIZE = 3249 };
enum { GL_PIXEL_MAP_I_TO_R_SIZE = 3250 };
enum { GL_PIXEL_MAP_I_TO_G_SIZE = 3251 };
enum { GL_PIXEL_MAP_I_TO_B_SIZE = 3252 };
enum { GL_PIXEL_MAP_I_TO_A_SIZE = 3253 };
enum { GL_PIXEL_MAP_R_TO_R_SIZE = 3254 };
enum { GL_PIXEL_MAP_G_TO_G_SIZE = 3255 };
enum { GL_PIXEL_MAP_B_TO_B_SIZE = 3256 };
enum { GL_PIXEL_MAP_A_TO_A_SIZE = 3257 };
enum { GL_UNPACK_SWAP_BYTES = 3312 };
enum { GL_UNPACK_LSB_FIRST = 3313 };
enum { GL_UNPACK_ROW_LENGTH = 3314 };
enum { GL_UNPACK_SKIP_ROWS = 3315 };
enum { GL_UNPACK_SKIP_PIXELS = 3316 };
enum { GL_UNPACK_ALIGNMENT = 3317 };
enum { GL_PACK_SWAP_BYTES = 3328 };
enum { GL_PACK_LSB_FIRST = 3329 };
enum { GL_PACK_ROW_LENGTH = 3330 };
enum { GL_PACK_SKIP_ROWS = 3331 };
enum { GL_PACK_SKIP_PIXELS = 3332 };
enum { GL_PACK_ALIGNMENT = 3333 };
enum { GL_MAP_COLOR = 3344 };
enum { GL_MAP_STENCIL = 3345 };
enum { GL_INDEX_SHIFT = 3346 };
enum { GL_INDEX_OFFSET = 3347 };
enum { GL_RED_SCALE = 3348 };
enum { GL_RED_BIAS = 3349 };
enum { GL_ZOOM_X = 3350 };
enum { GL_ZOOM_Y = 3351 };
enum { GL_GREEN_SCALE = 3352 };
enum { GL_GREEN_BIAS = 3353 };
enum { GL_BLUE_SCALE = 3354 };
enum { GL_BLUE_BIAS = 3355 };
enum { GL_ALPHA_SCALE = 3356 };
enum { GL_ALPHA_BIAS = 3357 };
enum { GL_DEPTH_SCALE = 3358 };
enum { GL_DEPTH_BIAS = 3359 };
enum { GL_MAX_EVAL_ORDER = 3376 };
enum { GL_MAX_LIGHTS = 3377 };
enum { GL_MAX_CLIP_PLANES = 3378 };
enum { GL_MAX_TEXTURE_SIZE = 3379 };
enum { GL_MAX_PIXEL_MAP_TABLE = 3380 };
enum { GL_MAX_ATTRIB_STACK_DEPTH = 3381 };
enum { GL_MAX_MODELVIEW_STACK_DEPTH = 3382 };
enum { GL_MAX_NAME_STACK_DEPTH = 3383 };
enum { GL_MAX_PROJECTION_STACK_DEPTH = 3384 };
enum { GL_MAX_TEXTURE_STACK_DEPTH = 3385 };
enum { GL_MAX_VIEWPORT_DIMS = 3386 };
enum { GL_MAX_CLIENT_ATTRIB_STACK_DEPTH = 3387 };
enum { GL_SUBPIXEL_BITS = 3408 };
enum { GL_INDEX_BITS = 3409 };
enum { GL_RED_BITS = 3410 };
enum { GL_GREEN_BITS = 3411 };
enum { GL_BLUE_BITS = 3412 };
enum { GL_ALPHA_BITS = 3413 };
enum { GL_DEPTH_BITS = 3414 };
enum { GL_STENCIL_BITS = 3415 };
enum { GL_ACCUM_RED_BITS = 3416 };
enum { GL_ACCUM_GREEN_BITS = 3417 };
enum { GL_ACCUM_BLUE_BITS = 3418 };
enum { GL_ACCUM_ALPHA_BITS = 3419 };
enum { GL_NAME_STACK_DEPTH = 3440 };
enum { GL_AUTO_NORMAL = 3456 };
enum { GL_MAP1_COLOR_4 = 3472 };
enum { GL_MAP1_INDEX = 3473 };
enum { GL_MAP1_NORMAL = 3474 };
enum { GL_MAP1_TEXTURE_COORD_1 = 3475 };
enum { GL_MAP1_TEXTURE_COORD_2 = 3476 };
enum { GL_MAP1_TEXTURE_COORD_3 = 3477 };
enum { GL_MAP1_TEXTURE_COORD_4 = 3478 };
enum { GL_MAP1_VERTEX_3 = 3479 };
enum { GL_MAP1_VERTEX_4 = 3480 };
enum { GL_MAP2_COLOR_4 = 3504 };
enum { GL_MAP2_INDEX = 3505 };
enum { GL_MAP2_NORMAL = 3506 };
enum { GL_MAP2_TEXTURE_COORD_1 = 3507 };
enum { GL_MAP2_TEXTURE_COORD_2 = 3508 };
enum { GL_MAP2_TEXTURE_COORD_3 = 3509 };
enum { GL_MAP2_TEXTURE_COORD_4 = 3510 };
enum { GL_MAP2_VERTEX_3 = 3511 };
enum { GL_MAP2_VERTEX_4 = 3512 };
enum { GL_MAP1_GRID_DOMAIN = 3536 };
enum { GL_MAP1_GRID_SEGMENTS = 3537 };
enum { GL_MAP2_GRID_DOMAIN = 3538 };
enum { GL_MAP2_GRID_SEGMENTS = 3539 };
enum { GL_TEXTURE_1D = 3552 };
enum { GL_TEXTURE_2D = 3553 };
enum { GL_FEEDBACK_BUFFER_POINTER = 3568 };
enum { GL_FEEDBACK_BUFFER_SIZE = 3569 };
enum { GL_FEEDBACK_BUFFER_TYPE = 3570 };
enum { GL_SELECTION_BUFFER_POINTER = 3571 };
enum { GL_SELECTION_BUFFER_SIZE = 3572 };
enum { GL_TEXTURE_WIDTH = 4096 };
enum { GL_TEXTURE_HEIGHT = 4097 };
enum { GL_TEXTURE_INTERNAL_FORMAT = 4099 };
enum { GL_TEXTURE_BORDER_COLOR = 4100 };
enum { GL_TEXTURE_BORDER = 4101 };
enum { GL_DONT_CARE = 4352 };
enum { GL_FASTEST = 4353 };
enum { GL_NICEST = 4354 };
enum { GL_LIGHT0 = 16384 };
enum { GL_LIGHT1 = 16385 };
enum { GL_LIGHT2 = 16386 };
enum { GL_LIGHT3 = 16387 };
enum { GL_LIGHT4 = 16388 };
enum { GL_LIGHT5 = 16389 };
enum { GL_LIGHT6 = 16390 };
enum { GL_LIGHT7 = 16391 };
enum { GL_AMBIENT = 4608 };
enum { GL_DIFFUSE = 4609 };
enum { GL_SPECULAR = 4610 };
enum { GL_POSITION = 4611 };
enum { GL_SPOT_DIRECTION = 4612 };
enum { GL_SPOT_EXPONENT = 4613 };
enum { GL_SPOT_CUTOFF = 4614 };
enum { GL_CONSTANT_ATTENUATION = 4615 };
enum { GL_LINEAR_ATTENUATION = 4616 };
enum { GL_QUADRATIC_ATTENUATION = 4617 };
enum { GL_COMPILE = 4864 };
enum { GL_COMPILE_AND_EXECUTE = 4865 };
enum { GL_CLEAR = 5376 };
enum { GL_AND = 5377 };
enum { GL_AND_REVERSE = 5378 };
enum { GL_COPY = 5379 };
enum { GL_AND_INVERTED = 5380 };
enum { GL_NOOP = 5381 };
enum { GL_XOR = 5382 };
enum { GL_OR = 5383 };
enum { GL_NOR = 5384 };
enum { GL_EQUIV = 5385 };
enum { GL_INVERT = 5386 };
enum { GL_OR_REVERSE = 5387 };
enum { GL_COPY_INVERTED = 5388 };
enum { GL_OR_INVERTED = 5389 };
enum { GL_NAND = 5390 };
enum { GL_SET = 5391 };
enum { GL_EMISSION = 5632 };
enum { GL_SHININESS = 5633 };
enum { GL_AMBIENT_AND_DIFFUSE = 5634 };
enum { GL_COLOR_INDEXES = 5635 };
enum { GL_MODELVIEW = 5888 };
enum { GL_PROJECTION = 5889 };
enum { GL_TEXTURE = 5890 };
enum { GL_COLOR = 6144 };
enum { GL_DEPTH = 6145 };
enum { GL_STENCIL = 6146 };
enum { GL_COLOR_INDEX = 6400 };
enum { GL_STENCIL_INDEX = 6401 };
enum { GL_DEPTH_COMPONENT = 6402 };
enum { GL_RED = 6403 };
enum { GL_GREEN = 6404 };
enum { GL_BLUE = 6405 };
enum { GL_ALPHA = 6406 };
enum { GL_RGB = 6407 };
enum { GL_RGBA = 6408 };
enum { GL_LUMINANCE = 6409 };
enum { GL_LUMINANCE_ALPHA = 6410 };
enum { GL_BITMAP = 6656 };
enum { GL_POINT = 6912 };
enum { GL_LINE = 6913 };
enum { GL_FILL = 6914 };
enum { GL_RENDER = 7168 };
enum { GL_FEEDBACK = 7169 };
enum { GL_SELECT = 7170 };
enum { GL_FLAT = 7424 };
enum { GL_SMOOTH = 7425 };
enum { GL_KEEP = 7680 };
enum { GL_REPLACE = 7681 };
enum { GL_INCR = 7682 };
enum { GL_DECR = 7683 };
enum { GL_VENDOR = 7936 };
enum { GL_RENDERER = 7937 };
enum { GL_VERSION = 7938 };
enum { GL_EXTENSIONS = 7939 };
enum { GL_S = 8192 };
enum { GL_T = 8193 };
enum { GL_R = 8194 };
enum { GL_Q = 8195 };
enum { GL_MODULATE = 8448 };
enum { GL_DECAL = 8449 };
enum { GL_TEXTURE_ENV_MODE = 8704 };
enum { GL_TEXTURE_ENV_COLOR = 8705 };
enum { GL_TEXTURE_ENV = 8960 };
enum { GL_EYE_LINEAR = 9216 };
enum { GL_OBJECT_LINEAR = 9217 };
enum { GL_SPHERE_MAP = 9218 };
enum { GL_TEXTURE_GEN_MODE = 9472 };
enum { GL_OBJECT_PLANE = 9473 };
enum { GL_EYE_PLANE = 9474 };
enum { GL_NEAREST = 9728 };
enum { GL_LINEAR = 9729 };
enum { GL_NEAREST_MIPMAP_NEAREST = 9984 };
enum { GL_LINEAR_MIPMAP_NEAREST = 9985 };
enum { GL_NEAREST_MIPMAP_LINEAR = 9986 };
enum { GL_LINEAR_MIPMAP_LINEAR = 9987 };
enum { GL_TEXTURE_MAG_FILTER = 10240 };
enum { GL_TEXTURE_MIN_FILTER = 10241 };
enum { GL_TEXTURE_WRAP_S = 10242 };
enum { GL_TEXTURE_WRAP_T = 10243 };
enum { GL_CLAMP = 10496 };
enum { GL_REPEAT = 10497 };
enum { GL_CLIENT_PIXEL_STORE_BIT = 1 };
enum { GL_CLIENT_VERTEX_ARRAY_BIT = 2 };
enum { GL_CLIENT_ALL_ATTRIB_BITS = 4294967295 };
enum { GL_POLYGON_OFFSET_FACTOR = 32824 };
enum { GL_POLYGON_OFFSET_UNITS = 10752 };
enum { GL_POLYGON_OFFSET_POINT = 10753 };
enum { GL_POLYGON_OFFSET_LINE = 10754 };
enum { GL_POLYGON_OFFSET_FILL = 32823 };
enum { GL_ALPHA4 = 32827 };
enum { GL_ALPHA8 = 32828 };
enum { GL_ALPHA12 = 32829 };
enum { GL_ALPHA16 = 32830 };
enum { GL_LUMINANCE4 = 32831 };
enum { GL_LUMINANCE8 = 32832 };
enum { GL_LUMINANCE12 = 32833 };
enum { GL_LUMINANCE16 = 32834 };
enum { GL_LUMINANCE4_ALPHA4 = 32835 };
enum { GL_LUMINANCE6_ALPHA2 = 32836 };
enum { GL_LUMINANCE8_ALPHA8 = 32837 };
enum { GL_LUMINANCE12_ALPHA4 = 32838 };
enum { GL_LUMINANCE12_ALPHA12 = 32839 };
enum { GL_LUMINANCE16_ALPHA16 = 32840 };
enum { GL_INTENSITY = 32841 };
enum { GL_INTENSITY4 = 32842 };
enum { GL_INTENSITY8 = 32843 };
enum { GL_INTENSITY12 = 32844 };
enum { GL_INTENSITY16 = 32845 };
enum { GL_R3_G3_B2 = 10768 };
enum { GL_RGB4 = 32847 };
enum { GL_RGB5 = 32848 };
enum { GL_RGB8 = 32849 };
enum { GL_RGB10 = 32850 };
enum { GL_RGB12 = 32851 };
enum { GL_RGB16 = 32852 };
enum { GL_RGBA2 = 32853 };
enum { GL_RGBA4 = 32854 };
enum { GL_RGB5_A1 = 32855 };
enum { GL_RGBA8 = 32856 };
enum { GL_RGB10_A2 = 32857 };
enum { GL_RGBA12 = 32858 };
enum { GL_RGBA16 = 32859 };
enum { GL_TEXTURE_RED_SIZE = 32860 };
enum { GL_TEXTURE_GREEN_SIZE = 32861 };
enum { GL_TEXTURE_BLUE_SIZE = 32862 };
enum { GL_TEXTURE_ALPHA_SIZE = 32863 };
enum { GL_TEXTURE_LUMINANCE_SIZE = 32864 };
enum { GL_TEXTURE_INTENSITY_SIZE = 32865 };
enum { GL_PROXY_TEXTURE_1D = 32867 };
enum { GL_PROXY_TEXTURE_2D = 32868 };
enum { GL_TEXTURE_PRIORITY = 32870 };
enum { GL_TEXTURE_RESIDENT = 32871 };
enum { GL_TEXTURE_BINDING_1D = 32872 };
enum { GL_TEXTURE_BINDING_2D = 32873 };
enum { GL_TEXTURE_BINDING_3D = 32874 };
enum { GL_VERTEX_ARRAY = 32884 };
enum { GL_NORMAL_ARRAY = 32885 };
enum { GL_COLOR_ARRAY = 32886 };
enum { GL_INDEX_ARRAY = 32887 };
enum { GL_TEXTURE_COORD_ARRAY = 32888 };
enum { GL_EDGE_FLAG_ARRAY = 32889 };
enum { GL_VERTEX_ARRAY_SIZE = 32890 };
enum { GL_VERTEX_ARRAY_TYPE = 32891 };
enum { GL_VERTEX_ARRAY_STRIDE = 32892 };
enum { GL_NORMAL_ARRAY_TYPE = 32894 };
enum { GL_NORMAL_ARRAY_STRIDE = 32895 };
enum { GL_COLOR_ARRAY_SIZE = 32897 };
enum { GL_COLOR_ARRAY_TYPE = 32898 };
enum { GL_COLOR_ARRAY_STRIDE = 32899 };
enum { GL_INDEX_ARRAY_TYPE = 32901 };
enum { GL_INDEX_ARRAY_STRIDE = 32902 };
enum { GL_TEXTURE_COORD_ARRAY_SIZE = 32904 };
enum { GL_TEXTURE_COORD_ARRAY_TYPE = 32905 };
enum { GL_TEXTURE_COORD_ARRAY_STRIDE = 32906 };
enum { GL_EDGE_FLAG_ARRAY_STRIDE = 32908 };
enum { GL_VERTEX_ARRAY_POINTER = 32910 };
enum { GL_NORMAL_ARRAY_POINTER = 32911 };
enum { GL_COLOR_ARRAY_POINTER = 32912 };
enum { GL_INDEX_ARRAY_POINTER = 32913 };
enum { GL_TEXTURE_COORD_ARRAY_POINTER = 32914 };
enum { GL_EDGE_FLAG_ARRAY_POINTER = 32915 };
enum { GL_V2F = 10784 };
enum { GL_V3F = 10785 };
enum { GL_C4UB_V2F = 10786 };
enum { GL_C4UB_V3F = 10787 };
enum { GL_C3F_V3F = 10788 };
enum { GL_N3F_V3F = 10789 };
enum { GL_C4F_N3F_V3F = 10790 };
enum { GL_T2F_V3F = 10791 };
enum { GL_T4F_V4F = 10792 };
enum { GL_T2F_C4UB_V3F = 10793 };
enum { GL_T2F_C3F_V3F = 10794 };
enum { GL_T2F_N3F_V3F = 10795 };
enum { GL_T2F_C4F_N3F_V3F = 10796 };
enum { GL_T4F_C4F_N3F_V4F = 10797 };
enum { GL_BGR = 32992 };
enum { GL_BGRA = 32993 };
enum { GL_CONSTANT_COLOR = 32769 };
enum { GL_ONE_MINUS_CONSTANT_COLOR = 32770 };
enum { GL_CONSTANT_ALPHA = 32771 };
enum { GL_ONE_MINUS_CONSTANT_ALPHA = 32772 };
enum { GL_BLEND_COLOR = 32773 };
enum { GL_FUNC_ADD = 32774 };
enum { GL_MIN = 32775 };
enum { GL_MAX = 32776 };
enum { GL_BLEND_EQUATION = 32777 };
enum { GL_BLEND_EQUATION_RGB = 32777 };
enum { GL_BLEND_EQUATION_ALPHA = 34877 };
enum { GL_FUNC_SUBTRACT = 32778 };
enum { GL_FUNC_REVERSE_SUBTRACT = 32779 };
enum { GL_COLOR_MATRIX = 32945 };
enum { GL_COLOR_MATRIX_STACK_DEPTH = 32946 };
enum { GL_MAX_COLOR_MATRIX_STACK_DEPTH = 32947 };
enum { GL_POST_COLOR_MATRIX_RED_SCALE = 32948 };
enum { GL_POST_COLOR_MATRIX_GREEN_SCALE = 32949 };
enum { GL_POST_COLOR_MATRIX_BLUE_SCALE = 32950 };
enum { GL_POST_COLOR_MATRIX_ALPHA_SCALE = 32951 };
enum { GL_POST_COLOR_MATRIX_RED_BIAS = 32952 };
enum { GL_POST_COLOR_MATRIX_GREEN_BIAS = 32953 };
enum { GL_POST_COLOR_MATRIX_BLUE_BIAS = 32954 };
enum { GL_POST_COLOR_MATRIX_ALPHA_BIAS = 32955 };
enum { GL_COLOR_TABLE = 32976 };
enum { GL_POST_CONVOLUTION_COLOR_TABLE = 32977 };
enum { GL_POST_COLOR_MATRIX_COLOR_TABLE = 32978 };
enum { GL_PROXY_COLOR_TABLE = 32979 };
enum { GL_PROXY_POST_CONVOLUTION_COLOR_TABLE = 32980 };
enum { GL_PROXY_POST_COLOR_MATRIX_COLOR_TABLE = 32981 };
enum { GL_COLOR_TABLE_SCALE = 32982 };
enum { GL_COLOR_TABLE_BIAS = 32983 };
enum { GL_COLOR_TABLE_FORMAT = 32984 };
enum { GL_COLOR_TABLE_WIDTH = 32985 };
enum { GL_COLOR_TABLE_RED_SIZE = 32986 };
enum { GL_COLOR_TABLE_GREEN_SIZE = 32987 };
enum { GL_COLOR_TABLE_BLUE_SIZE = 32988 };
enum { GL_COLOR_TABLE_ALPHA_SIZE = 32989 };
enum { GL_COLOR_TABLE_LUMINANCE_SIZE = 32990 };
enum { GL_COLOR_TABLE_INTENSITY_SIZE = 32991 };
enum { GL_CONVOLUTION_1D = 32784 };
enum { GL_CONVOLUTION_2D = 32785 };
enum { GL_SEPARABLE_2D = 32786 };
enum { GL_CONVOLUTION_BORDER_MODE = 32787 };
enum { GL_CONVOLUTION_FILTER_SCALE = 32788 };
enum { GL_CONVOLUTION_FILTER_BIAS = 32789 };
enum { GL_REDUCE = 32790 };
enum { GL_CONVOLUTION_FORMAT = 32791 };
enum { GL_CONVOLUTION_WIDTH = 32792 };
enum { GL_CONVOLUTION_HEIGHT = 32793 };
enum { GL_MAX_CONVOLUTION_WIDTH = 32794 };
enum { GL_MAX_CONVOLUTION_HEIGHT = 32795 };
enum { GL_POST_CONVOLUTION_RED_SCALE = 32796 };
enum { GL_POST_CONVOLUTION_GREEN_SCALE = 32797 };
enum { GL_POST_CONVOLUTION_BLUE_SCALE = 32798 };
enum { GL_POST_CONVOLUTION_ALPHA_SCALE = 32799 };
enum { GL_POST_CONVOLUTION_RED_BIAS = 32800 };
enum { GL_POST_CONVOLUTION_GREEN_BIAS = 32801 };
enum { GL_POST_CONVOLUTION_BLUE_BIAS = 32802 };
enum { GL_POST_CONVOLUTION_ALPHA_BIAS = 32803 };
enum { GL_CONSTANT_BORDER = 33105 };
enum { GL_REPLICATE_BORDER = 33107 };
enum { GL_CONVOLUTION_BORDER_COLOR = 33108 };
enum { GL_MAX_ELEMENTS_VERTICES = 33000 };
enum { GL_MAX_ELEMENTS_INDICES = 33001 };
enum { GL_HISTOGRAM = 32804 };
enum { GL_PROXY_HISTOGRAM = 32805 };
enum { GL_HISTOGRAM_WIDTH = 32806 };
enum { GL_HISTOGRAM_FORMAT = 32807 };
enum { GL_HISTOGRAM_RED_SIZE = 32808 };
enum { GL_HISTOGRAM_GREEN_SIZE = 32809 };
enum { GL_HISTOGRAM_BLUE_SIZE = 32810 };
enum { GL_HISTOGRAM_ALPHA_SIZE = 32811 };
enum { GL_HISTOGRAM_LUMINANCE_SIZE = 32812 };
enum { GL_HISTOGRAM_SINK = 32813 };
enum { GL_MINMAX = 32814 };
enum { GL_MINMAX_FORMAT = 32815 };
enum { GL_MINMAX_SINK = 32816 };
enum { GL_TABLE_TOO_LARGE = 32817 };
enum { GL_UNSIGNED_BYTE_3_3_2 = 32818 };
enum { GL_UNSIGNED_SHORT_4_4_4_4 = 32819 };
enum { GL_UNSIGNED_SHORT_5_5_5_1 = 32820 };
enum { GL_UNSIGNED_INT_8_8_8_8 = 32821 };
enum { GL_UNSIGNED_INT_10_10_10_2 = 32822 };
enum { GL_UNSIGNED_BYTE_2_3_3_REV = 33634 };
enum { GL_UNSIGNED_SHORT_5_6_5 = 33635 };
enum { GL_UNSIGNED_SHORT_5_6_5_REV = 33636 };
enum { GL_UNSIGNED_SHORT_4_4_4_4_REV = 33637 };
enum { GL_UNSIGNED_SHORT_1_5_5_5_REV = 33638 };
enum { GL_UNSIGNED_INT_8_8_8_8_REV = 33639 };
enum { GL_UNSIGNED_INT_2_10_10_10_REV = 33640 };
enum { GL_RESCALE_NORMAL = 32826 };
enum { GL_LIGHT_MODEL_COLOR_CONTROL = 33272 };
enum { GL_SINGLE_COLOR = 33273 };
enum { GL_SEPARATE_SPECULAR_COLOR = 33274 };
enum { GL_PACK_SKIP_IMAGES = 32875 };
enum { GL_PACK_IMAGE_HEIGHT = 32876 };
enum { GL_UNPACK_SKIP_IMAGES = 32877 };
enum { GL_UNPACK_IMAGE_HEIGHT = 32878 };
enum { GL_TEXTURE_3D = 32879 };
enum { GL_PROXY_TEXTURE_3D = 32880 };
enum { GL_TEXTURE_DEPTH = 32881 };
enum { GL_TEXTURE_WRAP_R = 32882 };
enum { GL_MAX_3D_TEXTURE_SIZE = 32883 };
enum { GL_CLAMP_TO_EDGE = 33071 };
enum { GL_CLAMP_TO_BORDER = 33069 };
enum { GL_TEXTURE_MIN_LOD = 33082 };
enum { GL_TEXTURE_MAX_LOD = 33083 };
enum { GL_TEXTURE_BASE_LEVEL = 33084 };
enum { GL_TEXTURE_MAX_LEVEL = 33085 };
enum { GL_SMOOTH_POINT_SIZE_RANGE = 2834 };
enum { GL_SMOOTH_POINT_SIZE_GRANULARITY = 2835 };
enum { GL_SMOOTH_LINE_WIDTH_RANGE = 2850 };
enum { GL_SMOOTH_LINE_WIDTH_GRANULARITY = 2851 };
enum { GL_ALIASED_POINT_SIZE_RANGE = 33901 };
enum { GL_ALIASED_LINE_WIDTH_RANGE = 33902 };
enum { GL_TEXTURE0 = 33984 };
enum { GL_TEXTURE1 = 33985 };
enum { GL_TEXTURE2 = 33986 };
enum { GL_TEXTURE3 = 33987 };
enum { GL_TEXTURE4 = 33988 };
enum { GL_TEXTURE5 = 33989 };
enum { GL_TEXTURE6 = 33990 };
enum { GL_TEXTURE7 = 33991 };
enum { GL_TEXTURE8 = 33992 };
enum { GL_TEXTURE9 = 33993 };
enum { GL_TEXTURE10 = 33994 };
enum { GL_TEXTURE11 = 33995 };
enum { GL_TEXTURE12 = 33996 };
enum { GL_TEXTURE13 = 33997 };
enum { GL_TEXTURE14 = 33998 };
enum { GL_TEXTURE15 = 33999 };
enum { GL_TEXTURE16 = 34000 };
enum { GL_TEXTURE17 = 34001 };
enum { GL_TEXTURE18 = 34002 };
enum { GL_TEXTURE19 = 34003 };
enum { GL_TEXTURE20 = 34004 };
enum { GL_TEXTURE21 = 34005 };
enum { GL_TEXTURE22 = 34006 };
enum { GL_TEXTURE23 = 34007 };
enum { GL_TEXTURE24 = 34008 };
enum { GL_TEXTURE25 = 34009 };
enum { GL_TEXTURE26 = 34010 };
enum { GL_TEXTURE27 = 34011 };
enum { GL_TEXTURE28 = 34012 };
enum { GL_TEXTURE29 = 34013 };
enum { GL_TEXTURE30 = 34014 };
enum { GL_TEXTURE31 = 34015 };
enum { GL_ACTIVE_TEXTURE = 34016 };
enum { GL_CLIENT_ACTIVE_TEXTURE = 34017 };
enum { GL_MAX_TEXTURE_UNITS = 34018 };
enum { GL_COMBINE = 34160 };
enum { GL_COMBINE_RGB = 34161 };
enum { GL_COMBINE_ALPHA = 34162 };
enum { GL_RGB_SCALE = 34163 };
enum { GL_ADD_SIGNED = 34164 };
enum { GL_INTERPOLATE = 34165 };
enum { GL_CONSTANT = 34166 };
enum { GL_PRIMARY_COLOR = 34167 };
enum { GL_PREVIOUS = 34168 };
enum { GL_SUBTRACT = 34023 };
enum { GL_SRC0_RGB = 34176 };
enum { GL_SRC1_RGB = 34177 };
enum { GL_SRC2_RGB = 34178 };
enum { GL_SRC0_ALPHA = 34184 };
enum { GL_SRC1_ALPHA = 34185 };
enum { GL_SRC2_ALPHA = 34186 };
enum { GL_SOURCE0_RGB = 34176 };
enum { GL_SOURCE1_RGB = 34177 };
enum { GL_SOURCE2_RGB = 34178 };
enum { GL_SOURCE0_ALPHA = 34184 };
enum { GL_SOURCE1_ALPHA = 34185 };
enum { GL_SOURCE2_ALPHA = 34186 };
enum { GL_OPERAND0_RGB = 34192 };
enum { GL_OPERAND1_RGB = 34193 };
enum { GL_OPERAND2_RGB = 34194 };
enum { GL_OPERAND0_ALPHA = 34200 };
enum { GL_OPERAND1_ALPHA = 34201 };
enum { GL_OPERAND2_ALPHA = 34202 };
enum { GL_DOT3_RGB = 34478 };
enum { GL_DOT3_RGBA = 34479 };
enum { GL_TRANSPOSE_MODELVIEW_MATRIX = 34019 };
enum { GL_TRANSPOSE_PROJECTION_MATRIX = 34020 };
enum { GL_TRANSPOSE_TEXTURE_MATRIX = 34021 };
enum { GL_TRANSPOSE_COLOR_MATRIX = 34022 };
enum { GL_NORMAL_MAP = 34065 };
enum { GL_REFLECTION_MAP = 34066 };
enum { GL_TEXTURE_CUBE_MAP = 34067 };
enum { GL_TEXTURE_BINDING_CUBE_MAP = 34068 };
enum { GL_TEXTURE_CUBE_MAP_POSITIVE_X = 34069 };
enum { GL_TEXTURE_CUBE_MAP_NEGATIVE_X = 34070 };
enum { GL_TEXTURE_CUBE_MAP_POSITIVE_Y = 34071 };
enum { GL_TEXTURE_CUBE_MAP_NEGATIVE_Y = 34072 };
enum { GL_TEXTURE_CUBE_MAP_POSITIVE_Z = 34073 };
enum { GL_TEXTURE_CUBE_MAP_NEGATIVE_Z = 34074 };
enum { GL_PROXY_TEXTURE_CUBE_MAP = 34075 };
enum { GL_MAX_CUBE_MAP_TEXTURE_SIZE = 34076 };
enum { GL_COMPRESSED_ALPHA = 34025 };
enum { GL_COMPRESSED_LUMINANCE = 34026 };
enum { GL_COMPRESSED_LUMINANCE_ALPHA = 34027 };
enum { GL_COMPRESSED_INTENSITY = 34028 };
enum { GL_COMPRESSED_RGB = 34029 };
enum { GL_COMPRESSED_RGBA = 34030 };
enum { GL_TEXTURE_COMPRESSION_HINT = 34031 };
enum { GL_TEXTURE_COMPRESSED_IMAGE_SIZE = 34464 };
enum { GL_TEXTURE_COMPRESSED = 34465 };
enum { GL_NUM_COMPRESSED_TEXTURE_FORMATS = 34466 };
enum { GL_COMPRESSED_TEXTURE_FORMATS = 34467 };
enum { GL_MULTISAMPLE = 32925 };
enum { GL_SAMPLE_ALPHA_TO_COVERAGE = 32926 };
enum { GL_SAMPLE_ALPHA_TO_ONE = 32927 };
enum { GL_SAMPLE_COVERAGE = 32928 };
enum { GL_SAMPLE_BUFFERS = 32936 };
enum { GL_SAMPLES = 32937 };
enum { GL_SAMPLE_COVERAGE_VALUE = 32938 };
enum { GL_SAMPLE_COVERAGE_INVERT = 32939 };
enum { GL_MULTISAMPLE_BIT = 536870912 };
enum { GL_DEPTH_COMPONENT16 = 33189 };
enum { GL_DEPTH_COMPONENT24 = 33190 };
enum { GL_DEPTH_COMPONENT32 = 33191 };
enum { GL_TEXTURE_DEPTH_SIZE = 34890 };
enum { GL_DEPTH_TEXTURE_MODE = 34891 };
enum { GL_TEXTURE_COMPARE_MODE = 34892 };
enum { GL_TEXTURE_COMPARE_FUNC = 34893 };
enum { GL_COMPARE_R_TO_TEXTURE = 34894 };
enum { GL_QUERY_COUNTER_BITS = 34916 };
enum { GL_CURRENT_QUERY = 34917 };
enum { GL_QUERY_RESULT = 34918 };
enum { GL_QUERY_RESULT_AVAILABLE = 34919 };
enum { GL_SAMPLES_PASSED = 35092 };
enum { GL_FOG_COORD_SRC = 33872 };
enum { GL_FOG_COORD = 33873 };
enum { GL_FRAGMENT_DEPTH = 33874 };
enum { GL_CURRENT_FOG_COORD = 33875 };
enum { GL_FOG_COORD_ARRAY_TYPE = 33876 };
enum { GL_FOG_COORD_ARRAY_STRIDE = 33877 };
enum { GL_FOG_COORD_ARRAY_POINTER = 33878 };
enum { GL_FOG_COORD_ARRAY = 33879 };
enum { GL_FOG_COORDINATE_SOURCE = 33872 };
enum { GL_FOG_COORDINATE = 33873 };
enum { GL_CURRENT_FOG_COORDINATE = 33875 };
enum { GL_FOG_COORDINATE_ARRAY_TYPE = 33876 };
enum { GL_FOG_COORDINATE_ARRAY_STRIDE = 33877 };
enum { GL_FOG_COORDINATE_ARRAY_POINTER = 33878 };
enum { GL_FOG_COORDINATE_ARRAY = 33879 };
enum { GL_COLOR_SUM = 33880 };
enum { GL_CURRENT_SECONDARY_COLOR = 33881 };
enum { GL_SECONDARY_COLOR_ARRAY_SIZE = 33882 };
enum { GL_SECONDARY_COLOR_ARRAY_TYPE = 33883 };
enum { GL_SECONDARY_COLOR_ARRAY_STRIDE = 33884 };
enum { GL_SECONDARY_COLOR_ARRAY_POINTER = 33885 };
enum { GL_SECONDARY_COLOR_ARRAY = 33886 };
enum { GL_POINT_SIZE_MIN = 33062 };
enum { GL_POINT_SIZE_MAX = 33063 };
enum { GL_POINT_FADE_THRESHOLD_SIZE = 33064 };
enum { GL_POINT_DISTANCE_ATTENUATION = 33065 };
enum { GL_BLEND_DST_RGB = 32968 };
enum { GL_BLEND_SRC_RGB = 32969 };
enum { GL_BLEND_DST_ALPHA = 32970 };
enum { GL_BLEND_SRC_ALPHA = 32971 };
enum { GL_GENERATE_MIPMAP = 33169 };
enum { GL_GENERATE_MIPMAP_HINT = 33170 };
enum { GL_INCR_WRAP = 34055 };
enum { GL_DECR_WRAP = 34056 };
enum { GL_MIRRORED_REPEAT = 33648 };
enum { GL_MAX_TEXTURE_LOD_BIAS = 34045 };
enum { GL_TEXTURE_FILTER_CONTROL = 34048 };
enum { GL_TEXTURE_LOD_BIAS = 34049 };
enum { GL_ARRAY_BUFFER = 34962 };
enum { GL_ELEMENT_ARRAY_BUFFER = 34963 };
enum { GL_ARRAY_BUFFER_BINDING = 34964 };
enum { GL_ELEMENT_ARRAY_BUFFER_BINDING = 34965 };
enum { GL_VERTEX_ARRAY_BUFFER_BINDING = 34966 };
enum { GL_NORMAL_ARRAY_BUFFER_BINDING = 34967 };
enum { GL_COLOR_ARRAY_BUFFER_BINDING = 34968 };
enum { GL_INDEX_ARRAY_BUFFER_BINDING = 34969 };
enum { GL_TEXTURE_COORD_ARRAY_BUFFER_BINDING = 34970 };
enum { GL_EDGE_FLAG_ARRAY_BUFFER_BINDING = 34971 };
enum { GL_SECONDARY_COLOR_ARRAY_BUFFER_BINDING = 34972 };
enum { GL_FOG_COORD_ARRAY_BUFFER_BINDING = 34973 };
enum { GL_WEIGHT_ARRAY_BUFFER_BINDING = 34974 };
enum { GL_VERTEX_ATTRIB_ARRAY_BUFFER_BINDING = 34975 };
enum { GL_STREAM_DRAW = 35040 };
enum { GL_STREAM_READ = 35041 };
enum { GL_STREAM_COPY = 35042 };
enum { GL_STATIC_DRAW = 35044 };
enum { GL_STATIC_READ = 35045 };
enum { GL_STATIC_COPY = 35046 };
enum { GL_DYNAMIC_DRAW = 35048 };
enum { GL_DYNAMIC_READ = 35049 };
enum { GL_DYNAMIC_COPY = 35050 };
enum { GL_READ_ONLY = 35000 };
enum { GL_WRITE_ONLY = 35001 };
enum { GL_READ_WRITE = 35002 };
enum { GL_BUFFER_SIZE = 34660 };
enum { GL_BUFFER_USAGE = 34661 };
enum { GL_BUFFER_ACCESS = 35003 };
enum { GL_BUFFER_MAPPED = 35004 };
enum { GL_BUFFER_MAP_POINTER = 35005 };
enum { GL_FOG_COORDINATE_ARRAY_BUFFER_BINDING = 34973 };
enum { GL_CURRENT_PROGRAM = 35725 };
enum { GL_SHADER_TYPE = 35663 };
enum { GL_DELETE_STATUS = 35712 };
enum { GL_COMPILE_STATUS = 35713 };
enum { GL_LINK_STATUS = 35714 };
enum { GL_VALIDATE_STATUS = 35715 };
enum { GL_INFO_LOG_LENGTH = 35716 };
enum { GL_ATTACHED_SHADERS = 35717 };
enum { GL_ACTIVE_UNIFORMS = 35718 };
enum { GL_ACTIVE_UNIFORM_MAX_LENGTH = 35719 };
enum { GL_SHADER_SOURCE_LENGTH = 35720 };
enum { GL_FLOAT_VEC2 = 35664 };
enum { GL_FLOAT_VEC3 = 35665 };
enum { GL_FLOAT_VEC4 = 35666 };
enum { GL_INT_VEC2 = 35667 };
enum { GL_INT_VEC3 = 35668 };
enum { GL_INT_VEC4 = 35669 };
enum { GL_BOOL = 35670 };
enum { GL_BOOL_VEC2 = 35671 };
enum { GL_BOOL_VEC3 = 35672 };
enum { GL_BOOL_VEC4 = 35673 };
enum { GL_FLOAT_MAT2 = 35674 };
enum { GL_FLOAT_MAT3 = 35675 };
enum { GL_FLOAT_MAT4 = 35676 };
enum { GL_SAMPLER_1D = 35677 };
enum { GL_SAMPLER_2D = 35678 };
enum { GL_SAMPLER_3D = 35679 };
enum { GL_SAMPLER_CUBE = 35680 };
enum { GL_SAMPLER_1D_SHADOW = 35681 };
enum { GL_SAMPLER_2D_SHADOW = 35682 };
enum { GL_SHADING_LANGUAGE_VERSION = 35724 };
enum { GL_VERTEX_SHADER = 35633 };
enum { GL_MAX_VERTEX_UNIFORM_COMPONENTS = 35658 };
enum { GL_MAX_VARYING_FLOATS = 35659 };
enum { GL_MAX_VERTEX_TEXTURE_IMAGE_UNITS = 35660 };
enum { GL_MAX_COMBINED_TEXTURE_IMAGE_UNITS = 35661 };
enum { GL_ACTIVE_ATTRIBUTES = 35721 };
enum { GL_ACTIVE_ATTRIBUTE_MAX_LENGTH = 35722 };
enum { GL_FRAGMENT_SHADER = 35632 };
enum { GL_MAX_FRAGMENT_UNIFORM_COMPONENTS = 35657 };
enum { GL_FRAGMENT_SHADER_DERIVATIVE_HINT = 35723 };
enum { GL_MAX_VERTEX_ATTRIBS = 34921 };
enum { GL_VERTEX_ATTRIB_ARRAY_ENABLED = 34338 };
enum { GL_VERTEX_ATTRIB_ARRAY_SIZE = 34339 };
enum { GL_VERTEX_ATTRIB_ARRAY_STRIDE = 34340 };
enum { GL_VERTEX_ATTRIB_ARRAY_TYPE = 34341 };
enum { GL_VERTEX_ATTRIB_ARRAY_NORMALIZED = 34922 };
enum { GL_CURRENT_VERTEX_ATTRIB = 34342 };
enum { GL_VERTEX_ATTRIB_ARRAY_POINTER = 34373 };
enum { GL_VERTEX_PROGRAM_POINT_SIZE = 34370 };
enum { GL_VERTEX_PROGRAM_TWO_SIDE = 34371 };
enum { GL_MAX_TEXTURE_COORDS = 34929 };
enum { GL_MAX_TEXTURE_IMAGE_UNITS = 34930 };
enum { GL_MAX_DRAW_BUFFERS = 34852 };
enum { GL_DRAW_BUFFER0 = 34853 };
enum { GL_DRAW_BUFFER1 = 34854 };
enum { GL_DRAW_BUFFER2 = 34855 };
enum { GL_DRAW_BUFFER3 = 34856 };
enum { GL_DRAW_BUFFER4 = 34857 };
enum { GL_DRAW_BUFFER5 = 34858 };
enum { GL_DRAW_BUFFER6 = 34859 };
enum { GL_DRAW_BUFFER7 = 34860 };
enum { GL_DRAW_BUFFER8 = 34861 };
enum { GL_DRAW_BUFFER9 = 34862 };
enum { GL_DRAW_BUFFER10 = 34863 };
enum { GL_DRAW_BUFFER11 = 34864 };
enum { GL_DRAW_BUFFER12 = 34865 };
enum { GL_DRAW_BUFFER13 = 34866 };
enum { GL_DRAW_BUFFER14 = 34867 };
enum { GL_DRAW_BUFFER15 = 34868 };
enum { GL_POINT_SPRITE = 34913 };
enum { GL_COORD_REPLACE = 34914 };
enum { GL_POINT_SPRITE_COORD_ORIGIN = 36000 };
enum { GL_LOWER_LEFT = 36001 };
enum { GL_UPPER_LEFT = 36002 };
enum { GL_STENCIL_BACK_FUNC = 34816 };
enum { GL_STENCIL_BACK_VALUE_MASK = 36004 };
enum { GL_STENCIL_BACK_REF = 36003 };
enum { GL_STENCIL_BACK_FAIL = 34817 };
enum { GL_STENCIL_BACK_PASS_DEPTH_FAIL = 34818 };
enum { GL_STENCIL_BACK_PASS_DEPTH_PASS = 34819 };
enum { GL_STENCIL_BACK_WRITEMASK = 36005 };
enum { GL_CURRENT_RASTER_SECONDARY_COLOR = 33887 };
enum { GL_PIXEL_PACK_BUFFER = 35051 };
enum { GL_PIXEL_UNPACK_BUFFER = 35052 };
enum { GL_PIXEL_PACK_BUFFER_BINDING = 35053 };
enum { GL_PIXEL_UNPACK_BUFFER_BINDING = 35055 };
enum { GL_FLOAT_MAT2x3 = 35685 };
enum { GL_FLOAT_MAT2x4 = 35686 };
enum { GL_FLOAT_MAT3x2 = 35687 };
enum { GL_FLOAT_MAT3x4 = 35688 };
enum { GL_FLOAT_MAT4x2 = 35689 };
enum { GL_FLOAT_MAT4x3 = 35690 };
enum { GL_SRGB = 35904 };
enum { GL_SRGB8 = 35905 };
enum { GL_SRGB_ALPHA = 35906 };
enum { GL_SRGB8_ALPHA8 = 35907 };
enum { GL_SLUMINANCE_ALPHA = 35908 };
enum { GL_SLUMINANCE8_ALPHA8 = 35909 };
enum { GL_SLUMINANCE = 35910 };
enum { GL_SLUMINANCE8 = 35911 };
enum { GL_COMPRESSED_SRGB = 35912 };
enum { GL_COMPRESSED_SRGB_ALPHA = 35913 };
enum { GL_COMPRESSED_SLUMINANCE = 35914 };
enum { GL_COMPRESSED_SLUMINANCE_ALPHA = 35915 };
extern void glAccum (GLenum op, GLfloat value);
extern void glAlphaFunc (GLenum func, GLclampf ref);
extern GLboolean glAreTexturesResident (GLsizei n, const GLuint *textures, GLboolean *residences);
extern void glArrayElement (GLint i);
extern void glBegin (GLenum mode);
extern void glBindTexture (GLenum target, GLuint texture);
extern void glBitmap (GLsizei width, GLsizei height, GLfloat xorig, GLfloat yorig, GLfloat xmove, GLfloat ymove, const GLubyte *bitmap);
extern void glBlendColor (GLclampf red, GLclampf green, GLclampf blue, GLclampf alpha);
extern void glBlendEquation (GLenum mode);
extern void glBlendEquationSeparate (GLenum modeRGB, GLenum modeAlpha);
extern void glBlendFunc (GLenum sfactor, GLenum dfactor);
extern void glCallList (GLuint list);
extern void glCallLists (GLsizei n, GLenum type, const GLvoid *lists);
extern void glClear (GLbitfield mask);
extern void glClearAccum (GLfloat red, GLfloat green, GLfloat blue, GLfloat alpha);
extern void glClearColor (GLclampf red, GLclampf green, GLclampf blue, GLclampf alpha);
extern void glClearDepth (GLclampd depth);
extern void glClearIndex (GLfloat c);
extern void glClearStencil (GLint s);
extern void glClipPlane (GLenum plane, const GLdouble *equation);
extern void glColor3b (GLbyte red, GLbyte green, GLbyte blue);
extern void glColor3bv (const GLbyte *v);
extern void glColor3d (GLdouble red, GLdouble green, GLdouble blue);
extern void glColor3dv (const GLdouble *v);
extern void glColor3f (GLfloat red, GLfloat green, GLfloat blue);
extern void glColor3fv (const GLfloat *v);
extern void glColor3i (GLint red, GLint green, GLint blue);
extern void glColor3iv (const GLint *v);
extern void glColor3s (GLshort red, GLshort green, GLshort blue);
extern void glColor3sv (const GLshort *v);
extern void glColor3ub (GLubyte red, GLubyte green, GLubyte blue);
extern void glColor3ubv (const GLubyte *v);
extern void glColor3ui (GLuint red, GLuint green, GLuint blue);
extern void glColor3uiv (const GLuint *v);
extern void glColor3us (GLushort red, GLushort green, GLushort blue);
extern void glColor3usv (const GLushort *v);
extern void glColor4b (GLbyte red, GLbyte green, GLbyte blue, GLbyte alpha);
extern void glColor4bv (const GLbyte *v);
extern void glColor4d (GLdouble red, GLdouble green, GLdouble blue, GLdouble alpha);
extern void glColor4dv (const GLdouble *v);
extern void glColor4f (GLfloat red, GLfloat green, GLfloat blue, GLfloat alpha);
extern void glColor4fv (const GLfloat *v);
extern void glColor4i (GLint red, GLint green, GLint blue, GLint alpha);
extern void glColor4iv (const GLint *v);
extern void glColor4s (GLshort red, GLshort green, GLshort blue, GLshort alpha);
extern void glColor4sv (const GLshort *v);
extern void glColor4ub (GLubyte red, GLubyte green, GLubyte blue, GLubyte alpha);
extern void glColor4ubv (const GLubyte *v);
extern void glColor4ui (GLuint red, GLuint green, GLuint blue, GLuint alpha);
extern void glColor4uiv (const GLuint *v);
extern void glColor4us (GLushort red, GLushort green, GLushort blue, GLushort alpha);
extern void glColor4usv (const GLushort *v);
extern void glColorMask (GLboolean red, GLboolean green, GLboolean blue, GLboolean alpha);
extern void glColorMaterial (GLenum face, GLenum mode);
extern void glColorPointer (GLint size, GLenum type, GLsizei stride, const GLvoid *pointer);
extern void glColorSubTable (GLenum target, GLsizei start, GLsizei count, GLenum format, GLenum type, const GLvoid *data);
extern void glColorTable (GLenum target, GLenum internalformat, GLsizei width, GLenum format, GLenum type, const GLvoid *table);
extern void glColorTableParameterfv (GLenum target, GLenum pname, const GLfloat *params);
extern void glColorTableParameteriv (GLenum target, GLenum pname, const GLint *params);
extern void glConvolutionFilter1D (GLenum target, GLenum internalformat, GLsizei width, GLenum format, GLenum type, const GLvoid *image);
extern void glConvolutionFilter2D (GLenum target, GLenum internalformat, GLsizei width, GLsizei height, GLenum format, GLenum type, const GLvoid *image);
extern void glConvolutionParameterf (GLenum target, GLenum pname, GLfloat params);
extern void glConvolutionParameterfv (GLenum target, GLenum pname, const GLfloat *params);
extern void glConvolutionParameteri (GLenum target, GLenum pname, GLint params);
extern void glConvolutionParameteriv (GLenum target, GLenum pname, const GLint *params);
extern void glCopyColorSubTable (GLenum target, GLsizei start, GLint x, GLint y, GLsizei width);
extern void glCopyColorTable (GLenum target, GLenum internalformat, GLint x, GLint y, GLsizei width);
extern void glCopyConvolutionFilter1D (GLenum target, GLenum internalformat, GLint x, GLint y, GLsizei width);
extern void glCopyConvolutionFilter2D (GLenum target, GLenum internalformat, GLint x, GLint y, GLsizei width, GLsizei height);
extern void glCopyPixels (GLint x, GLint y, GLsizei width, GLsizei height, GLenum type);
extern void glCopyTexImage1D (GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLint border);
extern void glCopyTexImage2D (GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLsizei height, GLint border);
extern void glCopyTexSubImage1D (GLenum target, GLint level, GLint xoffset, GLint x, GLint y, GLsizei width);
extern void glCopyTexSubImage2D (GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint x, GLint y, GLsizei width, GLsizei height);
extern void glCopyTexSubImage3D (GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLint x, GLint y, GLsizei width, GLsizei height);
extern void glCullFace (GLenum mode);
extern void glDeleteLists (GLuint list, GLsizei range);
extern void glDeleteTextures (GLsizei n, const GLuint *textures);
extern void glDepthFunc (GLenum func);
extern void glDepthMask (GLboolean flag);
extern void glDepthRange (GLclampd zNear, GLclampd zFar);
extern void glDisable (GLenum cap);
extern void glDisableClientState (GLenum array);
extern void glDrawArrays (GLenum mode, GLint first, GLsizei count);
extern void glDrawBuffer (GLenum mode);
extern void glDrawElements (GLenum mode, GLsizei count, GLenum type, const GLvoid *indices);
extern void glDrawPixels (GLsizei width, GLsizei height, GLenum format, GLenum type, const GLvoid *pixels);
extern void glDrawRangeElements (GLenum mode, GLuint start, GLuint end, GLsizei count, GLenum type, const GLvoid *indices);
extern void glEdgeFlag (GLboolean flag);
extern void glEdgeFlagPointer (GLsizei stride, const GLvoid *pointer);
extern void glEdgeFlagv (const GLboolean *flag);
extern void glEnable (GLenum cap);
extern void glEnableClientState (GLenum array);
extern void glEnd (void);
extern void glEndList (void);
extern void glEvalCoord1d (GLdouble u);
extern void glEvalCoord1dv (const GLdouble *u);
extern void glEvalCoord1f (GLfloat u);
extern void glEvalCoord1fv (const GLfloat *u);
extern void glEvalCoord2d (GLdouble u, GLdouble v);
extern void glEvalCoord2dv (const GLdouble *u);
extern void glEvalCoord2f (GLfloat u, GLfloat v);
extern void glEvalCoord2fv (const GLfloat *u);
extern void glEvalMesh1 (GLenum mode, GLint i1, GLint i2);
extern void glEvalMesh2 (GLenum mode, GLint i1, GLint i2, GLint j1, GLint j2);
extern void glEvalPoint1 (GLint i);
extern void glEvalPoint2 (GLint i, GLint j);
extern void glFeedbackBuffer (GLsizei size, GLenum type, GLfloat *buffer);
extern void glFinish (void);
extern void glFlush (void);
extern void glFogf (GLenum pname, GLfloat param);
extern void glFogfv (GLenum pname, const GLfloat *params);
extern void glFogi (GLenum pname, GLint param);
extern void glFogiv (GLenum pname, const GLint *params);
extern void glFrontFace (GLenum mode);
extern void glFrustum (GLdouble left, GLdouble right, GLdouble bottom, GLdouble top, GLdouble zNear, GLdouble zFar);
extern GLuint glGenLists (GLsizei range);
extern void glGenTextures (GLsizei n, GLuint *textures);
extern void glGetBooleanv (GLenum pname, GLboolean *params);
extern void glGetClipPlane (GLenum plane, GLdouble *equation);
extern void glGetColorTable (GLenum target, GLenum format, GLenum type, GLvoid *table);
extern void glGetColorTableParameterfv (GLenum target, GLenum pname, GLfloat *params);
extern void glGetColorTableParameteriv (GLenum target, GLenum pname, GLint *params);
extern void glGetConvolutionFilter (GLenum target, GLenum format, GLenum type, GLvoid *image);
extern void glGetConvolutionParameterfv (GLenum target, GLenum pname, GLfloat *params);
extern void glGetConvolutionParameteriv (GLenum target, GLenum pname, GLint *params);
extern void glGetDoublev (GLenum pname, GLdouble *params);
extern GLenum glGetError (void);
extern void glGetFloatv (GLenum pname, GLfloat *params);
extern void glGetHistogram (GLenum target, GLboolean reset, GLenum format, GLenum type, GLvoid *values);
extern void glGetHistogramParameterfv (GLenum target, GLenum pname, GLfloat *params);
extern void glGetHistogramParameteriv (GLenum target, GLenum pname, GLint *params);
extern void glGetIntegerv (GLenum pname, GLint *params);
extern void glGetLightfv (GLenum light, GLenum pname, GLfloat *params);
extern void glGetLightiv (GLenum light, GLenum pname, GLint *params);
extern void glGetMapdv (GLenum target, GLenum query, GLdouble *v);
extern void glGetMapfv (GLenum target, GLenum query, GLfloat *v);
extern void glGetMapiv (GLenum target, GLenum query, GLint *v);
extern void glGetMaterialfv (GLenum face, GLenum pname, GLfloat *params);
extern void glGetMaterialiv (GLenum face, GLenum pname, GLint *params);
extern void glGetMinmax (GLenum target, GLboolean reset, GLenum format, GLenum type, GLvoid *values);
extern void glGetMinmaxParameterfv (GLenum target, GLenum pname, GLfloat *params);
extern void glGetMinmaxParameteriv (GLenum target, GLenum pname, GLint *params);
extern void glGetPixelMapfv (GLenum map, GLfloat *values);
extern void glGetPixelMapuiv (GLenum map, GLuint *values);
extern void glGetPixelMapusv (GLenum map, GLushort *values);
extern void glGetPointerv (GLenum pname, GLvoid **params);
extern void glGetPolygonStipple (GLubyte *mask);
extern void glGetSeparableFilter (GLenum target, GLenum format, GLenum type, GLvoid *row, GLvoid *column, GLvoid *span);
extern const GLubyte *glGetString (GLenum name);
extern void glGetTexEnvfv (GLenum target, GLenum pname, GLfloat *params);
extern void glGetTexEnviv (GLenum target, GLenum pname, GLint *params);
extern void glGetTexGendv (GLenum coord, GLenum pname, GLdouble *params);
extern void glGetTexGenfv (GLenum coord, GLenum pname, GLfloat *params);
extern void glGetTexGeniv (GLenum coord, GLenum pname, GLint *params);
extern void glGetTexImage (GLenum target, GLint level, GLenum format, GLenum type, GLvoid *pixels);
extern void glGetTexLevelParameterfv (GLenum target, GLint level, GLenum pname, GLfloat *params);
extern void glGetTexLevelParameteriv (GLenum target, GLint level, GLenum pname, GLint *params);
extern void glGetTexParameterfv (GLenum target, GLenum pname, GLfloat *params);
extern void glGetTexParameteriv (GLenum target, GLenum pname, GLint *params);
extern void glHint (GLenum target, GLenum mode);
extern void glHistogram (GLenum target, GLsizei width, GLenum internalformat, GLboolean sink);
extern void glIndexMask (GLuint mask);
extern void glIndexPointer (GLenum type, GLsizei stride, const GLvoid *pointer);
extern void glIndexd (GLdouble c);
extern void glIndexdv (const GLdouble *c);
extern void glIndexf (GLfloat c);
extern void glIndexfv (const GLfloat *c);
extern void glIndexi (GLint c);
extern void glIndexiv (const GLint *c);
extern void glIndexs (GLshort c);
extern void glIndexsv (const GLshort *c);
extern void glIndexub (GLubyte c);
extern void glIndexubv (const GLubyte *c);
extern void glInitNames (void);
extern void glInterleavedArrays (GLenum format, GLsizei stride, const GLvoid *pointer);
extern GLboolean glIsEnabled (GLenum cap);
extern GLboolean glIsList (GLuint list);
extern GLboolean glIsTexture (GLuint texture);
extern void glLightModelf (GLenum pname, GLfloat param);
extern void glLightModelfv (GLenum pname, const GLfloat *params);
extern void glLightModeli (GLenum pname, GLint param);
extern void glLightModeliv (GLenum pname, const GLint *params);
extern void glLightf (GLenum light, GLenum pname, GLfloat param);
extern void glLightfv (GLenum light, GLenum pname, const GLfloat *params);
extern void glLighti (GLenum light, GLenum pname, GLint param);
extern void glLightiv (GLenum light, GLenum pname, const GLint *params);
extern void glLineStipple (GLint factor, GLushort pattern);
extern void glLineWidth (GLfloat width);
extern void glListBase (GLuint base);
extern void glLoadIdentity (void);
extern void glLoadMatrixd (const GLdouble *m);
extern void glLoadMatrixf (const GLfloat *m);
extern void glLoadName (GLuint name);
extern void glLogicOp (GLenum opcode);
extern void glMap1d (GLenum target, GLdouble u1, GLdouble u2, GLint stride, GLint order, const GLdouble *points);
extern void glMap1f (GLenum target, GLfloat u1, GLfloat u2, GLint stride, GLint order, const GLfloat *points);
extern void glMap2d (GLenum target, GLdouble u1, GLdouble u2, GLint ustride, GLint uorder, GLdouble v1, GLdouble v2, GLint vstride, GLint vorder, const GLdouble *points);
extern void glMap2f (GLenum target, GLfloat u1, GLfloat u2, GLint ustride, GLint uorder, GLfloat v1, GLfloat v2, GLint vstride, GLint vorder, const GLfloat *points);
extern void glMapGrid1d (GLint un, GLdouble u1, GLdouble u2);
extern void glMapGrid1f (GLint un, GLfloat u1, GLfloat u2);
extern void glMapGrid2d (GLint un, GLdouble u1, GLdouble u2, GLint vn, GLdouble v1, GLdouble v2);
extern void glMapGrid2f (GLint un, GLfloat u1, GLfloat u2, GLint vn, GLfloat v1, GLfloat v2);
extern void glMaterialf (GLenum face, GLenum pname, GLfloat param);
extern void glMaterialfv (GLenum face, GLenum pname, const GLfloat *params);
extern void glMateriali (GLenum face, GLenum pname, GLint param);
extern void glMaterialiv (GLenum face, GLenum pname, const GLint *params);
extern void glMatrixMode (GLenum mode);
extern void glMinmax (GLenum target, GLenum internalformat, GLboolean sink);
extern void glMultMatrixd (const GLdouble *m);
extern void glMultMatrixf (const GLfloat *m);
extern void glNewList (GLuint list, GLenum mode);
extern void glNormal3b (GLbyte nx, GLbyte ny, GLbyte nz);
extern void glNormal3bv (const GLbyte *v);
extern void glNormal3d (GLdouble nx, GLdouble ny, GLdouble nz);
extern void glNormal3dv (const GLdouble *v);
extern void glNormal3f (GLfloat nx, GLfloat ny, GLfloat nz);
extern void glNormal3fv (const GLfloat *v);
extern void glNormal3i (GLint nx, GLint ny, GLint nz);
extern void glNormal3iv (const GLint *v);
extern void glNormal3s (GLshort nx, GLshort ny, GLshort nz);
extern void glNormal3sv (const GLshort *v);
extern void glNormalPointer (GLenum type, GLsizei stride, const GLvoid *pointer);
extern void glOrtho (GLdouble left, GLdouble right, GLdouble bottom, GLdouble top, GLdouble zNear, GLdouble zFar);
extern void glPassThrough (GLfloat token);
extern void glPixelMapfv (GLenum map, GLint mapsize, const GLfloat *values);
extern void glPixelMapuiv (GLenum map, GLint mapsize, const GLuint *values);
extern void glPixelMapusv (GLenum map, GLint mapsize, const GLushort *values);
extern void glPixelStoref (GLenum pname, GLfloat param);
extern void glPixelStorei (GLenum pname, GLint param);
extern void glPixelTransferf (GLenum pname, GLfloat param);
extern void glPixelTransferi (GLenum pname, GLint param);
extern void glPixelZoom (GLfloat xfactor, GLfloat yfactor);
extern void glPointSize (GLfloat size);
extern void glPolygonMode (GLenum face, GLenum mode);
extern void glPolygonOffset (GLfloat factor, GLfloat units);
extern void glPolygonStipple (const GLubyte *mask);
extern void glPopAttrib (void);
extern void glPopClientAttrib (void);
extern void glPopMatrix (void);
extern void glPopName (void);
extern void glPrioritizeTextures (GLsizei n, const GLuint *textures, const GLclampf *priorities);
extern void glPushAttrib (GLbitfield mask);
extern void glPushClientAttrib (GLbitfield mask);
extern void glPushMatrix (void);
extern void glPushName (GLuint name);
extern void glRasterPos2d (GLdouble x, GLdouble y);
extern void glRasterPos2dv (const GLdouble *v);
extern void glRasterPos2f (GLfloat x, GLfloat y);
extern void glRasterPos2fv (const GLfloat *v);
extern void glRasterPos2i (GLint x, GLint y);
extern void glRasterPos2iv (const GLint *v);
extern void glRasterPos2s (GLshort x, GLshort y);
extern void glRasterPos2sv (const GLshort *v);
extern void glRasterPos3d (GLdouble x, GLdouble y, GLdouble z);
extern void glRasterPos3dv (const GLdouble *v);
extern void glRasterPos3f (GLfloat x, GLfloat y, GLfloat z);
extern void glRasterPos3fv (const GLfloat *v);
extern void glRasterPos3i (GLint x, GLint y, GLint z);
extern void glRasterPos3iv (const GLint *v);
extern void glRasterPos3s (GLshort x, GLshort y, GLshort z);
extern void glRasterPos3sv (const GLshort *v);
extern void glRasterPos4d (GLdouble x, GLdouble y, GLdouble z, GLdouble w);
extern void glRasterPos4dv (const GLdouble *v);
extern void glRasterPos4f (GLfloat x, GLfloat y, GLfloat z, GLfloat w);
extern void glRasterPos4fv (const GLfloat *v);
extern void glRasterPos4i (GLint x, GLint y, GLint z, GLint w);
extern void glRasterPos4iv (const GLint *v);
extern void glRasterPos4s (GLshort x, GLshort y, GLshort z, GLshort w);
extern void glRasterPos4sv (const GLshort *v);
extern void glReadBuffer (GLenum mode);
extern void glReadPixels (GLint x, GLint y, GLsizei width, GLsizei height, GLenum format, GLenum type, GLvoid *pixels);
extern void glRectd (GLdouble x1, GLdouble y1, GLdouble x2, GLdouble y2);
extern void glRectdv (const GLdouble *v1, const GLdouble *v2);
extern void glRectf (GLfloat x1, GLfloat y1, GLfloat x2, GLfloat y2);
extern void glRectfv (const GLfloat *v1, const GLfloat *v2);
extern void glRecti (GLint x1, GLint y1, GLint x2, GLint y2);
extern void glRectiv (const GLint *v1, const GLint *v2);
extern void glRects (GLshort x1, GLshort y1, GLshort x2, GLshort y2);
extern void glRectsv (const GLshort *v1, const GLshort *v2);
extern GLint glRenderMode (GLenum mode);
extern void glResetHistogram (GLenum target);
extern void glResetMinmax (GLenum target);
extern void glRotated (GLdouble angle, GLdouble x, GLdouble y, GLdouble z);
extern void glRotatef (GLfloat angle, GLfloat x, GLfloat y, GLfloat z);
extern void glScaled (GLdouble x, GLdouble y, GLdouble z);
extern void glScalef (GLfloat x, GLfloat y, GLfloat z);
extern void glScissor (GLint x, GLint y, GLsizei width, GLsizei height);
extern void glSelectBuffer (GLsizei size, GLuint *buffer);
extern void glSeparableFilter2D (GLenum target, GLenum internalformat, GLsizei width, GLsizei height, GLenum format, GLenum type, const GLvoid *row, const GLvoid *column);
extern void glShadeModel (GLenum mode);
extern void glStencilFunc (GLenum func, GLint ref, GLuint mask);
extern void glStencilMask (GLuint mask);
extern void glStencilOp (GLenum fail, GLenum zfail, GLenum zpass);
extern void glTexCoord1d (GLdouble s);
extern void glTexCoord1dv (const GLdouble *v);
extern void glTexCoord1f (GLfloat s);
extern void glTexCoord1fv (const GLfloat *v);
extern void glTexCoord1i (GLint s);
extern void glTexCoord1iv (const GLint *v);
extern void glTexCoord1s (GLshort s);
extern void glTexCoord1sv (const GLshort *v);
extern void glTexCoord2d (GLdouble s, GLdouble t);
extern void glTexCoord2dv (const GLdouble *v);
extern void glTexCoord2f (GLfloat s, GLfloat t);
extern void glTexCoord2fv (const GLfloat *v);
extern void glTexCoord2i (GLint s, GLint t);
extern void glTexCoord2iv (const GLint *v);
extern void glTexCoord2s (GLshort s, GLshort t);
extern void glTexCoord2sv (const GLshort *v);
extern void glTexCoord3d (GLdouble s, GLdouble t, GLdouble r);
extern void glTexCoord3dv (const GLdouble *v);
extern void glTexCoord3f (GLfloat s, GLfloat t, GLfloat r);
extern void glTexCoord3fv (const GLfloat *v);
extern void glTexCoord3i (GLint s, GLint t, GLint r);
extern void glTexCoord3iv (const GLint *v);
extern void glTexCoord3s (GLshort s, GLshort t, GLshort r);
extern void glTexCoord3sv (const GLshort *v);
extern void glTexCoord4d (GLdouble s, GLdouble t, GLdouble r, GLdouble q);
extern void glTexCoord4dv (const GLdouble *v);
extern void glTexCoord4f (GLfloat s, GLfloat t, GLfloat r, GLfloat q);
extern void glTexCoord4fv (const GLfloat *v);
extern void glTexCoord4i (GLint s, GLint t, GLint r, GLint q);
extern void glTexCoord4iv (const GLint *v);
extern void glTexCoord4s (GLshort s, GLshort t, GLshort r, GLshort q);
extern void glTexCoord4sv (const GLshort *v);
extern void glTexCoordPointer (GLint size, GLenum type, GLsizei stride, const GLvoid *pointer);
extern void glTexEnvf (GLenum target, GLenum pname, GLfloat param);
extern void glTexEnvfv (GLenum target, GLenum pname, const GLfloat *params);
extern void glTexEnvi (GLenum target, GLenum pname, GLint param);
extern void glTexEnviv (GLenum target, GLenum pname, const GLint *params);
extern void glTexGend (GLenum coord, GLenum pname, GLdouble param);
extern void glTexGendv (GLenum coord, GLenum pname, const GLdouble *params);
extern void glTexGenf (GLenum coord, GLenum pname, GLfloat param);
extern void glTexGenfv (GLenum coord, GLenum pname, const GLfloat *params);
extern void glTexGeni (GLenum coord, GLenum pname, GLint param);
extern void glTexGeniv (GLenum coord, GLenum pname, const GLint *params);
extern void glTexImage1D (GLenum target, GLint level, GLint internalformat, GLsizei width, GLint border, GLenum format, GLenum type, const GLvoid *pixels);
extern void glTexImage2D (GLenum target, GLint level, GLint internalformat, GLsizei width, GLsizei height, GLint border, GLenum format, GLenum type, const GLvoid *pixels);
extern void glTexImage3D (GLenum target, GLint level, GLint internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLenum format, GLenum type, const GLvoid *pixels);
extern void glTexParameterf (GLenum target, GLenum pname, GLfloat param);
extern void glTexParameterfv (GLenum target, GLenum pname, const GLfloat *params);
extern void glTexParameteri (GLenum target, GLenum pname, GLint param);
extern void glTexParameteriv (GLenum target, GLenum pname, const GLint *params);
extern void glTexSubImage1D (GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLenum type, const GLvoid *pixels);
extern void glTexSubImage2D (GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLenum type, const GLvoid *pixels);
extern void glTexSubImage3D (GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, const GLvoid *pixels);
extern void glTranslated (GLdouble x, GLdouble y, GLdouble z);
extern void glTranslatef (GLfloat x, GLfloat y, GLfloat z);
extern void glVertex2d (GLdouble x, GLdouble y);
extern void glVertex2dv (const GLdouble *v);
extern void glVertex2f (GLfloat x, GLfloat y);
extern void glVertex2fv (const GLfloat *v);
extern void glVertex2i (GLint x, GLint y);
extern void glVertex2iv (const GLint *v);
extern void glVertex2s (GLshort x, GLshort y);
extern void glVertex2sv (const GLshort *v);
extern void glVertex3d (GLdouble x, GLdouble y, GLdouble z);
extern void glVertex3dv (const GLdouble *v);
extern void glVertex3f (GLfloat x, GLfloat y, GLfloat z);
extern void glVertex3fv (const GLfloat *v);
extern void glVertex3i (GLint x, GLint y, GLint z);
extern void glVertex3iv (const GLint *v);
extern void glVertex3s (GLshort x, GLshort y, GLshort z);
extern void glVertex3sv (const GLshort *v);
extern void glVertex4d (GLdouble x, GLdouble y, GLdouble z, GLdouble w);
extern void glVertex4dv (const GLdouble *v);
extern void glVertex4f (GLfloat x, GLfloat y, GLfloat z, GLfloat w);
extern void glVertex4fv (const GLfloat *v);
extern void glVertex4i (GLint x, GLint y, GLint z, GLint w);
extern void glVertex4iv (const GLint *v);
extern void glVertex4s (GLshort x, GLshort y, GLshort z, GLshort w);
extern void glVertex4sv (const GLshort *v);
extern void glVertexPointer (GLint size, GLenum type, GLsizei stride, const GLvoid *pointer);
extern void glViewport (GLint x, GLint y, GLsizei width, GLsizei height);
extern void glSampleCoverage (GLclampf value, GLboolean invert);
extern void glLoadTransposeMatrixf (const GLfloat *m);
extern void glLoadTransposeMatrixd (const GLdouble *m);
extern void glMultTransposeMatrixf (const GLfloat *m);
extern void glMultTransposeMatrixd (const GLdouble *m);
extern void glCompressedTexImage3D (GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLsizei imageSize, const GLvoid *data);
extern void glCompressedTexImage2D (GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLint border, GLsizei imageSize, const GLvoid *data);
extern void glCompressedTexImage1D (GLenum target, GLint level, GLenum internalformat, GLsizei width, GLint border, GLsizei imageSize, const GLvoid *data);
extern void glCompressedTexSubImage3D (GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLsizei imageSize, const GLvoid *data);
extern void glCompressedTexSubImage2D (GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLsizei imageSize, const GLvoid *data);
extern void glCompressedTexSubImage1D (GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLsizei imageSize, const GLvoid *data);
extern void glGetCompressedTexImage (GLenum target, GLint lod, GLvoid *img);
extern void glActiveTexture (GLenum texture);
extern void glClientActiveTexture (GLenum texture);
extern void glMultiTexCoord1d (GLenum target, GLdouble s);
extern void glMultiTexCoord1dv (GLenum target, const GLdouble *v);
extern void glMultiTexCoord1f (GLenum target, GLfloat s);
extern void glMultiTexCoord1fv (GLenum target, const GLfloat *v);
extern void glMultiTexCoord1i (GLenum target, GLint s);
extern void glMultiTexCoord1iv (GLenum target, const GLint *v);
extern void glMultiTexCoord1s (GLenum target, GLshort s);
extern void glMultiTexCoord1sv (GLenum target, const GLshort *v);
extern void glMultiTexCoord2d (GLenum target, GLdouble s, GLdouble t);
extern void glMultiTexCoord2dv (GLenum target, const GLdouble *v);
extern void glMultiTexCoord2f (GLenum target, GLfloat s, GLfloat t);
extern void glMultiTexCoord2fv (GLenum target, const GLfloat *v);
extern void glMultiTexCoord2i (GLenum target, GLint s, GLint t);
extern void glMultiTexCoord2iv (GLenum target, const GLint *v);
extern void glMultiTexCoord2s (GLenum target, GLshort s, GLshort t);
extern void glMultiTexCoord2sv (GLenum target, const GLshort *v);
extern void glMultiTexCoord3d (GLenum target, GLdouble s, GLdouble t, GLdouble r);
extern void glMultiTexCoord3dv (GLenum target, const GLdouble *v);
extern void glMultiTexCoord3f (GLenum target, GLfloat s, GLfloat t, GLfloat r);
extern void glMultiTexCoord3fv (GLenum target, const GLfloat *v);
extern void glMultiTexCoord3i (GLenum target, GLint s, GLint t, GLint r);
extern void glMultiTexCoord3iv (GLenum target, const GLint *v);
extern void glMultiTexCoord3s (GLenum target, GLshort s, GLshort t, GLshort r);
extern void glMultiTexCoord3sv (GLenum target, const GLshort *v);
extern void glMultiTexCoord4d (GLenum target, GLdouble s, GLdouble t, GLdouble r, GLdouble q);
extern void glMultiTexCoord4dv (GLenum target, const GLdouble *v);
extern void glMultiTexCoord4f (GLenum target, GLfloat s, GLfloat t, GLfloat r, GLfloat q);
extern void glMultiTexCoord4fv (GLenum target, const GLfloat *v);
extern void glMultiTexCoord4i (GLenum target, GLint s, GLint t, GLint r, GLint q);
extern void glMultiTexCoord4iv (GLenum target, const GLint *v);
extern void glMultiTexCoord4s (GLenum target, GLshort s, GLshort t, GLshort r, GLshort q);
extern void glMultiTexCoord4sv (GLenum target, const GLshort *v);
extern void glFogCoordf (GLfloat coord);
extern void glFogCoordfv (const GLfloat *coord);
extern void glFogCoordd (GLdouble coord);
extern void glFogCoorddv (const GLdouble *coord);
extern void glFogCoordPointer (GLenum type, GLsizei stride, const GLvoid *pointer);
extern void glSecondaryColor3b (GLbyte red, GLbyte green, GLbyte blue);
extern void glSecondaryColor3bv (const GLbyte *v);
extern void glSecondaryColor3d (GLdouble red, GLdouble green, GLdouble blue);
extern void glSecondaryColor3dv (const GLdouble *v);
extern void glSecondaryColor3f (GLfloat red, GLfloat green, GLfloat blue);
extern void glSecondaryColor3fv (const GLfloat *v);
extern void glSecondaryColor3i (GLint red, GLint green, GLint blue);
extern void glSecondaryColor3iv (const GLint *v);
extern void glSecondaryColor3s (GLshort red, GLshort green, GLshort blue);
extern void glSecondaryColor3sv (const GLshort *v);
extern void glSecondaryColor3ub (GLubyte red, GLubyte green, GLubyte blue);
extern void glSecondaryColor3ubv (const GLubyte *v);
extern void glSecondaryColor3ui (GLuint red, GLuint green, GLuint blue);
extern void glSecondaryColor3uiv (const GLuint *v);
extern void glSecondaryColor3us (GLushort red, GLushort green, GLushort blue);
extern void glSecondaryColor3usv (const GLushort *v);
extern void glSecondaryColorPointer (GLint size, GLenum type, GLsizei stride, const GLvoid *pointer);
extern void glPointParameterf (GLenum pname, GLfloat param);
extern void glPointParameterfv (GLenum pname, const GLfloat *params);
extern void glPointParameteri (GLenum pname, GLint param);
extern void glPointParameteriv (GLenum pname, const GLint *params);
extern void glBlendFuncSeparate (GLenum srcRGB, GLenum dstRGB, GLenum srcAlpha, GLenum dstAlpha);
extern void glMultiDrawArrays (GLenum mode, const GLint *first, const GLsizei *count, GLsizei primcount);
extern void glMultiDrawElements (GLenum mode, const GLsizei *count, GLenum type, const GLvoid* const *indices, GLsizei primcount);
extern void glWindowPos2d (GLdouble x, GLdouble y);
extern void glWindowPos2dv (const GLdouble *v);
extern void glWindowPos2f (GLfloat x, GLfloat y);
extern void glWindowPos2fv (const GLfloat *v);
extern void glWindowPos2i (GLint x, GLint y);
extern void glWindowPos2iv (const GLint *v);
extern void glWindowPos2s (GLshort x, GLshort y);
extern void glWindowPos2sv (const GLshort *v);
extern void glWindowPos3d (GLdouble x, GLdouble y, GLdouble z);
extern void glWindowPos3dv (const GLdouble *v);
extern void glWindowPos3f (GLfloat x, GLfloat y, GLfloat z);
extern void glWindowPos3fv (const GLfloat *v);
extern void glWindowPos3i (GLint x, GLint y, GLint z);
extern void glWindowPos3iv (const GLint *v);
extern void glWindowPos3s (GLshort x, GLshort y, GLshort z);
extern void glWindowPos3sv (const GLshort *v);
extern void glGenQueries (GLsizei n, GLuint *ids);
extern void glDeleteQueries (GLsizei n, const GLuint *ids);
extern GLboolean glIsQuery (GLuint id);
extern void glBeginQuery (GLenum target, GLuint id);
extern void glEndQuery (GLenum target);
extern void glGetQueryiv (GLenum target, GLenum pname, GLint *params);
extern void glGetQueryObjectiv (GLuint id, GLenum pname, GLint *params);
extern void glGetQueryObjectuiv (GLuint id, GLenum pname, GLuint *params);
extern void glBindBuffer (GLenum target, GLuint buffer);
extern void glDeleteBuffers (GLsizei n, const GLuint *buffers);
extern void glGenBuffers (GLsizei n, GLuint *buffers);
extern GLboolean glIsBuffer (GLuint buffer);
extern void glBufferData (GLenum target, GLsizeiptr size, const GLvoid *data, GLenum usage);
extern void glBufferSubData (GLenum target, GLintptr offset, GLsizeiptr size, const GLvoid *data);
extern void glGetBufferSubData (GLenum target, GLintptr offset, GLsizeiptr size, GLvoid *data);
extern GLvoid *glMapBuffer (GLenum target, GLenum access);
extern GLboolean glUnmapBuffer (GLenum target);
extern void glGetBufferParameteriv (GLenum target, GLenum pname, GLint *params);
extern void glGetBufferPointerv (GLenum target, GLenum pname, GLvoid **params);
extern void glDrawBuffers (GLsizei n, const GLenum *bufs);
extern void glVertexAttrib1d (GLuint index, GLdouble x);
extern void glVertexAttrib1dv (GLuint index, const GLdouble *v);
extern void glVertexAttrib1f (GLuint index, GLfloat x);
extern void glVertexAttrib1fv (GLuint index, const GLfloat *v);
extern void glVertexAttrib1s (GLuint index, GLshort x);
extern void glVertexAttrib1sv (GLuint index, const GLshort *v);
extern void glVertexAttrib2d (GLuint index, GLdouble x, GLdouble y);
extern void glVertexAttrib2dv (GLuint index, const GLdouble *v);
extern void glVertexAttrib2f (GLuint index, GLfloat x, GLfloat y);
extern void glVertexAttrib2fv (GLuint index, const GLfloat *v);
extern void glVertexAttrib2s (GLuint index, GLshort x, GLshort y);
extern void glVertexAttrib2sv (GLuint index, const GLshort *v);
extern void glVertexAttrib3d (GLuint index, GLdouble x, GLdouble y, GLdouble z);
extern void glVertexAttrib3dv (GLuint index, const GLdouble *v);
extern void glVertexAttrib3f (GLuint index, GLfloat x, GLfloat y, GLfloat z);
extern void glVertexAttrib3fv (GLuint index, const GLfloat *v);
extern void glVertexAttrib3s (GLuint index, GLshort x, GLshort y, GLshort z);
extern void glVertexAttrib3sv (GLuint index, const GLshort *v);
extern void glVertexAttrib4Nbv (GLuint index, const GLbyte *v);
extern void glVertexAttrib4Niv (GLuint index, const GLint *v);
extern void glVertexAttrib4Nsv (GLuint index, const GLshort *v);
extern void glVertexAttrib4Nub (GLuint index, GLubyte x, GLubyte y, GLubyte z, GLubyte w);
extern void glVertexAttrib4Nubv (GLuint index, const GLubyte *v);
extern void glVertexAttrib4Nuiv (GLuint index, const GLuint *v);
extern void glVertexAttrib4Nusv (GLuint index, const GLushort *v);
extern void glVertexAttrib4bv (GLuint index, const GLbyte *v);
extern void glVertexAttrib4d (GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w);
extern void glVertexAttrib4dv (GLuint index, const GLdouble *v);
extern void glVertexAttrib4f (GLuint index, GLfloat x, GLfloat y, GLfloat z, GLfloat w);
extern void glVertexAttrib4fv (GLuint index, const GLfloat *v);
extern void glVertexAttrib4iv (GLuint index, const GLint *v);
extern void glVertexAttrib4s (GLuint index, GLshort x, GLshort y, GLshort z, GLshort w);
extern void glVertexAttrib4sv (GLuint index, const GLshort *v);
extern void glVertexAttrib4ubv (GLuint index, const GLubyte *v);
extern void glVertexAttrib4uiv (GLuint index, const GLuint *v);
extern void glVertexAttrib4usv (GLuint index, const GLushort *v);
extern void glVertexAttribPointer (GLuint index, GLint size, GLenum type, GLboolean normalized, GLsizei stride, const GLvoid *pointer);
extern void glEnableVertexAttribArray (GLuint index);
extern void glDisableVertexAttribArray (GLuint index);
extern void glGetVertexAttribdv (GLuint index, GLenum pname, GLdouble *params);
extern void glGetVertexAttribfv (GLuint index, GLenum pname, GLfloat *params);
extern void glGetVertexAttribiv (GLuint index, GLenum pname, GLint *params);
extern void glGetVertexAttribPointerv (GLuint index, GLenum pname, GLvoid **pointer);
extern void glDeleteShader (GLuint shader);
extern void glDetachShader (GLuint program, GLuint shader);
extern GLuint glCreateShader (GLenum type);
extern void glShaderSource (GLuint shader, GLsizei count, const GLchar* const *string, const GLint *length);
extern void glCompileShader (GLuint shader);
extern GLuint glCreateProgram (void);
extern void glAttachShader (GLuint program, GLuint shader);
extern void glLinkProgram (GLuint program);
extern void glUseProgram (GLuint program);
extern void glDeleteProgram (GLuint program);
extern void glValidateProgram (GLuint program);
extern void glUniform1f (GLint location, GLfloat v0);
extern void glUniform2f (GLint location, GLfloat v0, GLfloat v1);
extern void glUniform3f (GLint location, GLfloat v0, GLfloat v1, GLfloat v2);
extern void glUniform4f (GLint location, GLfloat v0, GLfloat v1, GLfloat v2, GLfloat v3);
extern void glUniform1i (GLint location, GLint v0);
extern void glUniform2i (GLint location, GLint v0, GLint v1);
extern void glUniform3i (GLint location, GLint v0, GLint v1, GLint v2);
extern void glUniform4i (GLint location, GLint v0, GLint v1, GLint v2, GLint v3);
extern void glUniform1fv (GLint location, GLsizei count, const GLfloat *value);
extern void glUniform2fv (GLint location, GLsizei count, const GLfloat *value);
extern void glUniform3fv (GLint location, GLsizei count, const GLfloat *value);
extern void glUniform4fv (GLint location, GLsizei count, const GLfloat *value);
extern void glUniform1iv (GLint location, GLsizei count, const GLint *value);
extern void glUniform2iv (GLint location, GLsizei count, const GLint *value);
extern void glUniform3iv (GLint location, GLsizei count, const GLint *value);
extern void glUniform4iv (GLint location, GLsizei count, const GLint *value);
extern void glUniformMatrix2fv (GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
extern void glUniformMatrix3fv (GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
extern void glUniformMatrix4fv (GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
extern GLboolean glIsShader (GLuint shader);
extern GLboolean glIsProgram (GLuint program);
extern void glGetShaderiv (GLuint shader, GLenum pname, GLint *params);
extern void glGetProgramiv (GLuint program, GLenum pname, GLint *params);
extern void glGetAttachedShaders (GLuint program, GLsizei maxCount, GLsizei *count, GLuint *shaders);
extern void glGetShaderInfoLog (GLuint shader, GLsizei bufSize, GLsizei *length, GLchar *infoLog);
extern void glGetProgramInfoLog (GLuint program, GLsizei bufSize, GLsizei *length, GLchar *infoLog);
extern GLint glGetUniformLocation (GLuint program, const GLchar *name);
extern void glGetActiveUniform (GLuint program, GLuint index, GLsizei bufSize, GLsizei *length, GLint *size, GLenum *type, GLchar *name);
extern void glGetUniformfv (GLuint program, GLint location, GLfloat *params);
extern void glGetUniformiv (GLuint program, GLint location, GLint *params);
extern void glGetShaderSource (GLuint shader, GLsizei bufSize, GLsizei *length, GLchar *source);
extern void glBindAttribLocation (GLuint program, GLuint index, const GLchar *name);
extern void glGetActiveAttrib (GLuint program, GLuint index, GLsizei bufSize, GLsizei *length, GLint *size, GLenum *type, GLchar *name);
extern GLint glGetAttribLocation (GLuint program, const GLchar *name);
extern void glStencilFuncSeparate (GLenum face, GLenum func, GLint ref, GLuint mask);
extern void glStencilOpSeparate (GLenum face, GLenum fail, GLenum zfail, GLenum zpass);
extern void glStencilMaskSeparate (GLenum face, GLuint mask);
extern void glUniformMatrix2x3fv (GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
extern void glUniformMatrix3x2fv (GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
extern void glUniformMatrix2x4fv (GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
extern void glUniformMatrix4x2fv (GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
extern void glUniformMatrix3x4fv (GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
extern void glUniformMatrix4x3fv (GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
/* + END   ./OpenGL/gl.h */
]]
return require 'ffi.load' 'GL'
