local ffi = require 'ffi'

ffi.cdef[[
/* ++++ BEGIN C:/Program Files (x86)/Windows Kits/10/include/10.0.22621.0/ucrt/process.h */
/* +++++ BEGIN C:/Program Files (x86)/Windows Kits/10/include/10.0.22621.0/ucrt/corecrt_startup.h */
/* ++++++ BEGIN C:/Program Files (x86)/Windows Kits/10/include/10.0.22621.0/ucrt/math.h */
/* +++++++ BEGIN C:/Program Files (x86)/Windows Kits/10/include/10.0.22621.0/ucrt/corecrt_math.h */
/* #pragma warning(push) */
/* #pragma warning(disable: _UCRT_DISABLED_WARNINGS) */
struct _exception {
	int type;
	char* name;
	double arg1;
	double arg2;
	double retval;
};
struct _complex {
	double x, y;
};
typedef float float_t;
typedef double double_t;
extern double const _HUGE;
/* #define INFINITY   ((float)(_HUGE_ENUF * _HUGE_ENUF)) ### string, not number "((float)(_HUGE_ENUF * _HUGE_ENUF))" */
/* #define HUGE_VAL   ((double)INFINITY) ### string, not number "((double)INFINITY)" */
/* #define HUGE_VALF  ((float)INFINITY) ### string, not number "((float)INFINITY)" */
/* #define HUGE_VALL  ((long double)INFINITY) ### string, not number "((long double)INFINITY)" */
/* #define NAN        (-(float)(INFINITY * 0.0F)) ### string, not number "(-(float)(INFINITY * 0.0F))" */
enum { FP_INFINITE = 1 };
enum { FP_NAN = 2 };
enum { FP_NORMAL = -1 };
enum { FP_SUBNORMAL = -2 };
enum { FP_ZERO = 0 };
enum { FP_ILOGB0 = -2147483648 };
enum { FP_ILOGBNAN = 2147483647 };
enum { MATH_ERRNO = 1 };
enum { MATH_ERREXCEPT = 2 };
enum { math_errhandling = 3 };
void __cdecl _fperrraise( int _Except);
short __cdecl _dclass( double _X);
short __cdecl _ldclass( long double _X);
short __cdecl _fdclass( float _X);
int __cdecl _dsign( double _X);
int __cdecl _ldsign( long double _X);
int __cdecl _fdsign( float _X);
int __cdecl _dpcomp( double _X, double _Y);
int __cdecl _ldpcomp( long double _X, long double _Y);
int __cdecl _fdpcomp( float _X, float _Y);
short __cdecl _dtest( double* _Px);
short __cdecl _ldtest( long double* _Px);
short __cdecl _fdtest( float* _Px);
short __cdecl _d_int( double* _Px, short _Xexp);
short __cdecl _ld_int( long double* _Px, short _Xexp);
short __cdecl _fd_int( float* _Px, short _Xexp);
short __cdecl _dscale( double* _Px, long _Lexp);
short __cdecl _ldscale( long double* _Px, long _Lexp);
short __cdecl _fdscale( float* _Px, long _Lexp);
short __cdecl _dunscale( short* _Pex, double* _Px);
short __cdecl _ldunscale( short* _Pex, long double* _Px);
short __cdecl _fdunscale( short* _Pex, float* _Px);
short __cdecl _dexp( double* _Px, double _Y, long _Eoff);
short __cdecl _ldexp( long double* _Px, long double _Y, long _Eoff);
short __cdecl _fdexp( float* _Px, float _Y, long _Eoff);
short __cdecl _dnorm( unsigned short* _Ps);
short __cdecl _fdnorm( unsigned short* _Ps);
double __cdecl _dpoly( double _X, double const* _Tab, int _N);
long double __cdecl _ldpoly( long double _X, long double const* _Tab, int _N);
float __cdecl _fdpoly( float _X, float const* _Tab, int _N);
double __cdecl _dlog( double _X, int _Baseflag);
long double __cdecl _ldlog( long double _X, int _Baseflag);
float __cdecl _fdlog( float _X, int _Baseflag);
double __cdecl _dsin( double _X, unsigned int _Qoff);
long double __cdecl _ldsin( long double _X, unsigned int _Qoff);
float __cdecl _fdsin( float _X, unsigned int _Qoff);
typedef union {
	unsigned short _Sh[4];
	double _Val;
} _double_val;
typedef union {
	unsigned short _Sh[2];
	float _Val;
} _float_val;
typedef union {
	unsigned short _Sh[4];
	long double _Val;
} _ldouble_val;
typedef union {
	unsigned short _Word[4];
	float _Float;
	double _Double;
	long double _Long_double;
} _float_const;
extern const _float_const _Denorm_C, _Inf_C, _Nan_C, _Snan_C, _Hugeval_C;
extern const _float_const _FDenorm_C, _FInf_C, _FNan_C, _FSnan_C;
extern const _float_const _LDenorm_C, _LInf_C, _LNan_C, _LSnan_C;
extern const _float_const _Eps_C, _Rteps_C;
extern const _float_const _FEps_C, _FRteps_C;
extern const _float_const _LEps_C, _LRteps_C;
extern const double _Zero_C, _Xbig_C;
extern const float _FZero_C, _FXbig_C;
extern const long double _LZero_C, _LXbig_C;
int __cdecl abs( int _X);
long __cdecl labs( long _X);
long long __cdecl llabs( long long _X);
double __cdecl acos( double _X);
double __cdecl asin( double _X);
double __cdecl atan( double _X);
double __cdecl atan2( double _Y, double _X);
double __cdecl cos( double _X);
double __cdecl cosh( double _X);
double __cdecl exp( double _X);
double __cdecl fabs( double _X);
double __cdecl fmod( double _X, double _Y);
double __cdecl log( double _X);
double __cdecl log10( double _X);
double __cdecl pow( double _X, double _Y);
double __cdecl sin( double _X);
double __cdecl sinh( double _X);
double __cdecl sqrt( double _X);
double __cdecl tan( double _X);
double __cdecl tanh( double _X);
double __cdecl acosh( double _X);
double __cdecl asinh( double _X);
double __cdecl atanh( double _X);
double __cdecl atof( char const* _String);
double __cdecl _atof_l( char const* _String, _locale_t _Locale);
double __cdecl _cabs( struct _complex _Complex_value);
double __cdecl cbrt( double _X);
double __cdecl ceil( double _X);
double __cdecl _chgsign( double _X);
double __cdecl copysign( double _Number, double _Sign);
double __cdecl _copysign( double _Number, double _Sign);
double __cdecl erf( double _X);
double __cdecl erfc( double _X);
double __cdecl exp2( double _X);
double __cdecl expm1( double _X);
double __cdecl fdim( double _X, double _Y);
double __cdecl floor( double _X);
double __cdecl fma( double _X, double _Y, double _Z);
double __cdecl fmax( double _X, double _Y);
double __cdecl fmin( double _X, double _Y);
double __cdecl frexp( double _X, int* _Y);
double __cdecl hypot( double _X, double _Y);
double __cdecl _hypot( double _X, double _Y);
int __cdecl ilogb( double _X);
double __cdecl ldexp( double _X, int _Y);
double __cdecl lgamma( double _X);
long long __cdecl llrint( double _X);
long long __cdecl llround( double _X);
double __cdecl log1p( double _X);
double __cdecl log2( double _X);
double __cdecl logb( double _X);
long __cdecl lrint( double _X);
long __cdecl lround( double _X);
int __cdecl _matherr( struct _exception* _Except);
double __cdecl modf( double _X, double* _Y);
double __cdecl nan( char const* _X);
double __cdecl nearbyint( double _X);
double __cdecl nextafter( double _X, double _Y);
double __cdecl nexttoward( double _X, long double _Y);
double __cdecl remainder( double _X, double _Y);
double __cdecl remquo( double _X, double _Y, int* _Z);
double __cdecl rint( double _X);
double __cdecl round( double _X);
double __cdecl scalbln( double _X, long _Y);
double __cdecl scalbn( double _X, int _Y);
double __cdecl tgamma( double _X);
double __cdecl trunc( double _X);
double __cdecl _j0( double _X );
double __cdecl _j1( double _X );
double __cdecl _jn(int _X, double _Y);
double __cdecl _y0( double _X);
double __cdecl _y1( double _X);
double __cdecl _yn( int _X, double _Y);
float __cdecl acoshf( float _X);
float __cdecl asinhf( float _X);
float __cdecl atanhf( float _X);
float __cdecl cbrtf( float _X);
float __cdecl _chgsignf( float _X);
float __cdecl copysignf( float _Number, float _Sign);
float __cdecl _copysignf( float _Number, float _Sign);
float __cdecl erff( float _X);
float __cdecl erfcf( float _X);
float __cdecl expm1f( float _X);
float __cdecl exp2f( float _X);
float __cdecl fdimf( float _X, float _Y);
float __cdecl fmaf( float _X, float _Y, float _Z);
float __cdecl fmaxf( float _X, float _Y);
float __cdecl fminf( float _X, float _Y);
float __cdecl _hypotf( float _X, float _Y);
int __cdecl ilogbf( float _X);
float __cdecl lgammaf( float _X);
long long __cdecl llrintf( float _X);
long long __cdecl llroundf( float _X);
float __cdecl log1pf( float _X);
float __cdecl log2f( float _X);
float __cdecl logbf( float _X);
long __cdecl lrintf( float _X);
long __cdecl lroundf( float _X);
float __cdecl nanf( char const* _X);
float __cdecl nearbyintf( float _X);
float __cdecl nextafterf( float _X, float _Y);
float __cdecl nexttowardf( float _X, long double _Y);
float __cdecl remainderf( float _X, float _Y);
float __cdecl remquof( float _X, float _Y, int* _Z);
float __cdecl rintf( float _X);
float __cdecl roundf( float _X);
float __cdecl scalblnf( float _X, long _Y);
float __cdecl scalbnf( float _X, int _Y);
float __cdecl tgammaf( float _X);
float __cdecl truncf( float _X);
float __cdecl _logbf( float _X);
float __cdecl _nextafterf( float _X, float _Y);
int __cdecl _finitef( float _X);
int __cdecl _isnanf( float _X);
int __cdecl _fpclassf( float _X);
int __cdecl _set_FMA3_enable( int _Flag);
int __cdecl _get_FMA3_enable(void);
float __cdecl acosf( float _X);
float __cdecl asinf( float _X);
float __cdecl atan2f( float _Y, float _X);
float __cdecl atanf( float _X);
float __cdecl ceilf( float _X);
float __cdecl cosf( float _X);
float __cdecl coshf( float _X);
float __cdecl expf( float _X);
float __cdecl floorf( float _X);
float __cdecl fmodf( float _X, float _Y);
float __cdecl log10f( float _X);
float __cdecl logf( float _X);
float __cdecl modff( float _X, float *_Y);
float __cdecl powf( float _X, float _Y);
float __cdecl sinf( float _X);
float __cdecl sinhf( float _X);
float __cdecl sqrtf( float _X);
float __cdecl tanf( float _X);
float __cdecl tanhf( float _X);
long double __cdecl acoshl( long double _X);
long double __cdecl asinhl( long double _X);
long double __cdecl atanhl( long double _X);
long double __cdecl cbrtl( long double _X);
long double __cdecl copysignl( long double _Number, long double _Sign);
long double __cdecl erfl( long double _X);
long double __cdecl erfcl( long double _X);
long double __cdecl exp2l( long double _X);
long double __cdecl expm1l( long double _X);
long double __cdecl fdiml( long double _X, long double _Y);
long double __cdecl fmal( long double _X, long double _Y, long double _Z);
long double __cdecl fmaxl( long double _X, long double _Y);
long double __cdecl fminl( long double _X, long double _Y);
int __cdecl ilogbl( long double _X);
long double __cdecl lgammal( long double _X);
long long __cdecl llrintl( long double _X);
long long __cdecl llroundl( long double _X);
long double __cdecl log1pl( long double _X);
long double __cdecl log2l( long double _X);
long double __cdecl logbl( long double _X);
long __cdecl lrintl( long double _X);
long __cdecl lroundl( long double _X);
long double __cdecl nanl( char const* _X);
long double __cdecl nearbyintl( long double _X);
long double __cdecl nextafterl( long double _X, long double _Y);
long double __cdecl nexttowardl( long double _X, long double _Y);
long double __cdecl remainderl( long double _X, long double _Y);
long double __cdecl remquol( long double _X, long double _Y, int* _Z);
long double __cdecl rintl( long double _X);
long double __cdecl roundl( long double _X);
long double __cdecl scalblnl( long double _X, long _Y);
long double __cdecl scalbnl( long double _X, int _Y);
long double __cdecl tgammal( long double _X);
long double __cdecl truncl( long double _X);
enum { DOMAIN = 1 };
enum { SING = 2 };
enum { OVERFLOW = 3 };
enum { UNDERFLOW = 4 };
enum { TLOSS = 5 };
enum { PLOSS = 6 };
enum { matherr = 0 };
extern double HUGE;
double __cdecl j0( double _X);
double __cdecl j1( double _X);
double __cdecl jn( int _X, double _Y);
double __cdecl y0( double _X);
double __cdecl y1( double _X);
double __cdecl yn( int _X, double _Y);
/* #pragma warning(pop)  */
/* +++++++ END   C:/Program Files (x86)/Windows Kits/10/include/10.0.22621.0/ucrt/corecrt_math.h */
/* ++++++ END   C:/Program Files (x86)/Windows Kits/10/include/10.0.22621.0/ucrt/math.h */
/* ++++++ BEGIN C:/Program Files/Microsoft Visual Studio/2022/Community/VC/Tools/MSVC/14.41.34120/include/vcruntime_startup.h */
/* ++++++ END   C:/Program Files/Microsoft Visual Studio/2022/Community/VC/Tools/MSVC/14.41.34120/include/vcruntime_startup.h */
/* +++++ END   C:/Program Files (x86)/Windows Kits/10/include/10.0.22621.0/ucrt/corecrt_startup.h */
/* +++++ BEGIN C:/Program Files (x86)/Windows Kits/10/include/10.0.22621.0/ucrt/corecrt_wprocess.h */
/* #pragma warning(push) */
/* #pragma warning(disable: _UCRT_DISABLED_WARNINGS) */
intptr_t __cdecl _wexecl( wchar_t const* _FileName, wchar_t const* _ArgList, ...);
intptr_t __cdecl _wexecle( wchar_t const* _FileName, wchar_t const* _ArgList, ...);
intptr_t __cdecl _wexeclp( wchar_t const* _FileName, wchar_t const* _ArgList, ...);
intptr_t __cdecl _wexeclpe( wchar_t const* _FileName, wchar_t const* _ArgList, ...);
intptr_t __cdecl _wexecv( wchar_t const* _FileName, wchar_t const* const* _ArgList );
intptr_t __cdecl _wexecve( wchar_t const* _FileName, wchar_t const* const* _ArgList, wchar_t const* const* _Env );
intptr_t __cdecl _wexecvp( wchar_t const* _FileName, wchar_t const* const* _ArgList );
intptr_t __cdecl _wexecvpe( wchar_t const* _FileName, wchar_t const* const* _ArgList, wchar_t const* const* _Env );
intptr_t __cdecl _wspawnl( int _Mode, wchar_t const* _FileName, wchar_t const* _ArgList, ...);
intptr_t __cdecl _wspawnle( int _Mode, wchar_t const* _FileName, wchar_t const* _ArgList, ...);
intptr_t __cdecl _wspawnlp( int _Mode, wchar_t const* _FileName, wchar_t const* _ArgList, ...);
intptr_t __cdecl _wspawnlpe( int _Mode, wchar_t const* _FileName, wchar_t const* _ArgList, ...);
intptr_t __cdecl _wspawnv( int _Mode, wchar_t const* _FileName, wchar_t const* const* _ArgList );
intptr_t __cdecl _wspawnve( int _Mode, wchar_t const* _FileName, wchar_t const* const* _ArgList, wchar_t const* const* _Env );
intptr_t __cdecl _wspawnvp( int _Mode, wchar_t const* _FileName, wchar_t const* const* _ArgList );
intptr_t __cdecl _wspawnvpe( int _Mode, wchar_t const* _FileName, wchar_t const* const* _ArgList, wchar_t const* const* _Env );
int __cdecl _wsystem( wchar_t const* _Command );
/* #pragma warning(pop)  */
/* +++++ END   C:/Program Files (x86)/Windows Kits/10/include/10.0.22621.0/ucrt/corecrt_wprocess.h */
/* #pragma warning(push) */
/* #pragma warning(disable: _UCRT_DISABLED_WARNINGS) */
void __cdecl exit( int _Code);
void __cdecl _exit( int _Code);
void __cdecl _Exit( int _Code);
void __cdecl quick_exit( int _Code);
void __cdecl abort(void);
int __cdecl system( char const* _Command);
void __cdecl _cexit(void);
void __cdecl _c_exit(void);
typedef void (__stdcall *_tls_callback_type)(void *, unsigned long, void *);
void __cdecl _register_thread_local_exe_atexit_callback( _tls_callback_type _Callback);
typedef void (__cdecl* _beginthread_proc_type )(void*);
typedef unsigned (__stdcall* _beginthreadex_proc_type)(void*);
uintptr_t __cdecl _beginthread( _beginthread_proc_type _StartAddress, unsigned _StackSize, void* _ArgList );
void __cdecl _endthread(void);
uintptr_t __cdecl _beginthreadex( void* _Security, unsigned _StackSize, _beginthreadex_proc_type _StartAddress, void* _ArgList, unsigned _InitFlag, unsigned* _ThrdAddr );
void __cdecl _endthreadex( unsigned _ReturnCode );
int __cdecl _getpid(void);
intptr_t __cdecl _cwait( int* _TermStat, intptr_t _ProcHandle, int _Action );
intptr_t __cdecl _execl( char const* _FileName, char const* _Arguments, ...);
intptr_t __cdecl _execle( char const* _FileName, char const* _Arguments, ...);
intptr_t __cdecl _execlp( char const* _FileName, char const* _Arguments, ...);
intptr_t __cdecl _execlpe( char const* _FileName, char const* _Arguments, ...);
intptr_t __cdecl _execv( char const* _FileName, char const* const* _Arguments );
intptr_t __cdecl _execve( char const* _FileName, char const* const* _Arguments, char const* const* _Environment );
intptr_t __cdecl _execvp( char const* _FileName, char const* const* _Arguments );
intptr_t __cdecl _execvpe( char const* _FileName, char const* const* _Arguments, char const* const* _Environment );
intptr_t __cdecl _spawnl( int _Mode, char const* _FileName, char const* _Arguments, ...);
intptr_t __cdecl _spawnle( int _Mode, char const* _FileName, char const* _Arguments, ...);
intptr_t __cdecl _spawnlp( int _Mode, char const* _FileName, char const* _Arguments, ...);
intptr_t __cdecl _spawnlpe( int _Mode, char const* _FileName, char const* _Arguments, ...);
intptr_t __cdecl _spawnv( int _Mode, char const* _FileName, char const* const* _Arguments );
intptr_t __cdecl _spawnve( int _Mode, char const* _FileName, char const* const* _Arguments, char const* const* _Environment );
intptr_t __cdecl _spawnvp( int _Mode, char const* _FileName, char const* const* _Arguments );
intptr_t __cdecl _spawnvpe( int _Mode, char const* _FileName, char const* const* _Arguments, char const* const* _Environment );
intptr_t __cdecl _loaddll( char* _FileName );
int __cdecl _unloaddll( intptr_t _Handle );
typedef int (__cdecl* _GetDllProcAddrProcType)(void);
_GetDllProcAddrProcType __cdecl _getdllprocaddr( intptr_t _Handle, char* _ProcedureName, intptr_t _Ordinal );
enum { P_WAIT = 0 };
enum { P_NOWAIT = 1 };
enum { P_OVERLAY = 2 };
enum { OLD_P_OVERLAY = 2 };
enum { P_NOWAITO = 3 };
enum { P_DETACH = 4 };
enum { WAIT_CHILD = 0 };
enum { WAIT_GRANDCHILD = 1 };
intptr_t __cdecl cwait( int* _TermStat, intptr_t _ProcHandle, int _Action );
intptr_t __cdecl execl( char const* _FileName, char const* _Arguments, ...);
intptr_t __cdecl execle( char const* _FileName, char const* _Arguments, ...);
intptr_t __cdecl execlp( char const* _FileName, char const* _Arguments, ...);
intptr_t __cdecl execlpe( char const* _FileName, char const* _Arguments, ...);
intptr_t __cdecl execv( char const* _FileName, char const* const* _Arguments );
intptr_t __cdecl execve( char const* _FileName, char const* const* _Arguments, char const* const* _Environment );
intptr_t __cdecl execvp( char const* _FileName, char const* const* _Arguments );
intptr_t __cdecl execvpe( char const* _FileName, char const* const* _Arguments, char const* const* _Environment );
intptr_t __cdecl spawnl( int _Mode, char const* _FileName, char const* _Arguments, ...);
intptr_t __cdecl spawnle( int _Mode, char const* _FileName, char const* _Arguments, ...);
intptr_t __cdecl spawnlp( int _Mode, char const* _FileName, char const* _Arguments, ...);
intptr_t __cdecl spawnlpe( int _Mode, char const* _FileName, char const* _Arguments, ...);
intptr_t __cdecl spawnv( int _Mode, char const* _FileName, char const* const* _Arguments);
intptr_t __cdecl spawnve( int _Mode, char const* _FileName, char const* const* _Arguments, char const* const* _Environment );
intptr_t __cdecl spawnvp( int _Mode, char const* _FileName, char const* const* _Arguments );
intptr_t __cdecl spawnvpe( int _Mode, char const* _FileName, char const* const* _Arguments, char const* const* _Environment );
int __cdecl getpid(void);
/* #pragma warning(pop)  */
/* ++++ END   C:/Program Files (x86)/Windows Kits/10/include/10.0.22621.0/ucrt/process.h */
]]
