local ffi  = require 'ffi'

require 'ffi.c.time'	-- time_t
require 'ffi.c.stdio'	-- FILE

local lib = 'libhdf5_openmpi'

local hdf5 = ffi.load(lib)

-- for gcc / ubuntu looks like off_t is defined in either unistd.h or stdio.h, and either are set via testing/setting __off_t_defined
-- in other words, the defs in here are getting more and more conditional ...
-- pretty soon a full set of headers + full preprocessor might be necessary
local code = [[
typedef long int __off_t;
typedef __off_t off_t;
typedef long int __ssize_t;
typedef __ssize_t ssize_t;

/* BEGIN /usr/include/hdf5/openmpi/hdf5.h */
/* BEGIN /usr/include/hdf5/openmpi/H5public.h */
/* BEGIN /usr/include/hdf5/openmpi/H5pubconf.h */
enum { H5_CXX_HAVE_OFFSETOF = 1 };
enum { H5_DEV_T_IS_SCALAR = 1 };
enum { H5_FORTRAN_C_LONG_DOUBLE_IS_UNIQUE = 1 };
enum { H5_FORTRAN_HAVE_C_LONG_DOUBLE = 1 };
enum { H5_FORTRAN_HAVE_C_SIZEOF = 1 };
enum { H5_FORTRAN_HAVE_SIZEOF = 1 };
enum { H5_FORTRAN_HAVE_STORAGE_SIZE = 1 };
enum { H5_HAVE_ALARM = 1 };
enum { H5_HAVE_ASPRINTF = 1 };
enum { H5_HAVE_ATTRIBUTE = 1 };
enum { H5_HAVE_C99_DESIGNATED_INITIALIZER = 1 };
enum { H5_HAVE_C99_FUNC = 1 };
enum { H5_HAVE_CLOCK_GETTIME = 1 };
enum { H5_HAVE_DIFFTIME = 1 };
enum { H5_HAVE_DIRENT_H = 1 };
enum { H5_HAVE_DLFCN_H = 1 };
enum { H5_HAVE_EMBEDDED_LIBINFO = 1 };
enum { H5_HAVE_FCNTL = 1 };
enum { H5_HAVE_FEATURES_H = 1 };
enum { H5_HAVE_FILTER_DEFLATE = 1 };
enum { H5_HAVE_FILTER_SZIP = 1 };
enum { H5_HAVE_FLOAT128 = 1 };
enum { H5_HAVE_FLOCK = 1 };
enum { H5_HAVE_FORK = 1 };
enum { H5_HAVE_FREXPF = 1 };
enum { H5_HAVE_FREXPL = 1 };
enum { H5_HAVE_FUNCTION = 1 };
enum { H5_HAVE_Fortran_INTEGER_SIZEOF_16 = 1 };
enum { H5_HAVE_GETHOSTNAME = 1 };
enum { H5_HAVE_GETPWUID = 1 };
enum { H5_HAVE_GETRUSAGE = 1 };
enum { H5_HAVE_GETTIMEOFDAY = 1 };
enum { H5_HAVE_INLINE = 1 };
enum { H5_HAVE_INTTYPES_H = 1 };
enum { H5_HAVE_IOCTL = 1 };
enum { H5_HAVE_LIBDL = 1 };
enum { H5_HAVE_LIBM = 1 };
enum { H5_HAVE_LIBSZ = 1 };
enum { H5_HAVE_LIBZ = 1 };
enum { H5_HAVE_LLROUND = 1 };
enum { H5_HAVE_LLROUNDF = 1 };
enum { H5_HAVE_LONGJMP = 1 };
enum { H5_HAVE_LROUND = 1 };
enum { H5_HAVE_LROUNDF = 1 };
enum { H5_HAVE_LSTAT = 1 };
enum { H5_HAVE_MEMORY_H = 1 };
enum { H5_HAVE_MPI_MULTI_LANG_Comm = 1 };
enum { H5_HAVE_MPI_MULTI_LANG_Info = 1 };
enum { H5_HAVE_PARALLEL = 1 };
enum { H5_HAVE_PREADWRITE = 1 };
enum { H5_HAVE_QUADMATH_H = 1 };
enum { H5_HAVE_RANDOM = 1 };
enum { H5_HAVE_RAND_R = 1 };
enum { H5_HAVE_ROUND = 1 };
enum { H5_HAVE_ROUNDF = 1 };
enum { H5_HAVE_SETJMP = 1 };
enum { H5_HAVE_SETJMP_H = 1 };
enum { H5_HAVE_SIGLONGJMP = 1 };
enum { H5_HAVE_SIGNAL = 1 };
enum { H5_HAVE_SIGPROCMASK = 1 };
enum { H5_HAVE_SNPRINTF = 1 };
enum { H5_HAVE_SRANDOM = 1 };
enum { H5_HAVE_STDBOOL_H = 1 };
enum { H5_HAVE_STDDEF_H = 1 };
enum { H5_HAVE_STDINT_H = 1 };
enum { H5_HAVE_STDLIB_H = 1 };
enum { H5_HAVE_STRDUP = 1 };
enum { H5_HAVE_STRINGS_H = 1 };
enum { H5_HAVE_STRING_H = 1 };
enum { H5_HAVE_STRTOLL = 1 };
enum { H5_HAVE_STRTOULL = 1 };
enum { H5_HAVE_SYMLINK = 1 };
enum { H5_HAVE_SYSTEM = 1 };
enum { H5_HAVE_SYS_FILE_H = 1 };
enum { H5_HAVE_SYS_IOCTL_H = 1 };
enum { H5_HAVE_SYS_RESOURCE_H = 1 };
enum { H5_HAVE_SYS_SOCKET_H = 1 };
enum { H5_HAVE_SYS_STAT_H = 1 };
enum { H5_HAVE_SYS_TIMEB_H = 1 };
enum { H5_HAVE_SYS_TIME_H = 1 };
enum { H5_HAVE_SYS_TYPES_H = 1 };
enum { H5_HAVE_SZLIB_H = 1 };
enum { H5_HAVE_TIMEZONE = 1 };
enum { H5_HAVE_TIOCGETD = 1 };
enum { H5_HAVE_TIOCGWINSZ = 1 };
enum { H5_HAVE_TMPFILE = 1 };
enum { H5_HAVE_TM_GMTOFF = 1 };
enum { H5_HAVE_UNISTD_H = 1 };
enum { H5_HAVE_VASPRINTF = 1 };
enum { H5_HAVE_VSNPRINTF = 1 };
enum { H5_HAVE_WAITPID = 1 };
enum { H5_HAVE_ZLIB_H = 1 };
enum { H5_HAVE___INLINE = 1 };
enum { H5_HAVE___INLINE__ = 1 };
enum { H5_INCLUDE_HL = 1 };
enum { H5_LDOUBLE_TO_LLONG_ACCURATE = 1 };
enum { H5_LLONG_TO_LDOUBLE_CORRECT = 1 };
enum { H5_PAC_C_MAX_REAL_PRECISION = 33 };
enum { H5_PAC_FC_MAX_REAL_PRECISION = 33 };
enum { H5_SIZEOF_BOOL = 1 };
enum { H5_SIZEOF_CHAR = 1 };
enum { H5_SIZEOF_DOUBLE = 8 };
enum { H5_SIZEOF_FLOAT = 4 };
enum { H5_SIZEOF_INT = 4 };
enum { H5_SIZEOF_INT16_T = 2 };
enum { H5_SIZEOF_INT32_T = 4 };
enum { H5_SIZEOF_INT64_T = 8 };
enum { H5_SIZEOF_INT8_T = 1 };
enum { H5_SIZEOF_INT_FAST16_T = 8 };
enum { H5_SIZEOF_INT_FAST32_T = 8 };
enum { H5_SIZEOF_INT_FAST64_T = 8 };
enum { H5_SIZEOF_INT_FAST8_T = 1 };
enum { H5_SIZEOF_INT_LEAST16_T = 2 };
enum { H5_SIZEOF_INT_LEAST32_T = 4 };
enum { H5_SIZEOF_INT_LEAST64_T = 8 };
enum { H5_SIZEOF_INT_LEAST8_T = 1 };
enum { H5_SIZEOF_LONG = 8 };
enum { H5_SIZEOF_LONG_DOUBLE = 16 };
enum { H5_SIZEOF_LONG_LONG = 8 };
enum { H5_SIZEOF_OFF_T = 8 };
enum { H5_SIZEOF_PTRDIFF_T = 8 };
enum { H5_SIZEOF_SHORT = 2 };
enum { H5_SIZEOF_SIZE_T = 8 };
enum { H5_SIZEOF_SSIZE_T = 8 };
enum { H5_SIZEOF_TIME_T = 8 };
enum { H5_SIZEOF_UINT16_T = 2 };
enum { H5_SIZEOF_UINT32_T = 4 };
enum { H5_SIZEOF_UINT64_T = 8 };
enum { H5_SIZEOF_UINT8_T = 1 };
enum { H5_SIZEOF_UINT_FAST16_T = 8 };
enum { H5_SIZEOF_UINT_FAST32_T = 8 };
enum { H5_SIZEOF_UINT_FAST64_T = 8 };
enum { H5_SIZEOF_UINT_FAST8_T = 1 };
enum { H5_SIZEOF_UINT_LEAST16_T = 2 };
enum { H5_SIZEOF_UINT_LEAST32_T = 4 };
enum { H5_SIZEOF_UINT_LEAST64_T = 8 };
enum { H5_SIZEOF_UINT_LEAST8_T = 1 };
enum { H5_SIZEOF_UNSIGNED = 4 };
enum { H5_SIZEOF__QUAD = 0 };
enum { H5_SIZEOF___FLOAT128 = 16 };
enum { H5_SIZEOF___INT64 = 0 };
enum { H5_STDC_HEADERS = 1 };
enum { H5_TIME_WITH_SYS_TIME = 1 };
enum { H5_USE_18_API_DEFAULT = 1 };
enum { H5_WANT_DATA_ACCURACY = 1 };
enum { H5_WANT_DCONV_EXCEPTION = 1 };
/* END /usr/include/hdf5/openmpi/H5pubconf.h */
/* BEGIN /usr/include/hdf5/openmpi/H5version.h */
enum { H5_USE_18_API = 1 };
enum { H5Acreate_vers = 2 };
enum { H5Aiterate_vers = 2 };
enum { H5Dcreate_vers = 2 };
enum { H5Dopen_vers = 2 };
enum { H5Eclear_vers = 2 };
enum { H5Eget_auto_vers = 2 };
enum { H5Eprint_vers = 2 };
enum { H5Epush_vers = 2 };
enum { H5Eset_auto_vers = 2 };
enum { H5Ewalk_vers = 2 };
enum { H5Fget_info_vers = 1 };
enum { H5Gcreate_vers = 2 };
enum { H5Gopen_vers = 2 };
enum { H5Pget_filter_vers = 2 };
enum { H5Pget_filter_by_id_vers = 2 };
enum { H5Pinsert_vers = 2 };
enum { H5Pregister_vers = 2 };
enum { H5Rdereference_vers = 1 };
enum { H5Rget_obj_type_vers = 2 };
enum { H5Tarray_create_vers = 2 };
enum { H5Tcommit_vers = 2 };
enum { H5Tget_array_dims_vers = 2 };
enum { H5Topen_vers = 2 };
enum { H5E_auto_t_vers = 2 };
enum { H5Z_class_t_vers = 2 };
/* END /usr/include/hdf5/openmpi/H5version.h */
enum { MPICH_SKIP_MPICXX = 1 };
enum { OMPI_SKIP_MPICXX = 1 };
/* BEGIN /usr/lib/x86_64-1-gnu/openmpi/include/mpi.h */
enum { OPAL_BUILD_PLATFORM_COMPILER_FAMILYID = 1 };
enum { OPAL_BUILD_PLATFORM_COMPILER_VERSION = 721408 };
enum { OPAL_STDC_HEADERS = 1 };
enum { OPAL_HAVE_ATTRIBUTE_DEPRECATED = 1 };
enum { OPAL_HAVE_ATTRIBUTE_DEPRECATED_ARGUMENT = 1 };
enum { OPAL_HAVE_ATTRIBUTE_ERROR = 1 };
enum { OPAL_HAVE_SYS_TIME_H = 1 };
enum { OPAL_HAVE_LONG_LONG = 1 };
enum { OPAL_MAX_DATAREP_STRING = 128 };
enum { OPAL_MAX_ERROR_STRING = 256 };
enum { OPAL_MAX_INFO_KEY = 36 };
enum { OPAL_MAX_INFO_VAL = 256 };
enum { OPAL_MAX_OBJECT_NAME = 64 };
enum { OPAL_MAX_PORT_NAME = 1024 };
enum { OPAL_MAX_PROCESSOR_NAME = 256 };
enum { OMPI_HAVE_FORTRAN_LOGICAL1 = 1 };
enum { OMPI_HAVE_FORTRAN_LOGICAL2 = 1 };
enum { OMPI_HAVE_FORTRAN_LOGICAL4 = 1 };
enum { OMPI_HAVE_FORTRAN_LOGICAL8 = 1 };
enum { OMPI_HAVE_FORTRAN_INTEGER1 = 1 };
enum { OMPI_HAVE_FORTRAN_INTEGER16 = 0 };
enum { OMPI_HAVE_FORTRAN_INTEGER2 = 1 };
enum { OMPI_HAVE_FORTRAN_INTEGER4 = 1 };
enum { OMPI_HAVE_FORTRAN_INTEGER8 = 1 };
enum { OMPI_HAVE_FORTRAN_REAL16 = 1 };
enum { OMPI_HAVE_FORTRAN_REAL2 = 0 };
enum { OMPI_HAVE_FORTRAN_REAL4 = 1 };
enum { OMPI_HAVE_FORTRAN_REAL8 = 1 };
enum { OMPI_ENABLE_MPI1_COMPAT = 0 };
enum { HAVE_FLOAT__COMPLEX = 1 };
enum { HAVE_DOUBLE__COMPLEX = 1 };
enum { HAVE_LONG_DOUBLE__COMPLEX = 1 };
enum { OMPI_MPI_OFFSET_SIZE = 8 };
enum { OMPI_BUILD_CXX_BINDINGS = 1 };
enum { OMPI_WANT_MPI_CXX_SEEK = 1 };
enum { OMPI_CXX_SUPPORTS_2D_CONST_CAST = 1 };
enum { OMPI_PARAM_CHECK = 1 };
enum { OMPI_WANT_MPI_INTERFACE_WARNING = 1 };
enum { OMPI_HAVE_CXX_EXCEPTION_SUPPORT = 0 };
enum { OMPI_MAJOR_VERSION = 4 };
enum { OMPI_MINOR_VERSION = 1 };
enum { OMPI_RELEASE_VERSION = 0 };
enum { OPAL_C_HAVE_VISIBILITY = 1 };
enum { OMPI_BUILDING = 0 };
enum { OPEN_MPI = 1 };
enum { MPI_VERSION = 3 };
enum { MPI_SUBVERSION = 1 };
/* BEGIN /usr/lib/x86_64-1-gnu/openmpi/include/mpi_portable_platform.h */
enum { PLATFORM_COMPILER_UNKNOWN = 1 };
enum { PLATFORM_COMPILER_GNU = 1 };
enum { PLATFORM_COMPILER_FAMILYID = 1 };
enum { PLATFORM_COMPILER_GNU_C = 1 };
/* END /usr/lib/x86_64-1-gnu/openmpi/include/mpi_portable_platform.h */
enum { OMPI_OMIT_MPI1_COMPAT_DECLS = 1 };
enum { OMPI_REMOVED_USE_STATIC_ASSERT = 1 };
typedef ptrdiff_t MPI_Aint;
typedef long long MPI_Offset;
typedef long long MPI_Count;
typedef struct ompi_communicator_t *MPI_Comm;
typedef struct ompi_datatype_t *MPI_Datatype;
typedef struct ompi_errhandler_t *MPI_Errhandler;
typedef struct ompi_file_t *MPI_File;
typedef struct ompi_group_t *MPI_Group;
typedef struct ompi_info_t *MPI_Info;
typedef struct ompi_op_t *MPI_Op;
typedef struct ompi_request_t *MPI_Request;
typedef struct ompi_message_t *MPI_Message;
typedef struct ompi_status_public_t MPI_Status;
typedef struct ompi_win_t *MPI_Win;
typedef struct mca_base_var_enum_t *MPI_T_enum;
typedef struct ompi_mpit_cvar_handle_t *MPI_T_cvar_handle;
typedef struct mca_base_pvar_handle_t *MPI_T_pvar_handle;
typedef struct mca_base_pvar_session_t *MPI_T_pvar_session;
struct ompi_status_public_t { int MPI_SOURCE;
int MPI_TAG;
int MPI_ERROR;
int _cancelled;
size_t _ucount;
};
typedef struct ompi_status_public_t ompi_status_public_t;
typedef int (MPI_Datarep_extent_function)(MPI_Datatype, MPI_Aint *, void *);
typedef int (MPI_Datarep_conversion_function)(void *, MPI_Datatype, int, void *, MPI_Offset, void *);
typedef void (MPI_Comm_errhandler_function)(MPI_Comm *, int *, ...);
typedef void (ompi_file_errhandler_fn)(MPI_File *, int *, ...);
typedef void (MPI_Win_errhandler_function)(MPI_Win *, int *, ...);
typedef void (MPI_User_function)(void *, void *, int *, MPI_Datatype *);
typedef int (MPI_Comm_copy_attr_function)(MPI_Comm, int, void *, void *, void *, int *);
typedef int (MPI_Comm_delete_attr_function)(MPI_Comm, int, void *, void *);
typedef int (MPI_Type_copy_attr_function)(MPI_Datatype, int, void *, void *, void *, int *);
typedef int (MPI_Type_delete_attr_function)(MPI_Datatype, int, void *, void *);
typedef int (MPI_Win_copy_attr_function)(MPI_Win, int, void *, void *, void *, int *);
typedef int (MPI_Win_delete_attr_function)(MPI_Win, int, void *, void *);
typedef int (MPI_Grequest_query_function)(void *, MPI_Status *);
typedef int (MPI_Grequest_free_function)(void *);
typedef int (MPI_Grequest_cancel_function)(void *, int);
typedef MPI_Comm_errhandler_function MPI_Comm_errhandler_fn __attribute__((__deprecated__("MPI_Comm_errhandler_fn was deprecated in MPI-2.2; use MPI_Comm_errhandler_function instead"))) ;
typedef ompi_file_errhandler_fn MPI_File_errhandler_fn __attribute__((__deprecated__("MPI_File_errhandler_fn was deprecated in MPI-2.2; use MPI_File_errhandler_function instead"))) ;
typedef ompi_file_errhandler_fn MPI_File_errhandler_function;
typedef MPI_Win_errhandler_function MPI_Win_errhandler_fn __attribute__((__deprecated__("MPI_Win_errhandler_fn was deprecated in MPI-2.2; use MPI_Win_errhandler_function instead"))) ;
enum { MPI_ANY_SOURCE = -1 };
enum { MPI_PROC_NULL = -2 };
enum { MPI_ROOT = -4 };
enum { MPI_ANY_TAG = -1 };
enum { MPI_MAX_LIBRARY_VERSION_STRING = 256 };
enum { MPI_UNDEFINED = -32766 };
enum { MPI_DIST_GRAPH = 3 };
enum { MPI_CART = 1 };
enum { MPI_GRAPH = 2 };
enum { MPI_KEYVAL_INVALID = -1 };
enum { MPI_BSEND_OVERHEAD = 128 };
enum { MPI_ORDER_C = 0 };
enum { MPI_ORDER_FORTRAN = 1 };
enum { MPI_DISTRIBUTE_BLOCK = 0 };
enum { MPI_DISTRIBUTE_CYCLIC = 1 };
enum { MPI_DISTRIBUTE_NONE = 2 };
enum { MPI_MODE_CREATE = 1 };
enum { MPI_MODE_RDONLY = 2 };
enum { MPI_MODE_WRONLY = 4 };
enum { MPI_MODE_RDWR = 8 };
enum { MPI_MODE_DELETE_ON_CLOSE = 16 };
enum { MPI_MODE_UNIQUE_OPEN = 32 };
enum { MPI_MODE_EXCL = 64 };
enum { MPI_MODE_APPEND = 128 };
enum { MPI_MODE_SEQUENTIAL = 256 };
enum { MPI_DISPLACEMENT_CURRENT = -54278278 };
enum { MPI_SEEK_SET = 600 };
enum { MPI_SEEK_CUR = 602 };
enum { MPI_SEEK_END = 604 };
enum { MPI_MODE_NOCHECK = 1 };
enum { MPI_MODE_NOPRECEDE = 2 };
enum { MPI_MODE_NOPUT = 4 };
enum { MPI_MODE_NOSTORE = 8 };
enum { MPI_MODE_NOSUCCEED = 16 };
enum { MPI_LOCK_EXCLUSIVE = 1 };
enum { MPI_LOCK_SHARED = 2 };
enum { MPI_WIN_FLAVOR_CREATE = 1 };
enum { MPI_WIN_FLAVOR_ALLOCATE = 2 };
enum { MPI_WIN_FLAVOR_DYNAMIC = 3 };
enum { MPI_WIN_FLAVOR_SHARED = 4 };
enum { MPI_WIN_UNIFIED = 0 };
enum { MPI_WIN_SEPARATE = 1 };
enum { MPI_TAG_UB, MPI_HOST, MPI_IO, MPI_WTIME_IS_GLOBAL, MPI_APPNUM, MPI_LASTUSEDCODE, MPI_UNIVERSE_SIZE, MPI_WIN_BASE, MPI_WIN_SIZE, MPI_WIN_DISP_UNIT, MPI_WIN_CREATE_FLAVOR, MPI_WIN_MODEL, IMPI_CLIENT_SIZE, IMPI_CLIENT_COLOR, IMPI_HOST_SIZE, IMPI_HOST_COLOR };
enum { MPI_SUCCESS = 0 };
enum { MPI_ERR_BUFFER = 1 };
enum { MPI_ERR_COUNT = 2 };
enum { MPI_ERR_TYPE = 3 };
enum { MPI_ERR_TAG = 4 };
enum { MPI_ERR_COMM = 5 };
enum { MPI_ERR_RANK = 6 };
enum { MPI_ERR_REQUEST = 7 };
enum { MPI_ERR_ROOT = 8 };
enum { MPI_ERR_GROUP = 9 };
enum { MPI_ERR_OP = 10 };
enum { MPI_ERR_TOPOLOGY = 11 };
enum { MPI_ERR_DIMS = 12 };
enum { MPI_ERR_ARG = 13 };
enum { MPI_ERR_UNKNOWN = 14 };
enum { MPI_ERR_TRUNCATE = 15 };
enum { MPI_ERR_OTHER = 16 };
enum { MPI_ERR_INTERN = 17 };
enum { MPI_ERR_IN_STATUS = 18 };
enum { MPI_ERR_PENDING = 19 };
enum { MPI_ERR_ACCESS = 20 };
enum { MPI_ERR_AMODE = 21 };
enum { MPI_ERR_ASSERT = 22 };
enum { MPI_ERR_BAD_FILE = 23 };
enum { MPI_ERR_BASE = 24 };
enum { MPI_ERR_CONVERSION = 25 };
enum { MPI_ERR_DISP = 26 };
enum { MPI_ERR_DUP_DATAREP = 27 };
enum { MPI_ERR_FILE_EXISTS = 28 };
enum { MPI_ERR_FILE_IN_USE = 29 };
enum { MPI_ERR_FILE = 30 };
enum { MPI_ERR_INFO_KEY = 31 };
enum { MPI_ERR_INFO_NOKEY = 32 };
enum { MPI_ERR_INFO_VALUE = 33 };
enum { MPI_ERR_INFO = 34 };
enum { MPI_ERR_IO = 35 };
enum { MPI_ERR_KEYVAL = 36 };
enum { MPI_ERR_LOCKTYPE = 37 };
enum { MPI_ERR_NAME = 38 };
enum { MPI_ERR_NO_MEM = 39 };
enum { MPI_ERR_NOT_SAME = 40 };
enum { MPI_ERR_NO_SPACE = 41 };
enum { MPI_ERR_NO_SUCH_FILE = 42 };
enum { MPI_ERR_PORT = 43 };
enum { MPI_ERR_QUOTA = 44 };
enum { MPI_ERR_READ_ONLY = 45 };
enum { MPI_ERR_RMA_CONFLICT = 46 };
enum { MPI_ERR_RMA_SYNC = 47 };
enum { MPI_ERR_SERVICE = 48 };
enum { MPI_ERR_SIZE = 49 };
enum { MPI_ERR_SPAWN = 50 };
enum { MPI_ERR_UNSUPPORTED_DATAREP = 51 };
enum { MPI_ERR_UNSUPPORTED_OPERATION = 52 };
enum { MPI_ERR_WIN = 53 };
enum { MPI_T_ERR_MEMORY = 54 };
enum { MPI_T_ERR_NOT_INITIALIZED = 55 };
enum { MPI_T_ERR_CANNOT_INIT = 56 };
enum { MPI_T_ERR_INVALID_INDEX = 57 };
enum { MPI_T_ERR_INVALID_ITEM = 58 };
enum { MPI_T_ERR_INVALID_HANDLE = 59 };
enum { MPI_T_ERR_OUT_OF_HANDLES = 60 };
enum { MPI_T_ERR_OUT_OF_SESSIONS = 61 };
enum { MPI_T_ERR_INVALID_SESSION = 62 };
enum { MPI_T_ERR_CVAR_SET_NOT_NOW = 63 };
enum { MPI_T_ERR_CVAR_SET_NEVER = 64 };
enum { MPI_T_ERR_PVAR_NO_STARTSTOP = 65 };
enum { MPI_T_ERR_PVAR_NO_WRITE = 66 };
enum { MPI_T_ERR_PVAR_NO_ATOMIC = 67 };
enum { MPI_ERR_RMA_RANGE = 68 };
enum { MPI_ERR_RMA_ATTACH = 69 };
enum { MPI_ERR_RMA_FLAVOR = 70 };
enum { MPI_ERR_RMA_SHARED = 71 };
enum { MPI_T_ERR_INVALID = 72 };
enum { MPI_T_ERR_INVALID_NAME = 73 };
enum { MPI_ERR_LASTCODE = 92 };
enum { MPI_IDENT, MPI_CONGRUENT, MPI_SIMILAR, MPI_UNEQUAL };
enum { MPI_THREAD_SINGLE, MPI_THREAD_FUNNELED, MPI_THREAD_SERIALIZED, MPI_THREAD_MULTIPLE };
enum { MPI_COMBINER_NAMED, MPI_COMBINER_DUP, MPI_COMBINER_CONTIGUOUS, MPI_COMBINER_VECTOR, OMPI_WAS_MPI_COMBINER_HVECTOR_INTEGER, MPI_COMBINER_HVECTOR, MPI_COMBINER_INDEXED, OMPI_WAS_MPI_COMBINER_HINDEXED_INTEGER, MPI_COMBINER_HINDEXED, MPI_COMBINER_INDEXED_BLOCK, OMPI_WAS_MPI_COMBINER_STRUCT_INTEGER, MPI_COMBINER_STRUCT, MPI_COMBINER_SUBARRAY, MPI_COMBINER_DARRAY, MPI_COMBINER_F90_REAL, MPI_COMBINER_F90_COMPLEX, MPI_COMBINER_F90_INTEGER, MPI_COMBINER_RESIZED, MPI_COMBINER_HINDEXED_BLOCK };
enum { MPI_COMM_TYPE_SHARED, OMPI_COMM_TYPE_HWTHREAD, OMPI_COMM_TYPE_CORE, OMPI_COMM_TYPE_L1CACHE, OMPI_COMM_TYPE_L2CACHE, OMPI_COMM_TYPE_L3CACHE, OMPI_COMM_TYPE_SOCKET, OMPI_COMM_TYPE_NUMA, OMPI_COMM_TYPE_BOARD, OMPI_COMM_TYPE_HOST, OMPI_COMM_TYPE_CU, OMPI_COMM_TYPE_CLUSTER };
enum { MPI_T_VERBOSITY_USER_BASIC, MPI_T_VERBOSITY_USER_DETAIL, MPI_T_VERBOSITY_USER_ALL, MPI_T_VERBOSITY_TUNER_BASIC, MPI_T_VERBOSITY_TUNER_DETAIL, MPI_T_VERBOSITY_TUNER_ALL, MPI_T_VERBOSITY_MPIDEV_BASIC, MPI_T_VERBOSITY_MPIDEV_DETAIL, MPI_T_VERBOSITY_MPIDEV_ALL };
enum { MPI_T_SCOPE_CONSTANT, MPI_T_SCOPE_READONLY, MPI_T_SCOPE_LOCAL, MPI_T_SCOPE_GROUP, MPI_T_SCOPE_GROUP_EQ, MPI_T_SCOPE_ALL, MPI_T_SCOPE_ALL_EQ };
enum { MPI_T_BIND_NO_OBJECT, MPI_T_BIND_MPI_COMM, MPI_T_BIND_MPI_DATATYPE, MPI_T_BIND_MPI_ERRHANDLER, MPI_T_BIND_MPI_FILE, MPI_T_BIND_MPI_GROUP, MPI_T_BIND_MPI_OP, MPI_T_BIND_MPI_REQUEST, MPI_T_BIND_MPI_WIN, MPI_T_BIND_MPI_MESSAGE, MPI_T_BIND_MPI_INFO };
enum { MPI_T_PVAR_CLASS_STATE, MPI_T_PVAR_CLASS_LEVEL, MPI_T_PVAR_CLASS_SIZE, MPI_T_PVAR_CLASS_PERCENTAGE, MPI_T_PVAR_CLASS_HIGHWATERMARK, MPI_T_PVAR_CLASS_LOWWATERMARK, MPI_T_PVAR_CLASS_COUNTER, MPI_T_PVAR_CLASS_AGGREGATE, MPI_T_PVAR_CLASS_TIMER, MPI_T_PVAR_CLASS_GENERIC };
__attribute__((visibility("default"))) int OMPI_C_MPI_TYPE_NULL_DELETE_FN( MPI_Datatype datatype, int type_keyval, void* attribute_val_out, void* extra_state );
__attribute__((visibility("default"))) int OMPI_C_MPI_TYPE_NULL_COPY_FN( MPI_Datatype datatype, int type_keyval, void* extra_state, void* attribute_val_in, void* attribute_val_out, int* flag );
__attribute__((visibility("default"))) int OMPI_C_MPI_TYPE_DUP_FN( MPI_Datatype datatype, int type_keyval, void* extra_state, void* attribute_val_in, void* attribute_val_out, int* flag );
__attribute__((visibility("default"))) int OMPI_C_MPI_COMM_NULL_DELETE_FN( MPI_Comm comm, int comm_keyval, void* attribute_val_out, void* extra_state );
__attribute__((visibility("default"))) int OMPI_C_MPI_COMM_NULL_COPY_FN( MPI_Comm comm, int comm_keyval, void* extra_state, void* attribute_val_in, void* attribute_val_out, int* flag );
__attribute__((visibility("default"))) int OMPI_C_MPI_COMM_DUP_FN( MPI_Comm comm, int comm_keyval, void* extra_state, void* attribute_val_in, void* attribute_val_out, int* flag );
__attribute__((visibility("default"))) int OMPI_C_MPI_WIN_NULL_DELETE_FN( MPI_Win window, int win_keyval, void* attribute_val_out, void* extra_state );
__attribute__((visibility("default"))) int OMPI_C_MPI_WIN_NULL_COPY_FN( MPI_Win window, int win_keyval, void* extra_state, void* attribute_val_in, void* attribute_val_out, int* flag );
__attribute__((visibility("default"))) int OMPI_C_MPI_WIN_DUP_FN( MPI_Win window, int win_keyval, void* extra_state, void* attribute_val_in, void* attribute_val_out, int* flag );
__attribute__((visibility("default"))) extern struct ompi_predefined_communicator_t ompi_mpi_comm_world;
__attribute__((visibility("default"))) extern struct ompi_predefined_communicator_t ompi_mpi_comm_self;
__attribute__((visibility("default"))) extern struct ompi_predefined_communicator_t ompi_mpi_comm_null;
__attribute__((visibility("default"))) extern struct ompi_predefined_group_t ompi_mpi_group_empty;
__attribute__((visibility("default"))) extern struct ompi_predefined_group_t ompi_mpi_group_null;
__attribute__((visibility("default"))) extern struct ompi_predefined_request_t ompi_request_null;
__attribute__((visibility("default"))) extern struct ompi_predefined_message_t ompi_message_null;
__attribute__((visibility("default"))) extern struct ompi_predefined_message_t ompi_message_no_proc;
__attribute__((visibility("default"))) extern struct ompi_predefined_op_t ompi_mpi_op_null;
__attribute__((visibility("default"))) extern struct ompi_predefined_op_t ompi_mpi_op_min;
__attribute__((visibility("default"))) extern struct ompi_predefined_op_t ompi_mpi_op_max;
__attribute__((visibility("default"))) extern struct ompi_predefined_op_t ompi_mpi_op_sum;
__attribute__((visibility("default"))) extern struct ompi_predefined_op_t ompi_mpi_op_prod;
__attribute__((visibility("default"))) extern struct ompi_predefined_op_t ompi_mpi_op_land;
__attribute__((visibility("default"))) extern struct ompi_predefined_op_t ompi_mpi_op_band;
__attribute__((visibility("default"))) extern struct ompi_predefined_op_t ompi_mpi_op_lor;
__attribute__((visibility("default"))) extern struct ompi_predefined_op_t ompi_mpi_op_bor;
__attribute__((visibility("default"))) extern struct ompi_predefined_op_t ompi_mpi_op_lxor;
__attribute__((visibility("default"))) extern struct ompi_predefined_op_t ompi_mpi_op_bxor;
__attribute__((visibility("default"))) extern struct ompi_predefined_op_t ompi_mpi_op_maxloc;
__attribute__((visibility("default"))) extern struct ompi_predefined_op_t ompi_mpi_op_minloc;
__attribute__((visibility("default"))) extern struct ompi_predefined_op_t ompi_mpi_op_replace;
__attribute__((visibility("default"))) extern struct ompi_predefined_op_t ompi_mpi_op_no_op;
__attribute__((visibility("default"))) extern struct ompi_predefined_datatype_t ompi_mpi_datatype_null;
__attribute__((visibility("default"))) extern struct ompi_predefined_datatype_t ompi_mpi_char;
__attribute__((visibility("default"))) extern struct ompi_predefined_datatype_t ompi_mpi_signed_char;
__attribute__((visibility("default"))) extern struct ompi_predefined_datatype_t ompi_mpi_unsigned_char;
__attribute__((visibility("default"))) extern struct ompi_predefined_datatype_t ompi_mpi_byte;
__attribute__((visibility("default"))) extern struct ompi_predefined_datatype_t ompi_mpi_short;
__attribute__((visibility("default"))) extern struct ompi_predefined_datatype_t ompi_mpi_unsigned_short;
__attribute__((visibility("default"))) extern struct ompi_predefined_datatype_t ompi_mpi_int;
__attribute__((visibility("default"))) extern struct ompi_predefined_datatype_t ompi_mpi_unsigned;
__attribute__((visibility("default"))) extern struct ompi_predefined_datatype_t ompi_mpi_long;
__attribute__((visibility("default"))) extern struct ompi_predefined_datatype_t ompi_mpi_unsigned_long;
__attribute__((visibility("default"))) extern struct ompi_predefined_datatype_t ompi_mpi_long_long_int;
__attribute__((visibility("default"))) extern struct ompi_predefined_datatype_t ompi_mpi_unsigned_long_long;
__attribute__((visibility("default"))) extern struct ompi_predefined_datatype_t ompi_mpi_float;
__attribute__((visibility("default"))) extern struct ompi_predefined_datatype_t ompi_mpi_double;
__attribute__((visibility("default"))) extern struct ompi_predefined_datatype_t ompi_mpi_long_double;
__attribute__((visibility("default"))) extern struct ompi_predefined_datatype_t ompi_mpi_wchar;
__attribute__((visibility("default"))) extern struct ompi_predefined_datatype_t ompi_mpi_packed;
__attribute__((visibility("default"))) extern struct ompi_predefined_datatype_t ompi_mpi_cxx_bool;
__attribute__((visibility("default"))) extern struct ompi_predefined_datatype_t ompi_mpi_cxx_cplex;
__attribute__((visibility("default"))) extern struct ompi_predefined_datatype_t ompi_mpi_cxx_dblcplex;
__attribute__((visibility("default"))) extern struct ompi_predefined_datatype_t ompi_mpi_cxx_ldblcplex;
__attribute__((visibility("default"))) extern struct ompi_predefined_datatype_t ompi_mpi_logical;
__attribute__((visibility("default"))) extern struct ompi_predefined_datatype_t ompi_mpi_character;
__attribute__((visibility("default"))) extern struct ompi_predefined_datatype_t ompi_mpi_integer;
__attribute__((visibility("default"))) extern struct ompi_predefined_datatype_t ompi_mpi_real;
__attribute__((visibility("default"))) extern struct ompi_predefined_datatype_t ompi_mpi_dblprec;
__attribute__((visibility("default"))) extern struct ompi_predefined_datatype_t ompi_mpi_cplex;
__attribute__((visibility("default"))) extern struct ompi_predefined_datatype_t ompi_mpi_dblcplex;
__attribute__((visibility("default"))) extern struct ompi_predefined_datatype_t ompi_mpi_ldblcplex;
__attribute__((visibility("default"))) extern struct ompi_predefined_datatype_t ompi_mpi_2int;
__attribute__((visibility("default"))) extern struct ompi_predefined_datatype_t ompi_mpi_2integer;
__attribute__((visibility("default"))) extern struct ompi_predefined_datatype_t ompi_mpi_2real;
__attribute__((visibility("default"))) extern struct ompi_predefined_datatype_t ompi_mpi_2dblprec;
__attribute__((visibility("default"))) extern struct ompi_predefined_datatype_t ompi_mpi_2cplex;
__attribute__((visibility("default"))) extern struct ompi_predefined_datatype_t ompi_mpi_2dblcplex;
__attribute__((visibility("default"))) extern struct ompi_predefined_datatype_t ompi_mpi_float_int;
__attribute__((visibility("default"))) extern struct ompi_predefined_datatype_t ompi_mpi_double_int;
__attribute__((visibility("default"))) extern struct ompi_predefined_datatype_t ompi_mpi_longdbl_int;
__attribute__((visibility("default"))) extern struct ompi_predefined_datatype_t ompi_mpi_short_int;
__attribute__((visibility("default"))) extern struct ompi_predefined_datatype_t ompi_mpi_long_int;
__attribute__((visibility("default"))) extern struct ompi_predefined_datatype_t ompi_mpi_logical1;
__attribute__((visibility("default"))) extern struct ompi_predefined_datatype_t ompi_mpi_logical2;
__attribute__((visibility("default"))) extern struct ompi_predefined_datatype_t ompi_mpi_logical4;
__attribute__((visibility("default"))) extern struct ompi_predefined_datatype_t ompi_mpi_logical8;
__attribute__((visibility("default"))) extern struct ompi_predefined_datatype_t ompi_mpi_integer1;
__attribute__((visibility("default"))) extern struct ompi_predefined_datatype_t ompi_mpi_integer2;
__attribute__((visibility("default"))) extern struct ompi_predefined_datatype_t ompi_mpi_integer4;
__attribute__((visibility("default"))) extern struct ompi_predefined_datatype_t ompi_mpi_integer8;
__attribute__((visibility("default"))) extern struct ompi_predefined_datatype_t ompi_mpi_integer16;
__attribute__((visibility("default"))) extern struct ompi_predefined_datatype_t ompi_mpi_real2;
__attribute__((visibility("default"))) extern struct ompi_predefined_datatype_t ompi_mpi_real4;
__attribute__((visibility("default"))) extern struct ompi_predefined_datatype_t ompi_mpi_real8;
__attribute__((visibility("default"))) extern struct ompi_predefined_datatype_t ompi_mpi_real16;
__attribute__((visibility("default"))) extern struct ompi_predefined_datatype_t ompi_mpi_complex8;
__attribute__((visibility("default"))) extern struct ompi_predefined_datatype_t ompi_mpi_complex16;
__attribute__((visibility("default"))) extern struct ompi_predefined_datatype_t ompi_mpi_complex32;
__attribute__((visibility("default"))) extern struct ompi_predefined_datatype_t ompi_mpi_int8_t;
__attribute__((visibility("default"))) extern struct ompi_predefined_datatype_t ompi_mpi_uint8_t;
__attribute__((visibility("default"))) extern struct ompi_predefined_datatype_t ompi_mpi_int16_t;
__attribute__((visibility("default"))) extern struct ompi_predefined_datatype_t ompi_mpi_uint16_t;
__attribute__((visibility("default"))) extern struct ompi_predefined_datatype_t ompi_mpi_int32_t;
__attribute__((visibility("default"))) extern struct ompi_predefined_datatype_t ompi_mpi_uint32_t;
__attribute__((visibility("default"))) extern struct ompi_predefined_datatype_t ompi_mpi_int64_t;
__attribute__((visibility("default"))) extern struct ompi_predefined_datatype_t ompi_mpi_uint64_t;
__attribute__((visibility("default"))) extern struct ompi_predefined_datatype_t ompi_mpi_aint;
__attribute__((visibility("default"))) extern struct ompi_predefined_datatype_t ompi_mpi_offset;
__attribute__((visibility("default"))) extern struct ompi_predefined_datatype_t ompi_mpi_count;
__attribute__((visibility("default"))) extern struct ompi_predefined_datatype_t ompi_mpi_c_bool;
__attribute__((visibility("default"))) extern struct ompi_predefined_datatype_t ompi_mpi_c_float_complex;
__attribute__((visibility("default"))) extern struct ompi_predefined_datatype_t ompi_mpi_c_double_complex;
__attribute__((visibility("default"))) extern struct ompi_predefined_datatype_t ompi_mpi_c_long_double_complex;
__attribute__((visibility("default"))) extern struct ompi_predefined_errhandler_t ompi_mpi_errhandler_null;
__attribute__((visibility("default"))) extern struct ompi_predefined_errhandler_t ompi_mpi_errors_are_fatal;
__attribute__((visibility("default"))) extern struct ompi_predefined_errhandler_t ompi_mpi_errors_return;
__attribute__((visibility("default"))) extern struct ompi_predefined_win_t ompi_mpi_win_null;
__attribute__((visibility("default"))) extern struct ompi_predefined_file_t ompi_mpi_file_null;
__attribute__((visibility("default"))) extern struct ompi_predefined_info_t ompi_mpi_info_null;
__attribute__((visibility("default"))) extern struct ompi_predefined_info_t ompi_mpi_info_env;
__attribute__((visibility("default"))) extern int *MPI_F_STATUS_IGNORE;
__attribute__((visibility("default"))) extern int *MPI_F_STATUSES_IGNORE;
enum { MPI_TYPECLASS_INTEGER = 1 };
enum { MPI_TYPECLASS_REAL = 2 };
enum { MPI_TYPECLASS_COMPLEX = 3 };
__attribute__((visibility("default")))  int MPI_Abort(MPI_Comm comm, int errorcode);
__attribute__((visibility("default")))  int MPI_Accumulate(const void *origin_addr, int origin_count, MPI_Datatype origin_datatype, int target_rank, MPI_Aint target_disp, int target_count, MPI_Datatype target_datatype, MPI_Op op, MPI_Win win);
__attribute__((visibility("default")))  int MPI_Add_error_class(int *errorclass);
__attribute__((visibility("default")))  int MPI_Add_error_code(int errorclass, int *errorcode);
__attribute__((visibility("default")))  int MPI_Add_error_string(int errorcode, const char *string);
__attribute__((visibility("default")))  int MPI_Allgather(const void *sendbuf, int sendcount, MPI_Datatype sendtype, void *recvbuf, int recvcount, MPI_Datatype recvtype, MPI_Comm comm);
__attribute__((visibility("default")))  int MPI_Iallgather(const void *sendbuf, int sendcount, MPI_Datatype sendtype, void *recvbuf, int recvcount, MPI_Datatype recvtype, MPI_Comm comm, MPI_Request *request);
__attribute__((visibility("default")))  int MPI_Allgatherv(const void *sendbuf, int sendcount, MPI_Datatype sendtype, void *recvbuf, const int recvcounts[], const int displs[], MPI_Datatype recvtype, MPI_Comm comm);
__attribute__((visibility("default")))  int MPI_Iallgatherv(const void *sendbuf, int sendcount, MPI_Datatype sendtype, void *recvbuf, const int recvcounts[], const int displs[], MPI_Datatype recvtype, MPI_Comm comm, MPI_Request *request);
__attribute__((visibility("default")))  int MPI_Alloc_mem(MPI_Aint size, MPI_Info info, void *baseptr);
__attribute__((visibility("default")))  int MPI_Allreduce(const void *sendbuf, void *recvbuf, int count, MPI_Datatype datatype, MPI_Op op, MPI_Comm comm);
__attribute__((visibility("default")))  int MPI_Iallreduce(const void *sendbuf, void *recvbuf, int count, MPI_Datatype datatype, MPI_Op op, MPI_Comm comm, MPI_Request *request);
__attribute__((visibility("default")))  int MPI_Alltoall(const void *sendbuf, int sendcount, MPI_Datatype sendtype, void *recvbuf, int recvcount, MPI_Datatype recvtype, MPI_Comm comm);
__attribute__((visibility("default")))  int MPI_Ialltoall(const void *sendbuf, int sendcount, MPI_Datatype sendtype, void *recvbuf, int recvcount, MPI_Datatype recvtype, MPI_Comm comm, MPI_Request *request);
__attribute__((visibility("default")))  int MPI_Alltoallv(const void *sendbuf, const int sendcounts[], const int sdispls[], MPI_Datatype sendtype, void *recvbuf, const int recvcounts[], const int rdispls[], MPI_Datatype recvtype, MPI_Comm comm);
__attribute__((visibility("default")))  int MPI_Ialltoallv(const void *sendbuf, const int sendcounts[], const int sdispls[], MPI_Datatype sendtype, void *recvbuf, const int recvcounts[], const int rdispls[], MPI_Datatype recvtype, MPI_Comm comm, MPI_Request *request);
__attribute__((visibility("default")))  int MPI_Alltoallw(const void *sendbuf, const int sendcounts[], const int sdispls[], const MPI_Datatype sendtypes[], void *recvbuf, const int recvcounts[], const int rdispls[], const MPI_Datatype recvtypes[], MPI_Comm comm);
__attribute__((visibility("default")))  int MPI_Ialltoallw(const void *sendbuf, const int sendcounts[], const int sdispls[], const MPI_Datatype sendtypes[], void *recvbuf, const int recvcounts[], const int rdispls[], const MPI_Datatype recvtypes[], MPI_Comm comm, MPI_Request *request);
__attribute__((visibility("default")))  int MPI_Barrier(MPI_Comm comm);
__attribute__((visibility("default")))  int MPI_Ibarrier(MPI_Comm comm, MPI_Request *request);
__attribute__((visibility("default")))  int MPI_Bcast(void *buffer, int count, MPI_Datatype datatype, int root, MPI_Comm comm);
__attribute__((visibility("default")))  int MPI_Bsend(const void *buf, int count, MPI_Datatype datatype, int dest, int tag, MPI_Comm comm);
__attribute__((visibility("default")))  int MPI_Ibcast(void *buffer, int count, MPI_Datatype datatype, int root, MPI_Comm comm, MPI_Request *request);
__attribute__((visibility("default")))  int MPI_Bsend_init(const void *buf, int count, MPI_Datatype datatype, int dest, int tag, MPI_Comm comm, MPI_Request *request);
__attribute__((visibility("default")))  int MPI_Buffer_attach(void *buffer, int size);
__attribute__((visibility("default")))  int MPI_Buffer_detach(void *buffer, int *size);
__attribute__((visibility("default")))  int MPI_Cancel(MPI_Request *request);
__attribute__((visibility("default")))  int MPI_Cart_coords(MPI_Comm comm, int rank, int maxdims, int coords[]);
__attribute__((visibility("default")))  int MPI_Cart_create(MPI_Comm old_comm, int ndims, const int dims[], const int periods[], int reorder, MPI_Comm *comm_cart);
__attribute__((visibility("default")))  int MPI_Cart_get(MPI_Comm comm, int maxdims, int dims[], int periods[], int coords[]);
__attribute__((visibility("default")))  int MPI_Cart_map(MPI_Comm comm, int ndims, const int dims[], const int periods[], int *newrank);
__attribute__((visibility("default")))  int MPI_Cart_rank(MPI_Comm comm, const int coords[], int *rank);
__attribute__((visibility("default")))  int MPI_Cart_shift(MPI_Comm comm, int direction, int disp, int *rank_source, int *rank_dest);
__attribute__((visibility("default")))  int MPI_Cart_sub(MPI_Comm comm, const int remain_dims[], MPI_Comm *new_comm);
__attribute__((visibility("default")))  int MPI_Cartdim_get(MPI_Comm comm, int *ndims);
__attribute__((visibility("default")))  int MPI_Close_port(const char *port_name);
__attribute__((visibility("default")))  int MPI_Comm_accept(const char *port_name, MPI_Info info, int root, MPI_Comm comm, MPI_Comm *newcomm);
__attribute__((visibility("default")))  int MPI_Comm_c2f(MPI_Comm comm);
__attribute__((visibility("default")))  int MPI_Comm_call_errhandler(MPI_Comm comm, int errorcode);
__attribute__((visibility("default")))  int MPI_Comm_compare(MPI_Comm comm1, MPI_Comm comm2, int *result);
__attribute__((visibility("default")))  int MPI_Comm_connect(const char *port_name, MPI_Info info, int root, MPI_Comm comm, MPI_Comm *newcomm);
__attribute__((visibility("default")))  int MPI_Comm_create_errhandler(MPI_Comm_errhandler_function *function, MPI_Errhandler *errhandler);
__attribute__((visibility("default")))  int MPI_Comm_create_keyval(MPI_Comm_copy_attr_function *comm_copy_attr_fn, MPI_Comm_delete_attr_function *comm_delete_attr_fn, int *comm_keyval, void *extra_state);
__attribute__((visibility("default")))  int MPI_Comm_create_group(MPI_Comm comm, MPI_Group group, int tag, MPI_Comm *newcomm);
__attribute__((visibility("default")))  int MPI_Comm_create(MPI_Comm comm, MPI_Group group, MPI_Comm *newcomm);
__attribute__((visibility("default")))  int MPI_Comm_delete_attr(MPI_Comm comm, int comm_keyval);
__attribute__((visibility("default")))  int MPI_Comm_disconnect(MPI_Comm *comm);
__attribute__((visibility("default")))  int MPI_Comm_dup(MPI_Comm comm, MPI_Comm *newcomm);
__attribute__((visibility("default")))  int MPI_Comm_idup(MPI_Comm comm, MPI_Comm *newcomm, MPI_Request *request);
__attribute__((visibility("default")))  int MPI_Comm_dup_with_info(MPI_Comm comm, MPI_Info info, MPI_Comm *newcomm);
__attribute__((visibility("default")))  MPI_Comm MPI_Comm_f2c(int comm);
__attribute__((visibility("default")))  int MPI_Comm_free_keyval(int *comm_keyval);
__attribute__((visibility("default")))  int MPI_Comm_free(MPI_Comm *comm);
__attribute__((visibility("default")))  int MPI_Comm_get_attr(MPI_Comm comm, int comm_keyval, void *attribute_val, int *flag);
__attribute__((visibility("default")))  int MPI_Dist_graph_create(MPI_Comm comm_old, int n, const int nodes[], const int degrees[], const int targets[], const int weights[], MPI_Info info, int reorder, MPI_Comm * newcomm);
__attribute__((visibility("default")))  int MPI_Dist_graph_create_adjacent(MPI_Comm comm_old, int indegree, const int sources[], const int sourceweights[], int outdegree, const int destinations[], const int destweights[], MPI_Info info, int reorder, MPI_Comm *comm_dist_graph);
__attribute__((visibility("default"))) int MPI_Dist_graph_neighbors(MPI_Comm comm, int maxindegree, int sources[], int sourceweights[], int maxoutdegree, int destinations[], int destweights[]);
__attribute__((visibility("default")))  int MPI_Dist_graph_neighbors_count(MPI_Comm comm, int *inneighbors, int *outneighbors, int *weighted);
__attribute__((visibility("default")))  int MPI_Comm_get_errhandler(MPI_Comm comm, MPI_Errhandler *erhandler);
__attribute__((visibility("default")))  int MPI_Comm_get_info(MPI_Comm comm, MPI_Info *info_used);
__attribute__((visibility("default")))  int MPI_Comm_get_name(MPI_Comm comm, char *comm_name, int *resultlen);
__attribute__((visibility("default")))  int MPI_Comm_get_parent(MPI_Comm *parent);
__attribute__((visibility("default")))  int MPI_Comm_group(MPI_Comm comm, MPI_Group *group);
__attribute__((visibility("default")))  int MPI_Comm_join(int fd, MPI_Comm *intercomm);
__attribute__((visibility("default")))  int MPI_Comm_rank(MPI_Comm comm, int *rank);
__attribute__((visibility("default")))  int MPI_Comm_remote_group(MPI_Comm comm, MPI_Group *group);
__attribute__((visibility("default")))  int MPI_Comm_remote_size(MPI_Comm comm, int *size);
__attribute__((visibility("default")))  int MPI_Comm_set_attr(MPI_Comm comm, int comm_keyval, void *attribute_val);
__attribute__((visibility("default")))  int MPI_Comm_set_errhandler(MPI_Comm comm, MPI_Errhandler errhandler);
__attribute__((visibility("default")))  int MPI_Comm_set_info(MPI_Comm comm, MPI_Info info);
__attribute__((visibility("default")))  int MPI_Comm_set_name(MPI_Comm comm, const char *comm_name);
__attribute__((visibility("default")))  int MPI_Comm_size(MPI_Comm comm, int *size);
__attribute__((visibility("default")))  int MPI_Comm_spawn(const char *command, char *argv[], int maxprocs, MPI_Info info, int root, MPI_Comm comm, MPI_Comm *intercomm, int array_of_errcodes[]);
__attribute__((visibility("default")))  int MPI_Comm_spawn_multiple(int count, char *array_of_commands[], char **array_of_argv[], const int array_of_maxprocs[], const MPI_Info array_of_info[], int root, MPI_Comm comm, MPI_Comm *intercomm, int array_of_errcodes[]);
__attribute__((visibility("default")))  int MPI_Comm_split(MPI_Comm comm, int color, int key, MPI_Comm *newcomm);
__attribute__((visibility("default")))  int MPI_Comm_split_type(MPI_Comm comm, int split_type, int key, MPI_Info info, MPI_Comm *newcomm);
__attribute__((visibility("default")))  int MPI_Comm_test_inter(MPI_Comm comm, int *flag);
__attribute__((visibility("default")))  int MPI_Compare_and_swap(const void *origin_addr, const void *compare_addr, void *result_addr, MPI_Datatype datatype, int target_rank, MPI_Aint target_disp, MPI_Win win);
__attribute__((visibility("default")))  int MPI_Dims_create(int nnodes, int ndims, int dims[]);
__attribute__((visibility("default")))  int MPI_Errhandler_c2f(MPI_Errhandler errhandler);
__attribute__((visibility("default")))  MPI_Errhandler MPI_Errhandler_f2c(int errhandler);
__attribute__((visibility("default")))  int MPI_Errhandler_free(MPI_Errhandler *errhandler);
__attribute__((visibility("default")))  int MPI_Error_class(int errorcode, int *errorclass);
__attribute__((visibility("default")))  int MPI_Error_string(int errorcode, char *string, int *resultlen);
__attribute__((visibility("default")))  int MPI_Exscan(const void *sendbuf, void *recvbuf, int count, MPI_Datatype datatype, MPI_Op op, MPI_Comm comm);
__attribute__((visibility("default")))  int MPI_Fetch_and_op(const void *origin_addr, void *result_addr, MPI_Datatype datatype, int target_rank, MPI_Aint target_disp, MPI_Op op, MPI_Win win);
__attribute__((visibility("default")))  int MPI_Iexscan(const void *sendbuf, void *recvbuf, int count, MPI_Datatype datatype, MPI_Op op, MPI_Comm comm, MPI_Request *request);
__attribute__((visibility("default")))  int MPI_File_c2f(MPI_File file);
__attribute__((visibility("default")))  MPI_File MPI_File_f2c(int file);
__attribute__((visibility("default")))  int MPI_File_call_errhandler(MPI_File fh, int errorcode);
__attribute__((visibility("default")))  int MPI_File_create_errhandler(MPI_File_errhandler_function *function, MPI_Errhandler *errhandler);
__attribute__((visibility("default")))  int MPI_File_set_errhandler( MPI_File file, MPI_Errhandler errhandler);
__attribute__((visibility("default")))  int MPI_File_get_errhandler( MPI_File file, MPI_Errhandler *errhandler);
__attribute__((visibility("default")))  int MPI_File_open(MPI_Comm comm, const char *filename, int amode, MPI_Info info, MPI_File *fh);
__attribute__((visibility("default")))  int MPI_File_close(MPI_File *fh);
__attribute__((visibility("default")))  int MPI_File_delete(const char *filename, MPI_Info info);
__attribute__((visibility("default")))  int MPI_File_set_size(MPI_File fh, MPI_Offset size);
__attribute__((visibility("default")))  int MPI_File_preallocate(MPI_File fh, MPI_Offset size);
__attribute__((visibility("default")))  int MPI_File_get_size(MPI_File fh, MPI_Offset *size);
__attribute__((visibility("default")))  int MPI_File_get_group(MPI_File fh, MPI_Group *group);
__attribute__((visibility("default")))  int MPI_File_get_amode(MPI_File fh, int *amode);
__attribute__((visibility("default")))  int MPI_File_set_info(MPI_File fh, MPI_Info info);
__attribute__((visibility("default")))  int MPI_File_get_info(MPI_File fh, MPI_Info *info_used);
__attribute__((visibility("default")))  int MPI_File_set_view(MPI_File fh, MPI_Offset disp, MPI_Datatype etype, MPI_Datatype filetype, const char *datarep, MPI_Info info);
__attribute__((visibility("default")))  int MPI_File_get_view(MPI_File fh, MPI_Offset *disp, MPI_Datatype *etype, MPI_Datatype *filetype, char *datarep);
__attribute__((visibility("default")))  int MPI_File_read_at(MPI_File fh, MPI_Offset offset, void *buf, int count, MPI_Datatype datatype, MPI_Status *status);
__attribute__((visibility("default")))  int MPI_File_read_at_all(MPI_File fh, MPI_Offset offset, void *buf, int count, MPI_Datatype datatype, MPI_Status *status);
__attribute__((visibility("default")))  int MPI_File_write_at(MPI_File fh, MPI_Offset offset, const void *buf, int count, MPI_Datatype datatype, MPI_Status *status);
__attribute__((visibility("default")))  int MPI_File_write_at_all(MPI_File fh, MPI_Offset offset, const void *buf, int count, MPI_Datatype datatype, MPI_Status *status);
__attribute__((visibility("default")))  int MPI_File_iread_at(MPI_File fh, MPI_Offset offset, void *buf, int count, MPI_Datatype datatype, MPI_Request *request);
__attribute__((visibility("default")))  int MPI_File_iwrite_at(MPI_File fh, MPI_Offset offset, const void *buf, int count, MPI_Datatype datatype, MPI_Request *request);
__attribute__((visibility("default")))  int MPI_File_iread_at_all(MPI_File fh, MPI_Offset offset, void *buf, int count, MPI_Datatype datatype, MPI_Request *request);
__attribute__((visibility("default")))  int MPI_File_iwrite_at_all(MPI_File fh, MPI_Offset offset, const void *buf, int count, MPI_Datatype datatype, MPI_Request *request);
__attribute__((visibility("default")))  int MPI_File_read(MPI_File fh, void *buf, int count, MPI_Datatype datatype, MPI_Status *status);
__attribute__((visibility("default")))  int MPI_File_read_all(MPI_File fh, void *buf, int count, MPI_Datatype datatype, MPI_Status *status);
__attribute__((visibility("default")))  int MPI_File_write(MPI_File fh, const void *buf, int count, MPI_Datatype datatype, MPI_Status *status);
__attribute__((visibility("default")))  int MPI_File_write_all(MPI_File fh, const void *buf, int count, MPI_Datatype datatype, MPI_Status *status);
__attribute__((visibility("default")))  int MPI_File_iread(MPI_File fh, void *buf, int count, MPI_Datatype datatype, MPI_Request *request);
__attribute__((visibility("default")))  int MPI_File_iwrite(MPI_File fh, const void *buf, int count, MPI_Datatype datatype, MPI_Request *request);
__attribute__((visibility("default")))  int MPI_File_iread_all(MPI_File fh, void *buf, int count, MPI_Datatype datatype, MPI_Request *request);
__attribute__((visibility("default")))  int MPI_File_iwrite_all(MPI_File fh, const void *buf, int count, MPI_Datatype datatype, MPI_Request *request);
__attribute__((visibility("default")))  int MPI_File_seek(MPI_File fh, MPI_Offset offset, int whence);
__attribute__((visibility("default")))  int MPI_File_get_position(MPI_File fh, MPI_Offset *offset);
__attribute__((visibility("default")))  int MPI_File_get_byte_offset(MPI_File fh, MPI_Offset offset, MPI_Offset *disp);
__attribute__((visibility("default")))  int MPI_File_read_shared(MPI_File fh, void *buf, int count, MPI_Datatype datatype, MPI_Status *status);
__attribute__((visibility("default")))  int MPI_File_write_shared(MPI_File fh, const void *buf, int count, MPI_Datatype datatype, MPI_Status *status);
__attribute__((visibility("default")))  int MPI_File_iread_shared(MPI_File fh, void *buf, int count, MPI_Datatype datatype, MPI_Request *request);
__attribute__((visibility("default")))  int MPI_File_iwrite_shared(MPI_File fh, const void *buf, int count, MPI_Datatype datatype, MPI_Request *request);
__attribute__((visibility("default")))  int MPI_File_read_ordered(MPI_File fh, void *buf, int count, MPI_Datatype datatype, MPI_Status *status);
__attribute__((visibility("default")))  int MPI_File_write_ordered(MPI_File fh, const void *buf, int count, MPI_Datatype datatype, MPI_Status *status);
__attribute__((visibility("default")))  int MPI_File_seek_shared(MPI_File fh, MPI_Offset offset, int whence);
__attribute__((visibility("default")))  int MPI_File_get_position_shared(MPI_File fh, MPI_Offset *offset);
__attribute__((visibility("default")))  int MPI_File_read_at_all_begin(MPI_File fh, MPI_Offset offset, void *buf, int count, MPI_Datatype datatype);
__attribute__((visibility("default")))  int MPI_File_read_at_all_end(MPI_File fh, void *buf, MPI_Status *status);
__attribute__((visibility("default")))  int MPI_File_write_at_all_begin(MPI_File fh, MPI_Offset offset, const void *buf, int count, MPI_Datatype datatype);
__attribute__((visibility("default")))  int MPI_File_write_at_all_end(MPI_File fh, const void *buf, MPI_Status *status);
__attribute__((visibility("default")))  int MPI_File_read_all_begin(MPI_File fh, void *buf, int count, MPI_Datatype datatype);
__attribute__((visibility("default")))  int MPI_File_read_all_end(MPI_File fh, void *buf, MPI_Status *status);
__attribute__((visibility("default")))  int MPI_File_write_all_begin(MPI_File fh, const void *buf, int count, MPI_Datatype datatype);
__attribute__((visibility("default")))  int MPI_File_write_all_end(MPI_File fh, const void *buf, MPI_Status *status);
__attribute__((visibility("default")))  int MPI_File_read_ordered_begin(MPI_File fh, void *buf, int count, MPI_Datatype datatype);
__attribute__((visibility("default")))  int MPI_File_read_ordered_end(MPI_File fh, void *buf, MPI_Status *status);
__attribute__((visibility("default")))  int MPI_File_write_ordered_begin(MPI_File fh, const void *buf, int count, MPI_Datatype datatype);
__attribute__((visibility("default")))  int MPI_File_write_ordered_end(MPI_File fh, const void *buf, MPI_Status *status);
__attribute__((visibility("default")))  int MPI_File_get_type_extent(MPI_File fh, MPI_Datatype datatype, MPI_Aint *extent);
__attribute__((visibility("default")))  int MPI_File_set_atomicity(MPI_File fh, int flag);
__attribute__((visibility("default")))  int MPI_File_get_atomicity(MPI_File fh, int *flag);
__attribute__((visibility("default")))  int MPI_File_sync(MPI_File fh);
__attribute__((visibility("default")))  int MPI_Finalize(void);
__attribute__((visibility("default")))  int MPI_Finalized(int *flag);
__attribute__((visibility("default")))  int MPI_Free_mem(void *base);
__attribute__((visibility("default")))  int MPI_Gather(const void *sendbuf, int sendcount, MPI_Datatype sendtype, void *recvbuf, int recvcount, MPI_Datatype recvtype, int root, MPI_Comm comm);
__attribute__((visibility("default")))  int MPI_Igather(const void *sendbuf, int sendcount, MPI_Datatype sendtype, void *recvbuf, int recvcount, MPI_Datatype recvtype, int root, MPI_Comm comm, MPI_Request *request);
__attribute__((visibility("default")))  int MPI_Gatherv(const void *sendbuf, int sendcount, MPI_Datatype sendtype, void *recvbuf, const int recvcounts[], const int displs[], MPI_Datatype recvtype, int root, MPI_Comm comm);
__attribute__((visibility("default")))  int MPI_Igatherv(const void *sendbuf, int sendcount, MPI_Datatype sendtype, void *recvbuf, const int recvcounts[], const int displs[], MPI_Datatype recvtype, int root, MPI_Comm comm, MPI_Request *request);
__attribute__((visibility("default")))  int MPI_Get_address(const void *location, MPI_Aint *address);
__attribute__((visibility("default")))  int MPI_Get_count(const MPI_Status *status, MPI_Datatype datatype, int *count);
__attribute__((visibility("default")))  int MPI_Get_elements(const MPI_Status *status, MPI_Datatype datatype, int *count);
__attribute__((visibility("default")))  int MPI_Get_elements_x(const MPI_Status *status, MPI_Datatype datatype, MPI_Count *count);
__attribute__((visibility("default")))  int MPI_Get(void *origin_addr, int origin_count, MPI_Datatype origin_datatype, int target_rank, MPI_Aint target_disp, int target_count, MPI_Datatype target_datatype, MPI_Win win);
__attribute__((visibility("default")))  int MPI_Get_accumulate(const void *origin_addr, int origin_count, MPI_Datatype origin_datatype, void *result_addr, int result_count, MPI_Datatype result_datatype, int target_rank, MPI_Aint target_disp, int target_count, MPI_Datatype target_datatype, MPI_Op op, MPI_Win win);
__attribute__((visibility("default")))  int MPI_Get_library_version(char *version, int *resultlen);
__attribute__((visibility("default")))  int MPI_Get_processor_name(char *name, int *resultlen);
__attribute__((visibility("default")))  int MPI_Get_version(int *version, int *subversion);
__attribute__((visibility("default")))  int MPI_Graph_create(MPI_Comm comm_old, int nnodes, const int index[], const int edges[], int reorder, MPI_Comm *comm_graph);
__attribute__((visibility("default")))  int MPI_Graph_get(MPI_Comm comm, int maxindex, int maxedges, int index[], int edges[]);
__attribute__((visibility("default")))  int MPI_Graph_map(MPI_Comm comm, int nnodes, const int index[], const int edges[], int *newrank);
__attribute__((visibility("default")))  int MPI_Graph_neighbors_count(MPI_Comm comm, int rank, int *nneighbors);
__attribute__((visibility("default")))  int MPI_Graph_neighbors(MPI_Comm comm, int rank, int maxneighbors, int neighbors[]);
__attribute__((visibility("default")))  int MPI_Graphdims_get(MPI_Comm comm, int *nnodes, int *nedges);
__attribute__((visibility("default")))  int MPI_Grequest_complete(MPI_Request request);
__attribute__((visibility("default")))  int MPI_Grequest_start(MPI_Grequest_query_function *query_fn, MPI_Grequest_free_function *free_fn, MPI_Grequest_cancel_function *cancel_fn, void *extra_state, MPI_Request *request);
__attribute__((visibility("default")))  int MPI_Group_c2f(MPI_Group group);
__attribute__((visibility("default")))  int MPI_Group_compare(MPI_Group group1, MPI_Group group2, int *result);
__attribute__((visibility("default")))  int MPI_Group_difference(MPI_Group group1, MPI_Group group2, MPI_Group *newgroup);
__attribute__((visibility("default")))  int MPI_Group_excl(MPI_Group group, int n, const int ranks[], MPI_Group *newgroup);
__attribute__((visibility("default")))  MPI_Group MPI_Group_f2c(int group);
__attribute__((visibility("default")))  int MPI_Group_free(MPI_Group *group);
__attribute__((visibility("default")))  int MPI_Group_incl(MPI_Group group, int n, const int ranks[], MPI_Group *newgroup);
__attribute__((visibility("default")))  int MPI_Group_intersection(MPI_Group group1, MPI_Group group2, MPI_Group *newgroup);
__attribute__((visibility("default")))  int MPI_Group_range_excl(MPI_Group group, int n, int ranges[][3], MPI_Group *newgroup);
__attribute__((visibility("default")))  int MPI_Group_range_incl(MPI_Group group, int n, int ranges[][3], MPI_Group *newgroup);
__attribute__((visibility("default")))  int MPI_Group_rank(MPI_Group group, int *rank);
__attribute__((visibility("default")))  int MPI_Group_size(MPI_Group group, int *size);
__attribute__((visibility("default")))  int MPI_Group_translate_ranks(MPI_Group group1, int n, const int ranks1[], MPI_Group group2, int ranks2[]);
__attribute__((visibility("default")))  int MPI_Group_union(MPI_Group group1, MPI_Group group2, MPI_Group *newgroup);
__attribute__((visibility("default")))  int MPI_Ibsend(const void *buf, int count, MPI_Datatype datatype, int dest, int tag, MPI_Comm comm, MPI_Request *request);
__attribute__((visibility("default")))  int MPI_Improbe(int source, int tag, MPI_Comm comm, int *flag, MPI_Message *message, MPI_Status *status);
__attribute__((visibility("default")))  int MPI_Imrecv(void *buf, int count, MPI_Datatype type, MPI_Message *message, MPI_Request *request);
__attribute__((visibility("default")))  int MPI_Info_c2f(MPI_Info info);
__attribute__((visibility("default")))  int MPI_Info_create(MPI_Info *info);
__attribute__((visibility("default")))  int MPI_Info_delete(MPI_Info info, const char *key);
__attribute__((visibility("default")))  int MPI_Info_dup(MPI_Info info, MPI_Info *newinfo);
__attribute__((visibility("default")))  MPI_Info MPI_Info_f2c(int info);
__attribute__((visibility("default")))  int MPI_Info_free(MPI_Info *info);
__attribute__((visibility("default")))  int MPI_Info_get(MPI_Info info, const char *key, int valuelen, char *value, int *flag);
__attribute__((visibility("default")))  int MPI_Info_get_nkeys(MPI_Info info, int *nkeys);
__attribute__((visibility("default")))  int MPI_Info_get_nthkey(MPI_Info info, int n, char *key);
__attribute__((visibility("default")))  int MPI_Info_get_valuelen(MPI_Info info, const char *key, int *valuelen, int *flag);
__attribute__((visibility("default")))  int MPI_Info_set(MPI_Info info, const char *key, const char *value);
__attribute__((visibility("default")))  int MPI_Init(int *argc, char ***argv);
__attribute__((visibility("default")))  int MPI_Initialized(int *flag);
__attribute__((visibility("default")))  int MPI_Init_thread(int *argc, char ***argv, int required, int *provided);
__attribute__((visibility("default")))  int MPI_Intercomm_create(MPI_Comm local_comm, int local_leader, MPI_Comm bridge_comm, int remote_leader, int tag, MPI_Comm *newintercomm);
__attribute__((visibility("default")))  int MPI_Intercomm_merge(MPI_Comm intercomm, int high, MPI_Comm *newintercomm);
__attribute__((visibility("default")))  int MPI_Iprobe(int source, int tag, MPI_Comm comm, int *flag, MPI_Status *status);
__attribute__((visibility("default")))  int MPI_Irecv(void *buf, int count, MPI_Datatype datatype, int source, int tag, MPI_Comm comm, MPI_Request *request);
__attribute__((visibility("default")))  int MPI_Irsend(const void *buf, int count, MPI_Datatype datatype, int dest, int tag, MPI_Comm comm, MPI_Request *request);
__attribute__((visibility("default")))  int MPI_Isend(const void *buf, int count, MPI_Datatype datatype, int dest, int tag, MPI_Comm comm, MPI_Request *request);
__attribute__((visibility("default")))  int MPI_Issend(const void *buf, int count, MPI_Datatype datatype, int dest, int tag, MPI_Comm comm, MPI_Request *request);
__attribute__((visibility("default")))  int MPI_Is_thread_main(int *flag);
__attribute__((visibility("default")))  int MPI_Lookup_name(const char *service_name, MPI_Info info, char *port_name);
__attribute__((visibility("default")))  int MPI_Message_c2f(MPI_Message message);
__attribute__((visibility("default")))  MPI_Message MPI_Message_f2c(int message);
__attribute__((visibility("default")))  int MPI_Mprobe(int source, int tag, MPI_Comm comm, MPI_Message *message, MPI_Status *status);
__attribute__((visibility("default")))  int MPI_Mrecv(void *buf, int count, MPI_Datatype type, MPI_Message *message, MPI_Status *status);
__attribute__((visibility("default")))  int MPI_Neighbor_allgather(const void *sendbuf, int sendcount, MPI_Datatype sendtype, void *recvbuf, int recvcount, MPI_Datatype recvtype, MPI_Comm comm);
__attribute__((visibility("default")))  int MPI_Ineighbor_allgather(const void *sendbuf, int sendcount, MPI_Datatype sendtype, void *recvbuf, int recvcount, MPI_Datatype recvtype, MPI_Comm comm, MPI_Request *request);
__attribute__((visibility("default")))  int MPI_Neighbor_allgatherv(const void *sendbuf, int sendcount, MPI_Datatype sendtype, void *recvbuf, const int recvcounts[], const int displs[], MPI_Datatype recvtype, MPI_Comm comm);
__attribute__((visibility("default")))  int MPI_Ineighbor_allgatherv(const void *sendbuf, int sendcount, MPI_Datatype sendtype, void *recvbuf, const int recvcounts[], const int displs[], MPI_Datatype recvtype, MPI_Comm comm, MPI_Request *request);
__attribute__((visibility("default")))  int MPI_Neighbor_alltoall(const void *sendbuf, int sendcount, MPI_Datatype sendtype, void *recvbuf, int recvcount, MPI_Datatype recvtype, MPI_Comm comm);
__attribute__((visibility("default")))  int MPI_Ineighbor_alltoall(const void *sendbuf, int sendcount, MPI_Datatype sendtype, void *recvbuf, int recvcount, MPI_Datatype recvtype, MPI_Comm comm, MPI_Request *request);
__attribute__((visibility("default")))  int MPI_Neighbor_alltoallv(const void *sendbuf, const int sendcounts[], const int sdispls[],  MPI_Datatype sendtype, void *recvbuf, const int recvcounts[], const int rdispls[], MPI_Datatype recvtype, MPI_Comm comm);
__attribute__((visibility("default")))  int MPI_Ineighbor_alltoallv(const void *sendbuf, const int sendcounts[], const int sdispls[], MPI_Datatype sendtype, void *recvbuf, const int recvcounts[], const int rdispls[], MPI_Datatype recvtype, MPI_Comm comm, MPI_Request *request);
__attribute__((visibility("default")))  int MPI_Neighbor_alltoallw(const void *sendbuf, const int sendcounts[], const MPI_Aint sdispls[], const MPI_Datatype sendtypes[], void *recvbuf, const int recvcounts[], const MPI_Aint rdispls[], const MPI_Datatype recvtypes[], MPI_Comm comm);
__attribute__((visibility("default")))  int MPI_Ineighbor_alltoallw(const void *sendbuf, const int sendcounts[], const MPI_Aint sdispls[], const MPI_Datatype sendtypes[], void *recvbuf, const int recvcounts[], const MPI_Aint rdispls[], const MPI_Datatype recvtypes[], MPI_Comm comm, MPI_Request *request);
__attribute__((visibility("default")))  int MPI_Op_c2f(MPI_Op op);
__attribute__((visibility("default")))  int MPI_Op_commutative(MPI_Op op, int *commute);
__attribute__((visibility("default")))  int MPI_Op_create(MPI_User_function *function, int commute, MPI_Op *op);
__attribute__((visibility("default")))  int MPI_Open_port(MPI_Info info, char *port_name);
__attribute__((visibility("default")))  MPI_Op MPI_Op_f2c(int op);
__attribute__((visibility("default")))  int MPI_Op_free(MPI_Op *op);
__attribute__((visibility("default")))  int MPI_Pack_external(const char datarep[], const void *inbuf, int incount, MPI_Datatype datatype, void *outbuf, MPI_Aint outsize, MPI_Aint *position);
__attribute__((visibility("default")))  int MPI_Pack_external_size(const char datarep[], int incount, MPI_Datatype datatype, MPI_Aint *size);
__attribute__((visibility("default")))  int MPI_Pack(const void *inbuf, int incount, MPI_Datatype datatype, void *outbuf, int outsize, int *position, MPI_Comm comm);
__attribute__((visibility("default")))  int MPI_Pack_size(int incount, MPI_Datatype datatype, MPI_Comm comm, int *size);
__attribute__((visibility("default")))  int MPI_Pcontrol(const int level, ...);
__attribute__((visibility("default")))  int MPI_Probe(int source, int tag, MPI_Comm comm, MPI_Status *status);
__attribute__((visibility("default")))  int MPI_Publish_name(const char *service_name, MPI_Info info, const char *port_name);
__attribute__((visibility("default")))  int MPI_Put(const void *origin_addr, int origin_count, MPI_Datatype origin_datatype, int target_rank, MPI_Aint target_disp, int target_count, MPI_Datatype target_datatype, MPI_Win win);
__attribute__((visibility("default")))  int MPI_Query_thread(int *provided);
__attribute__((visibility("default")))  int MPI_Raccumulate(const void *origin_addr, int origin_count, MPI_Datatype origin_datatype, int target_rank, MPI_Aint target_disp, int target_count, MPI_Datatype target_datatype, MPI_Op op, MPI_Win win, MPI_Request *request);
__attribute__((visibility("default")))  int MPI_Recv_init(void *buf, int count, MPI_Datatype datatype, int source, int tag, MPI_Comm comm, MPI_Request *request);
__attribute__((visibility("default")))  int MPI_Recv(void *buf, int count, MPI_Datatype datatype, int source, int tag, MPI_Comm comm, MPI_Status *status);
__attribute__((visibility("default")))  int MPI_Reduce(const void *sendbuf, void *recvbuf, int count, MPI_Datatype datatype, MPI_Op op, int root, MPI_Comm comm);
__attribute__((visibility("default")))  int MPI_Ireduce(const void *sendbuf, void *recvbuf, int count, MPI_Datatype datatype, MPI_Op op, int root, MPI_Comm comm, MPI_Request *request);
__attribute__((visibility("default")))  int MPI_Reduce_local(const void *inbuf, void *inoutbuf, int count, MPI_Datatype datatype, MPI_Op op);
__attribute__((visibility("default")))  int MPI_Reduce_scatter(const void *sendbuf, void *recvbuf, const int recvcounts[], MPI_Datatype datatype, MPI_Op op, MPI_Comm comm);
__attribute__((visibility("default")))  int MPI_Ireduce_scatter(const void *sendbuf, void *recvbuf, const int recvcounts[], MPI_Datatype datatype, MPI_Op op, MPI_Comm comm, MPI_Request *request);
__attribute__((visibility("default")))  int MPI_Reduce_scatter_block(const void *sendbuf, void *recvbuf, int recvcount, MPI_Datatype datatype, MPI_Op op, MPI_Comm comm);
__attribute__((visibility("default")))  int MPI_Ireduce_scatter_block(const void *sendbuf, void *recvbuf, int recvcount, MPI_Datatype datatype, MPI_Op op, MPI_Comm comm, MPI_Request *request);
__attribute__((visibility("default")))  int MPI_Register_datarep(const char *datarep, MPI_Datarep_conversion_function *read_conversion_fn, MPI_Datarep_conversion_function *write_conversion_fn, MPI_Datarep_extent_function *dtype_file_extent_fn, void *extra_state);
__attribute__((visibility("default")))  int MPI_Request_c2f(MPI_Request request);
__attribute__((visibility("default")))  MPI_Request MPI_Request_f2c(int request);
__attribute__((visibility("default")))  int MPI_Request_free(MPI_Request *request);
__attribute__((visibility("default")))  int MPI_Request_get_status(MPI_Request request, int *flag, MPI_Status *status);
__attribute__((visibility("default")))  int MPI_Rget(void *origin_addr, int origin_count, MPI_Datatype origin_datatype, int target_rank, MPI_Aint target_disp, int target_count, MPI_Datatype target_datatype, MPI_Win win, MPI_Request *request);
__attribute__((visibility("default")))  int MPI_Rget_accumulate(const void *origin_addr, int origin_count, MPI_Datatype origin_datatype, void *result_addr, int result_count, MPI_Datatype result_datatype, int target_rank, MPI_Aint target_disp, int target_count, MPI_Datatype target_datatype, MPI_Op op, MPI_Win win, MPI_Request *request);
__attribute__((visibility("default")))  int MPI_Rput(const void *origin_addr, int origin_count, MPI_Datatype origin_datatype, int target_rank, MPI_Aint target_disp, int target_cout, MPI_Datatype target_datatype, MPI_Win win, MPI_Request *request);
__attribute__((visibility("default")))  int MPI_Rsend(const void *ibuf, int count, MPI_Datatype datatype, int dest, int tag, MPI_Comm comm);
__attribute__((visibility("default")))  int MPI_Rsend_init(const void *buf, int count, MPI_Datatype datatype, int dest, int tag, MPI_Comm comm, MPI_Request *request);
__attribute__((visibility("default")))  int MPI_Scan(const void *sendbuf, void *recvbuf, int count, MPI_Datatype datatype, MPI_Op op, MPI_Comm comm);
__attribute__((visibility("default")))  int MPI_Iscan(const void *sendbuf, void *recvbuf, int count, MPI_Datatype datatype, MPI_Op op, MPI_Comm comm, MPI_Request *request);
__attribute__((visibility("default")))  int MPI_Scatter(const void *sendbuf, int sendcount, MPI_Datatype sendtype, void *recvbuf, int recvcount, MPI_Datatype recvtype, int root, MPI_Comm comm);
__attribute__((visibility("default")))  int MPI_Iscatter(const void *sendbuf, int sendcount, MPI_Datatype sendtype, void *recvbuf, int recvcount, MPI_Datatype recvtype, int root, MPI_Comm comm, MPI_Request *request);
__attribute__((visibility("default")))  int MPI_Scatterv(const void *sendbuf, const int sendcounts[], const int displs[], MPI_Datatype sendtype, void *recvbuf, int recvcount, MPI_Datatype recvtype, int root, MPI_Comm comm);
__attribute__((visibility("default")))  int MPI_Iscatterv(const void *sendbuf, const int sendcounts[], const int displs[], MPI_Datatype sendtype, void *recvbuf, int recvcount, MPI_Datatype recvtype, int root, MPI_Comm comm, MPI_Request *request);
__attribute__((visibility("default")))  int MPI_Send_init(const void *buf, int count, MPI_Datatype datatype, int dest, int tag, MPI_Comm comm, MPI_Request *request);
__attribute__((visibility("default")))  int MPI_Send(const void *buf, int count, MPI_Datatype datatype, int dest, int tag, MPI_Comm comm);
__attribute__((visibility("default")))  int MPI_Sendrecv(const void *sendbuf, int sendcount, MPI_Datatype sendtype, int dest, int sendtag, void *recvbuf, int recvcount, MPI_Datatype recvtype, int source, int recvtag, MPI_Comm comm,  MPI_Status *status);
__attribute__((visibility("default")))  int MPI_Sendrecv_replace(void * buf, int count, MPI_Datatype datatype, int dest, int sendtag, int source, int recvtag, MPI_Comm comm, MPI_Status *status);
__attribute__((visibility("default")))  int MPI_Ssend_init(const void *buf, int count, MPI_Datatype datatype, int dest, int tag, MPI_Comm comm, MPI_Request *request);
__attribute__((visibility("default")))  int MPI_Ssend(const void *buf, int count, MPI_Datatype datatype, int dest, int tag, MPI_Comm comm);
__attribute__((visibility("default")))  int MPI_Start(MPI_Request *request);
__attribute__((visibility("default")))  int MPI_Startall(int count, MPI_Request array_of_requests[]);
__attribute__((visibility("default")))  int MPI_Status_c2f(const MPI_Status *c_status, int *f_status);
__attribute__((visibility("default")))  int MPI_Status_f2c(const int *f_status, MPI_Status *c_status);
__attribute__((visibility("default")))  int MPI_Status_set_cancelled(MPI_Status *status, int flag);
__attribute__((visibility("default")))  int MPI_Status_set_elements(MPI_Status *status, MPI_Datatype datatype, int count);
__attribute__((visibility("default")))  int MPI_Status_set_elements_x(MPI_Status *status, MPI_Datatype datatype, MPI_Count count);
__attribute__((visibility("default")))  int MPI_Testall(int count, MPI_Request array_of_requests[], int *flag, MPI_Status array_of_statuses[]);
__attribute__((visibility("default")))  int MPI_Testany(int count, MPI_Request array_of_requests[], int *index, int *flag, MPI_Status *status);
__attribute__((visibility("default")))  int MPI_Test(MPI_Request *request, int *flag, MPI_Status *status);
__attribute__((visibility("default")))  int MPI_Test_cancelled(const MPI_Status *status, int *flag);
__attribute__((visibility("default")))  int MPI_Testsome(int incount, MPI_Request array_of_requests[], int *outcount, int array_of_indices[], MPI_Status array_of_statuses[]);
__attribute__((visibility("default")))  int MPI_Topo_test(MPI_Comm comm, int *status);
__attribute__((visibility("default")))  int MPI_Type_c2f(MPI_Datatype datatype);
__attribute__((visibility("default")))  int MPI_Type_commit(MPI_Datatype *type);
__attribute__((visibility("default")))  int MPI_Type_contiguous(int count, MPI_Datatype oldtype, MPI_Datatype *newtype);
__attribute__((visibility("default")))  int MPI_Type_create_darray(int size, int rank, int ndims, const int gsize_array[], const int distrib_array[], const int darg_array[], const int psize_array[], int order, MPI_Datatype oldtype, MPI_Datatype *newtype);
__attribute__((visibility("default")))  int MPI_Type_create_f90_complex(int p, int r, MPI_Datatype *newtype);
__attribute__((visibility("default")))  int MPI_Type_create_f90_integer(int r, MPI_Datatype *newtype);
__attribute__((visibility("default")))  int MPI_Type_create_f90_real(int p, int r, MPI_Datatype *newtype);
__attribute__((visibility("default")))  int MPI_Type_create_hindexed_block(int count, int blocklength, const MPI_Aint array_of_displacements[], MPI_Datatype oldtype, MPI_Datatype *newtype);
__attribute__((visibility("default")))  int MPI_Type_create_hindexed(int count, const int array_of_blocklengths[], const MPI_Aint array_of_displacements[], MPI_Datatype oldtype, MPI_Datatype *newtype);
__attribute__((visibility("default")))  int MPI_Type_create_hvector(int count, int blocklength, MPI_Aint stride, MPI_Datatype oldtype, MPI_Datatype *newtype);
__attribute__((visibility("default")))  int MPI_Type_create_keyval(MPI_Type_copy_attr_function *type_copy_attr_fn, MPI_Type_delete_attr_function *type_delete_attr_fn, int *type_keyval, void *extra_state);
__attribute__((visibility("default")))  int MPI_Type_create_indexed_block(int count, int blocklength, const int array_of_displacements[], MPI_Datatype oldtype, MPI_Datatype *newtype);
__attribute__((visibility("default")))  int MPI_Type_create_struct(int count, const int array_of_block_lengths[], const MPI_Aint array_of_displacements[], const MPI_Datatype array_of_types[], MPI_Datatype *newtype);
__attribute__((visibility("default")))  int MPI_Type_create_subarray(int ndims, const int size_array[], const int subsize_array[], const int start_array[], int order, MPI_Datatype oldtype, MPI_Datatype *newtype);
__attribute__((visibility("default")))  int MPI_Type_create_resized(MPI_Datatype oldtype, MPI_Aint lb, MPI_Aint extent, MPI_Datatype *newtype);
__attribute__((visibility("default")))  int MPI_Type_delete_attr(MPI_Datatype type, int type_keyval);
__attribute__((visibility("default")))  int MPI_Type_dup(MPI_Datatype type, MPI_Datatype *newtype);
__attribute__((visibility("default")))  int MPI_Type_free(MPI_Datatype *type);
__attribute__((visibility("default")))  int MPI_Type_free_keyval(int *type_keyval);
__attribute__((visibility("default")))  MPI_Datatype MPI_Type_f2c(int datatype);
__attribute__((visibility("default")))  int MPI_Type_get_attr(MPI_Datatype type, int type_keyval, void *attribute_val, int *flag);
__attribute__((visibility("default")))  int MPI_Type_get_contents(MPI_Datatype mtype, int max_integers, int max_addresses, int max_datatypes, int array_of_integers[], MPI_Aint array_of_addresses[], MPI_Datatype array_of_datatypes[]);
__attribute__((visibility("default")))  int MPI_Type_get_envelope(MPI_Datatype type, int *num_integers, int *num_addresses, int *num_datatypes, int *combiner);
__attribute__((visibility("default")))  int MPI_Type_get_extent(MPI_Datatype type, MPI_Aint *lb, MPI_Aint *extent);
__attribute__((visibility("default")))  int MPI_Type_get_extent_x(MPI_Datatype type, MPI_Count *lb, MPI_Count *extent);
__attribute__((visibility("default")))  int MPI_Type_get_name(MPI_Datatype type, char *type_name, int *resultlen);
__attribute__((visibility("default")))  int MPI_Type_get_true_extent(MPI_Datatype datatype, MPI_Aint *true_lb, MPI_Aint *true_extent);
__attribute__((visibility("default")))  int MPI_Type_get_true_extent_x(MPI_Datatype datatype, MPI_Count *true_lb, MPI_Count *true_extent);
__attribute__((visibility("default")))  int MPI_Type_indexed(int count, const int array_of_blocklengths[], const int array_of_displacements[], MPI_Datatype oldtype, MPI_Datatype *newtype);
__attribute__((visibility("default")))  int MPI_Type_match_size(int typeclass, int size, MPI_Datatype *type);
__attribute__((visibility("default")))  int MPI_Type_set_attr(MPI_Datatype type, int type_keyval, void *attr_val);
__attribute__((visibility("default")))  int MPI_Type_set_name(MPI_Datatype type, const char *type_name);
__attribute__((visibility("default")))  int MPI_Type_size(MPI_Datatype type, int *size);
__attribute__((visibility("default")))  int MPI_Type_size_x(MPI_Datatype type, MPI_Count *size);
__attribute__((visibility("default")))  int MPI_Type_vector(int count, int blocklength, int stride, MPI_Datatype oldtype, MPI_Datatype *newtype);
__attribute__((visibility("default")))  int MPI_Unpack(const void *inbuf, int insize, int *position, void *outbuf, int outcount, MPI_Datatype datatype, MPI_Comm comm);
__attribute__((visibility("default")))  int MPI_Unpublish_name(const char *service_name, MPI_Info info, const char *port_name);
__attribute__((visibility("default")))  int MPI_Unpack_external (const char datarep[], const void *inbuf, MPI_Aint insize, MPI_Aint *position, void *outbuf, int outcount, MPI_Datatype datatype);
__attribute__((visibility("default")))  int MPI_Waitall(int count, MPI_Request array_of_requests[], MPI_Status *array_of_statuses);
__attribute__((visibility("default")))  int MPI_Waitany(int count, MPI_Request array_of_requests[], int *index, MPI_Status *status);
__attribute__((visibility("default")))  int MPI_Wait(MPI_Request *request, MPI_Status *status);
__attribute__((visibility("default")))  int MPI_Waitsome(int incount, MPI_Request array_of_requests[], int *outcount, int array_of_indices[], MPI_Status array_of_statuses[]);
__attribute__((visibility("default")))  int MPI_Win_allocate(MPI_Aint size, int disp_unit, MPI_Info info, MPI_Comm comm, void *baseptr, MPI_Win *win);
__attribute__((visibility("default")))  int MPI_Win_allocate_shared(MPI_Aint size, int disp_unit, MPI_Info info, MPI_Comm comm, void *baseptr, MPI_Win *win);
__attribute__((visibility("default")))  int MPI_Win_attach(MPI_Win win, void *base, MPI_Aint size);
__attribute__((visibility("default")))  int MPI_Win_c2f(MPI_Win win);
__attribute__((visibility("default")))  int MPI_Win_call_errhandler(MPI_Win win, int errorcode);
__attribute__((visibility("default")))  int MPI_Win_complete(MPI_Win win);
__attribute__((visibility("default")))  int MPI_Win_create(void *base, MPI_Aint size, int disp_unit, MPI_Info info, MPI_Comm comm, MPI_Win *win);
__attribute__((visibility("default")))  int MPI_Win_create_dynamic(MPI_Info info, MPI_Comm comm, MPI_Win *win);
__attribute__((visibility("default")))  int MPI_Win_create_errhandler(MPI_Win_errhandler_function *function, MPI_Errhandler *errhandler);
__attribute__((visibility("default")))  int MPI_Win_create_keyval(MPI_Win_copy_attr_function *win_copy_attr_fn, MPI_Win_delete_attr_function *win_delete_attr_fn, int *win_keyval, void *extra_state);
__attribute__((visibility("default")))  int MPI_Win_delete_attr(MPI_Win win, int win_keyval);
__attribute__((visibility("default")))  int MPI_Win_detach(MPI_Win win, const void *base);
__attribute__((visibility("default")))  MPI_Win MPI_Win_f2c(int win);
__attribute__((visibility("default")))  int MPI_Win_fence(int assert, MPI_Win win);
__attribute__((visibility("default")))  int MPI_Win_flush(int rank, MPI_Win win);
__attribute__((visibility("default")))  int MPI_Win_flush_all(MPI_Win win);
__attribute__((visibility("default")))  int MPI_Win_flush_local(int rank, MPI_Win win);
__attribute__((visibility("default")))  int MPI_Win_flush_local_all(MPI_Win win);
__attribute__((visibility("default")))  int MPI_Win_free(MPI_Win *win);
__attribute__((visibility("default")))  int MPI_Win_free_keyval(int *win_keyval);
__attribute__((visibility("default")))  int MPI_Win_get_attr(MPI_Win win, int win_keyval, void *attribute_val, int *flag);
__attribute__((visibility("default")))  int MPI_Win_get_errhandler(MPI_Win win, MPI_Errhandler *errhandler);
__attribute__((visibility("default")))  int MPI_Win_get_group(MPI_Win win, MPI_Group *group);
__attribute__((visibility("default")))  int MPI_Win_get_info(MPI_Win win, MPI_Info *info_used);
__attribute__((visibility("default")))  int MPI_Win_get_name(MPI_Win win, char *win_name, int *resultlen);
__attribute__((visibility("default")))  int MPI_Win_lock(int lock_type, int rank, int assert, MPI_Win win);
__attribute__((visibility("default")))  int MPI_Win_lock_all(int assert, MPI_Win win);
__attribute__((visibility("default")))  int MPI_Win_post(MPI_Group group, int assert, MPI_Win win);
__attribute__((visibility("default")))  int MPI_Win_set_attr(MPI_Win win, int win_keyval, void *attribute_val);
__attribute__((visibility("default")))  int MPI_Win_set_errhandler(MPI_Win win, MPI_Errhandler errhandler);
__attribute__((visibility("default")))  int MPI_Win_set_info(MPI_Win win, MPI_Info info);
__attribute__((visibility("default")))  int MPI_Win_set_name(MPI_Win win, const char *win_name);
__attribute__((visibility("default")))  int MPI_Win_shared_query(MPI_Win win, int rank, MPI_Aint *size, int *disp_unit, void *baseptr);
__attribute__((visibility("default")))  int MPI_Win_start(MPI_Group group, int assert, MPI_Win win);
__attribute__((visibility("default")))  int MPI_Win_sync(MPI_Win win);
__attribute__((visibility("default")))  int MPI_Win_test(MPI_Win win, int *flag);
__attribute__((visibility("default")))  int MPI_Win_unlock(int rank, MPI_Win win);
__attribute__((visibility("default")))  int MPI_Win_unlock_all(MPI_Win win);
__attribute__((visibility("default")))  int MPI_Win_wait(MPI_Win win);
__attribute__((visibility("default")))  double MPI_Wtick(void);
__attribute__((visibility("default")))  double MPI_Wtime(void);
__attribute__((visibility("default")))  int PMPI_Abort(MPI_Comm comm, int errorcode);
__attribute__((visibility("default")))  int PMPI_Accumulate(const void *origin_addr, int origin_count, MPI_Datatype origin_datatype, int target_rank, MPI_Aint target_disp, int target_count, MPI_Datatype target_datatype, MPI_Op op, MPI_Win win);
__attribute__((visibility("default")))  int PMPI_Add_error_class(int *errorclass);
__attribute__((visibility("default")))  int PMPI_Add_error_code(int errorclass, int *errorcode);
__attribute__((visibility("default")))  int PMPI_Add_error_string(int errorcode, const char *string);
__attribute__((visibility("default")))  int PMPI_Allgather(const void *sendbuf, int sendcount, MPI_Datatype sendtype, void *recvbuf, int recvcount, MPI_Datatype recvtype, MPI_Comm comm);
__attribute__((visibility("default")))  int PMPI_Iallgather(const void *sendbuf, int sendcount, MPI_Datatype sendtype, void *recvbuf, int recvcount, MPI_Datatype recvtype, MPI_Comm comm, MPI_Request *request);
__attribute__((visibility("default")))  int PMPI_Allgatherv(const void *sendbuf, int sendcount, MPI_Datatype sendtype, void *recvbuf, const int recvcounts[], const int displs[], MPI_Datatype recvtype, MPI_Comm comm);
__attribute__((visibility("default")))  int PMPI_Iallgatherv(const void *sendbuf, int sendcount, MPI_Datatype sendtype, void *recvbuf, const int recvcounts[], const int displs[], MPI_Datatype recvtype, MPI_Comm comm, MPI_Request *request);
__attribute__((visibility("default")))  int PMPI_Alloc_mem(MPI_Aint size, MPI_Info info, void *baseptr);
__attribute__((visibility("default")))  int PMPI_Allreduce(const void *sendbuf, void *recvbuf, int count, MPI_Datatype datatype, MPI_Op op, MPI_Comm comm);
__attribute__((visibility("default")))  int PMPI_Iallreduce(const void *sendbuf, void *recvbuf, int count, MPI_Datatype datatype, MPI_Op op, MPI_Comm comm, MPI_Request *request);
__attribute__((visibility("default")))  int PMPI_Alltoall(const void *sendbuf, int sendcount, MPI_Datatype sendtype, void *recvbuf, int recvcount, MPI_Datatype recvtype, MPI_Comm comm);
__attribute__((visibility("default")))  int PMPI_Ialltoall(const void *sendbuf, int sendcount, MPI_Datatype sendtype, void *recvbuf, int recvcount, MPI_Datatype recvtype, MPI_Comm comm, MPI_Request *request);
__attribute__((visibility("default")))  int PMPI_Alltoallv(const void *sendbuf, const int sendcounts[], const int sdispls[], MPI_Datatype sendtype, void *recvbuf, const int recvcounts[], const int rdispls[], MPI_Datatype recvtype, MPI_Comm comm);
__attribute__((visibility("default")))  int PMPI_Ialltoallv(const void *sendbuf, const int sendcounts[], const int sdispls[], MPI_Datatype sendtype, void *recvbuf, const int recvcounts[], const int rdispls[], MPI_Datatype recvtype, MPI_Comm comm, MPI_Request *request);
__attribute__((visibility("default")))  int PMPI_Alltoallw(const void *sendbuf, const int sendcounts[], const int sdispls[], const MPI_Datatype sendtypes[], void *recvbuf, const int recvcounts[], const int rdispls[], const MPI_Datatype recvtypes[], MPI_Comm comm);
__attribute__((visibility("default")))  int PMPI_Ialltoallw(const void *sendbuf, const int sendcounts[], const int sdispls[], const MPI_Datatype sendtypes[], void *recvbuf, const int recvcounts[], const int rdispls[], const MPI_Datatype recvtypes[], MPI_Comm comm, MPI_Request *request);
__attribute__((visibility("default")))  int PMPI_Dist_graph_create(MPI_Comm comm_old, int n, const int nodes[], const int degrees[], const int targets[], const int weights[], MPI_Info info, int reorder, MPI_Comm * newcomm);
__attribute__((visibility("default")))  int PMPI_Dist_graph_create_adjacent(MPI_Comm comm_old, int indegree, const int sources[], const int sourceweights[], int outdegree, const int destinations[], const int destweights[], MPI_Info info, int reorder, MPI_Comm *comm_dist_graph);
__attribute__((visibility("default"))) int PMPI_Dist_graph_neighbors(MPI_Comm comm, int maxindegree, int sources[], int sourceweights[], int maxoutdegree, int destinations[], int destweights[]);
__attribute__((visibility("default")))  int PMPI_Dist_graph_neighbors_count(MPI_Comm comm, int *inneighbors, int *outneighbors, int *weighted);
__attribute__((visibility("default")))  int PMPI_Barrier(MPI_Comm comm);
__attribute__((visibility("default")))  int PMPI_Ibarrier(MPI_Comm comm, MPI_Request *request);
__attribute__((visibility("default")))  int PMPI_Bcast(void *buffer, int count, MPI_Datatype datatype, int root, MPI_Comm comm);
__attribute__((visibility("default")))  int PMPI_Ibcast(void *buffer, int count, MPI_Datatype datatype, int root, MPI_Comm comm, MPI_Request *request);
__attribute__((visibility("default")))  int PMPI_Bsend(const void *buf, int count, MPI_Datatype datatype, int dest, int tag, MPI_Comm comm);
__attribute__((visibility("default")))  int PMPI_Bsend_init(const void *buf, int count, MPI_Datatype datatype, int dest, int tag, MPI_Comm comm, MPI_Request *request);
__attribute__((visibility("default")))  int PMPI_Buffer_attach(void *buffer, int size);
__attribute__((visibility("default")))  int PMPI_Buffer_detach(void *buffer, int *size);
__attribute__((visibility("default")))  int PMPI_Cancel(MPI_Request *request);
__attribute__((visibility("default")))  int PMPI_Cart_coords(MPI_Comm comm, int rank, int maxdims, int coords[]);
__attribute__((visibility("default")))  int PMPI_Cart_create(MPI_Comm old_comm, int ndims, const int dims[], const int periods[], int reorder, MPI_Comm *comm_cart);
__attribute__((visibility("default")))  int PMPI_Cart_get(MPI_Comm comm, int maxdims, int dims[], int periods[], int coords[]);
__attribute__((visibility("default")))  int PMPI_Cart_map(MPI_Comm comm, int ndims, const int dims[], const int periods[], int *newrank);
__attribute__((visibility("default")))  int PMPI_Cart_rank(MPI_Comm comm, const int coords[], int *rank);
__attribute__((visibility("default")))  int PMPI_Cart_shift(MPI_Comm comm, int direction, int disp, int *rank_source, int *rank_dest);
__attribute__((visibility("default")))  int PMPI_Cart_sub(MPI_Comm comm, const int remain_dims[], MPI_Comm *new_comm);
__attribute__((visibility("default")))  int PMPI_Cartdim_get(MPI_Comm comm, int *ndims);
__attribute__((visibility("default")))  int PMPI_Close_port(const char *port_name);
__attribute__((visibility("default")))  int PMPI_Comm_accept(const char *port_name, MPI_Info info, int root, MPI_Comm comm, MPI_Comm *newcomm);
__attribute__((visibility("default")))  int PMPI_Comm_c2f(MPI_Comm comm);
__attribute__((visibility("default")))  int PMPI_Comm_call_errhandler(MPI_Comm comm, int errorcode);
__attribute__((visibility("default")))  int PMPI_Comm_compare(MPI_Comm comm1, MPI_Comm comm2, int *result);
__attribute__((visibility("default")))  int PMPI_Comm_connect(const char *port_name, MPI_Info info, int root, MPI_Comm comm, MPI_Comm *newcomm);
__attribute__((visibility("default")))  int PMPI_Comm_create_errhandler(MPI_Comm_errhandler_function *function, MPI_Errhandler *errhandler);
__attribute__((visibility("default")))  int PMPI_Comm_create_keyval(MPI_Comm_copy_attr_function *comm_copy_attr_fn, MPI_Comm_delete_attr_function *comm_delete_attr_fn, int *comm_keyval, void *extra_state);
__attribute__((visibility("default")))  int PMPI_Comm_create_group(MPI_Comm comm, MPI_Group group, int tag, MPI_Comm *newcomm);
__attribute__((visibility("default")))  int PMPI_Comm_create(MPI_Comm comm, MPI_Group group, MPI_Comm *newcomm);
__attribute__((visibility("default")))  int PMPI_Comm_delete_attr(MPI_Comm comm, int comm_keyval);
__attribute__((visibility("default")))  int PMPI_Comm_disconnect(MPI_Comm *comm);
__attribute__((visibility("default")))  int PMPI_Comm_dup(MPI_Comm comm, MPI_Comm *newcomm);
__attribute__((visibility("default")))  int PMPI_Comm_idup(MPI_Comm comm, MPI_Comm *newcomm, MPI_Request *request);
__attribute__((visibility("default")))  int PMPI_Comm_dup_with_info(MPI_Comm comm, MPI_Info info, MPI_Comm *newcomm);
__attribute__((visibility("default")))  MPI_Comm PMPI_Comm_f2c(int comm);
__attribute__((visibility("default")))  int PMPI_Comm_free_keyval(int *comm_keyval);
__attribute__((visibility("default")))  int PMPI_Comm_free(MPI_Comm *comm);
__attribute__((visibility("default")))  int PMPI_Comm_get_attr(MPI_Comm comm, int comm_keyval, void *attribute_val, int *flag);
__attribute__((visibility("default")))  int PMPI_Comm_get_errhandler(MPI_Comm comm, MPI_Errhandler *erhandler);
__attribute__((visibility("default")))  int PMPI_Comm_get_info(MPI_Comm comm, MPI_Info *info_used);
__attribute__((visibility("default")))  int PMPI_Comm_get_name(MPI_Comm comm, char *comm_name, int *resultlen);
__attribute__((visibility("default")))  int PMPI_Comm_get_parent(MPI_Comm *parent);
__attribute__((visibility("default")))  int PMPI_Comm_group(MPI_Comm comm, MPI_Group *group);
__attribute__((visibility("default")))  int PMPI_Comm_join(int fd, MPI_Comm *intercomm);
__attribute__((visibility("default")))  int PMPI_Comm_rank(MPI_Comm comm, int *rank);
__attribute__((visibility("default")))  int PMPI_Comm_remote_group(MPI_Comm comm, MPI_Group *group);
__attribute__((visibility("default")))  int PMPI_Comm_remote_size(MPI_Comm comm, int *size);
__attribute__((visibility("default")))  int PMPI_Comm_set_attr(MPI_Comm comm, int comm_keyval, void *attribute_val);
__attribute__((visibility("default")))  int PMPI_Comm_set_errhandler(MPI_Comm comm, MPI_Errhandler errhandler);
__attribute__((visibility("default")))  int PMPI_Comm_set_info(MPI_Comm comm, MPI_Info info);
__attribute__((visibility("default")))  int PMPI_Comm_set_name(MPI_Comm comm, const char *comm_name);
__attribute__((visibility("default")))  int PMPI_Comm_size(MPI_Comm comm, int *size);
__attribute__((visibility("default")))  int PMPI_Comm_spawn(const char *command, char *argv[], int maxprocs, MPI_Info info, int root, MPI_Comm comm, MPI_Comm *intercomm, int array_of_errcodes[]);
__attribute__((visibility("default")))  int PMPI_Comm_spawn_multiple(int count, char *array_of_commands[], char **array_of_argv[], const int array_of_maxprocs[], const MPI_Info array_of_info[], int root, MPI_Comm comm, MPI_Comm *intercomm, int array_of_errcodes[]);
__attribute__((visibility("default")))  int PMPI_Comm_split(MPI_Comm comm, int color, int key, MPI_Comm *newcomm);
__attribute__((visibility("default")))  int PMPI_Comm_split_type(MPI_Comm comm, int split_type, int key, MPI_Info info, MPI_Comm *newcomm);
__attribute__((visibility("default")))  int PMPI_Comm_test_inter(MPI_Comm comm, int *flag);
__attribute__((visibility("default")))  int PMPI_Compare_and_swap(const void *origin_addr, const void *compare_addr, void *result_addr, MPI_Datatype datatype, int target_rank, MPI_Aint target_disp, MPI_Win win);
__attribute__((visibility("default")))  int PMPI_Dims_create(int nnodes, int ndims, int dims[]);
__attribute__((visibility("default")))  int PMPI_Errhandler_c2f(MPI_Errhandler errhandler);
__attribute__((visibility("default")))  MPI_Errhandler PMPI_Errhandler_f2c(int errhandler);
__attribute__((visibility("default")))  int PMPI_Errhandler_free(MPI_Errhandler *errhandler);
__attribute__((visibility("default")))  int PMPI_Error_class(int errorcode, int *errorclass);
__attribute__((visibility("default")))  int PMPI_Error_string(int errorcode, char *string, int *resultlen);
__attribute__((visibility("default")))  int PMPI_Exscan(const void *sendbuf, void *recvbuf, int count, MPI_Datatype datatype, MPI_Op op, MPI_Comm comm);
__attribute__((visibility("default")))  int PMPI_Fetch_and_op(const void *origin_addr, void *result_addr, MPI_Datatype datatype, int target_rank, MPI_Aint target_disp, MPI_Op op, MPI_Win win);
__attribute__((visibility("default")))  int PMPI_Iexscan(const void *sendbuf, void *recvbuf, int count, MPI_Datatype datatype, MPI_Op op, MPI_Comm comm, MPI_Request *request);
__attribute__((visibility("default")))  int PMPI_File_c2f(MPI_File file);
__attribute__((visibility("default")))  MPI_File PMPI_File_f2c(int file);
__attribute__((visibility("default")))  int PMPI_File_call_errhandler(MPI_File fh, int errorcode);
__attribute__((visibility("default")))  int PMPI_File_create_errhandler(MPI_File_errhandler_function *function, MPI_Errhandler *errhandler);
__attribute__((visibility("default")))  int PMPI_File_set_errhandler( MPI_File file, MPI_Errhandler errhandler);
__attribute__((visibility("default")))  int PMPI_File_get_errhandler( MPI_File file, MPI_Errhandler *errhandler);
__attribute__((visibility("default")))  int PMPI_File_open(MPI_Comm comm, const char *filename, int amode, MPI_Info info, MPI_File *fh);
__attribute__((visibility("default")))  int PMPI_File_close(MPI_File *fh);
__attribute__((visibility("default")))  int PMPI_File_delete(const char *filename, MPI_Info info);
__attribute__((visibility("default")))  int PMPI_File_set_size(MPI_File fh, MPI_Offset size);
__attribute__((visibility("default")))  int PMPI_File_preallocate(MPI_File fh, MPI_Offset size);
__attribute__((visibility("default")))  int PMPI_File_get_size(MPI_File fh, MPI_Offset *size);
__attribute__((visibility("default")))  int PMPI_File_get_group(MPI_File fh, MPI_Group *group);
__attribute__((visibility("default")))  int PMPI_File_get_amode(MPI_File fh, int *amode);
__attribute__((visibility("default")))  int PMPI_File_set_info(MPI_File fh, MPI_Info info);
__attribute__((visibility("default")))  int PMPI_File_get_info(MPI_File fh, MPI_Info *info_used);
__attribute__((visibility("default")))  int PMPI_File_set_view(MPI_File fh, MPI_Offset disp, MPI_Datatype etype, MPI_Datatype filetype, const char *datarep, MPI_Info info);
__attribute__((visibility("default")))  int PMPI_File_get_view(MPI_File fh, MPI_Offset *disp, MPI_Datatype *etype, MPI_Datatype *filetype, char *datarep);
__attribute__((visibility("default")))  int PMPI_File_read_at(MPI_File fh, MPI_Offset offset, void *buf, int count, MPI_Datatype datatype, MPI_Status *status);
__attribute__((visibility("default")))  int PMPI_File_read_at_all(MPI_File fh, MPI_Offset offset, void *buf, int count, MPI_Datatype datatype, MPI_Status *status);
__attribute__((visibility("default")))  int PMPI_File_write_at(MPI_File fh, MPI_Offset offset, const void *buf, int count, MPI_Datatype datatype, MPI_Status *status);
__attribute__((visibility("default")))  int PMPI_File_write_at_all(MPI_File fh, MPI_Offset offset, const void *buf, int count, MPI_Datatype datatype, MPI_Status *status);
__attribute__((visibility("default")))  int PMPI_File_iread_at(MPI_File fh, MPI_Offset offset, void *buf, int count, MPI_Datatype datatype, MPI_Request *request);
__attribute__((visibility("default")))  int PMPI_File_iwrite_at(MPI_File fh, MPI_Offset offset, const void *buf, int count, MPI_Datatype datatype, MPI_Request *request);
__attribute__((visibility("default")))  int PMPI_File_iread_at_all(MPI_File fh, MPI_Offset offset, void *buf, int count, MPI_Datatype datatype, MPI_Request *request);
__attribute__((visibility("default")))  int PMPI_File_iwrite_at_all(MPI_File fh, MPI_Offset offset, const void *buf, int count, MPI_Datatype datatype, MPI_Request *request);
__attribute__((visibility("default")))  int PMPI_File_read(MPI_File fh, void *buf, int count, MPI_Datatype datatype, MPI_Status *status);
__attribute__((visibility("default")))  int PMPI_File_read_all(MPI_File fh, void *buf, int count, MPI_Datatype datatype, MPI_Status *status);
__attribute__((visibility("default")))  int PMPI_File_write(MPI_File fh, const void *buf, int count, MPI_Datatype datatype, MPI_Status *status);
__attribute__((visibility("default")))  int PMPI_File_write_all(MPI_File fh, const void *buf, int count, MPI_Datatype datatype, MPI_Status *status);
__attribute__((visibility("default")))  int PMPI_File_iread(MPI_File fh, void *buf, int count, MPI_Datatype datatype, MPI_Request *request);
__attribute__((visibility("default")))  int PMPI_File_iwrite(MPI_File fh, const void *buf, int count, MPI_Datatype datatype, MPI_Request *request);
__attribute__((visibility("default")))  int PMPI_File_iread_all(MPI_File fh, void *buf, int count, MPI_Datatype datatype, MPI_Request *request);
__attribute__((visibility("default")))  int PMPI_File_iwrite_all(MPI_File fh, const void *buf, int count, MPI_Datatype datatype, MPI_Request *request);
__attribute__((visibility("default")))  int PMPI_File_seek(MPI_File fh, MPI_Offset offset, int whence);
__attribute__((visibility("default")))  int PMPI_File_get_position(MPI_File fh, MPI_Offset *offset);
__attribute__((visibility("default")))  int PMPI_File_get_byte_offset(MPI_File fh, MPI_Offset offset, MPI_Offset *disp);
__attribute__((visibility("default")))  int PMPI_File_read_shared(MPI_File fh, void *buf, int count, MPI_Datatype datatype, MPI_Status *status);
__attribute__((visibility("default")))  int PMPI_File_write_shared(MPI_File fh, const void *buf, int count, MPI_Datatype datatype, MPI_Status *status);
__attribute__((visibility("default")))  int PMPI_File_iread_shared(MPI_File fh, void *buf, int count, MPI_Datatype datatype, MPI_Request *request);
__attribute__((visibility("default")))  int PMPI_File_iwrite_shared(MPI_File fh, const void *buf, int count, MPI_Datatype datatype, MPI_Request *request);
__attribute__((visibility("default")))  int PMPI_File_read_ordered(MPI_File fh, void *buf, int count, MPI_Datatype datatype, MPI_Status *status);
__attribute__((visibility("default")))  int PMPI_File_write_ordered(MPI_File fh, const void *buf, int count, MPI_Datatype datatype, MPI_Status *status);
__attribute__((visibility("default")))  int PMPI_File_seek_shared(MPI_File fh, MPI_Offset offset, int whence);
__attribute__((visibility("default")))  int PMPI_File_get_position_shared(MPI_File fh, MPI_Offset *offset);
__attribute__((visibility("default")))  int PMPI_File_read_at_all_begin(MPI_File fh, MPI_Offset offset, void *buf, int count, MPI_Datatype datatype);
__attribute__((visibility("default")))  int PMPI_File_read_at_all_end(MPI_File fh, void *buf, MPI_Status *status);
__attribute__((visibility("default")))  int PMPI_File_write_at_all_begin(MPI_File fh, MPI_Offset offset, const void *buf, int count, MPI_Datatype datatype);
__attribute__((visibility("default")))  int PMPI_File_write_at_all_end(MPI_File fh, const void *buf, MPI_Status *status);
__attribute__((visibility("default")))  int PMPI_File_read_all_begin(MPI_File fh, void *buf, int count, MPI_Datatype datatype);
__attribute__((visibility("default")))  int PMPI_File_read_all_end(MPI_File fh, void *buf, MPI_Status *status);
__attribute__((visibility("default")))  int PMPI_File_write_all_begin(MPI_File fh, const void *buf, int count, MPI_Datatype datatype);
__attribute__((visibility("default")))  int PMPI_File_write_all_end(MPI_File fh, const void *buf, MPI_Status *status);
__attribute__((visibility("default")))  int PMPI_File_read_ordered_begin(MPI_File fh, void *buf, int count, MPI_Datatype datatype);
__attribute__((visibility("default")))  int PMPI_File_read_ordered_end(MPI_File fh, void *buf, MPI_Status *status);
__attribute__((visibility("default")))  int PMPI_File_write_ordered_begin(MPI_File fh, const void *buf, int count, MPI_Datatype datatype);
__attribute__((visibility("default")))  int PMPI_File_write_ordered_end(MPI_File fh, const void *buf, MPI_Status *status);
__attribute__((visibility("default")))  int PMPI_File_get_type_extent(MPI_File fh, MPI_Datatype datatype, MPI_Aint *extent);
__attribute__((visibility("default")))  int PMPI_File_set_atomicity(MPI_File fh, int flag);
__attribute__((visibility("default")))  int PMPI_File_get_atomicity(MPI_File fh, int *flag);
__attribute__((visibility("default")))  int PMPI_File_sync(MPI_File fh);
__attribute__((visibility("default")))  int PMPI_Finalize(void);
__attribute__((visibility("default")))  int PMPI_Finalized(int *flag);
__attribute__((visibility("default")))  int PMPI_Free_mem(void *base);
__attribute__((visibility("default")))  int PMPI_Gather(const void *sendbuf, int sendcount, MPI_Datatype sendtype, void *recvbuf, int recvcount, MPI_Datatype recvtype, int root, MPI_Comm comm);
__attribute__((visibility("default")))  int PMPI_Igather(const void *sendbuf, int sendcount, MPI_Datatype sendtype, void *recvbuf, int recvcount, MPI_Datatype recvtype, int root, MPI_Comm comm, MPI_Request *request);
__attribute__((visibility("default")))  int PMPI_Gatherv(const void *sendbuf, int sendcount, MPI_Datatype sendtype, void *recvbuf, const int recvcounts[], const int displs[], MPI_Datatype recvtype, int root, MPI_Comm comm);
__attribute__((visibility("default")))  int PMPI_Igatherv(const void *sendbuf, int sendcount, MPI_Datatype sendtype, void *recvbuf, const int recvcounts[], const int displs[], MPI_Datatype recvtype, int root, MPI_Comm comm, MPI_Request *request);
__attribute__((visibility("default")))  int PMPI_Get_address(const void *location, MPI_Aint *address);
__attribute__((visibility("default")))  int PMPI_Get_count(const MPI_Status *status, MPI_Datatype datatype, int *count);
__attribute__((visibility("default")))  int PMPI_Get_elements(const MPI_Status *status, MPI_Datatype datatype, int *count);
__attribute__((visibility("default")))  int PMPI_Get_elements_x(const MPI_Status *status, MPI_Datatype datatype, MPI_Count *count);
__attribute__((visibility("default")))  int PMPI_Get(void *origin_addr, int origin_count, MPI_Datatype origin_datatype, int target_rank, MPI_Aint target_disp, int target_count, MPI_Datatype target_datatype, MPI_Win win);
__attribute__((visibility("default")))  int PMPI_Get_accumulate(const void *origin_addr, int origin_count, MPI_Datatype origin_datatype, void *result_addr, int result_count, MPI_Datatype result_datatype, int target_rank, MPI_Aint target_disp, int target_count, MPI_Datatype target_datatype, MPI_Op op, MPI_Win win);
__attribute__((visibility("default")))  int PMPI_Get_library_version(char *version, int *resultlen);
__attribute__((visibility("default")))  int PMPI_Get_processor_name(char *name, int *resultlen);
__attribute__((visibility("default")))  int PMPI_Get_version(int *version, int *subversion);
__attribute__((visibility("default")))  int PMPI_Graph_create(MPI_Comm comm_old, int nnodes, const int index[], const int edges[], int reorder, MPI_Comm *comm_graph);
__attribute__((visibility("default")))  int PMPI_Graph_get(MPI_Comm comm, int maxindex, int maxedges, int index[], int edges[]);
__attribute__((visibility("default")))  int PMPI_Graph_map(MPI_Comm comm, int nnodes, const int index[], const int edges[], int *newrank);
__attribute__((visibility("default")))  int PMPI_Graph_neighbors_count(MPI_Comm comm, int rank, int *nneighbors);
__attribute__((visibility("default")))  int PMPI_Graph_neighbors(MPI_Comm comm, int rank, int maxneighbors, int neighbors[]);
__attribute__((visibility("default")))  int PMPI_Graphdims_get(MPI_Comm comm, int *nnodes, int *nedges);
__attribute__((visibility("default")))  int PMPI_Grequest_complete(MPI_Request request);
__attribute__((visibility("default")))  int PMPI_Grequest_start(MPI_Grequest_query_function *query_fn, MPI_Grequest_free_function *free_fn, MPI_Grequest_cancel_function *cancel_fn, void *extra_state, MPI_Request *request);
__attribute__((visibility("default")))  int PMPI_Group_c2f(MPI_Group group);
__attribute__((visibility("default")))  int PMPI_Group_compare(MPI_Group group1, MPI_Group group2, int *result);
__attribute__((visibility("default")))  int PMPI_Group_difference(MPI_Group group1, MPI_Group group2, MPI_Group *newgroup);
__attribute__((visibility("default")))  int PMPI_Group_excl(MPI_Group group, int n, const int ranks[], MPI_Group *newgroup);
__attribute__((visibility("default")))  MPI_Group PMPI_Group_f2c(int group);
__attribute__((visibility("default")))  int PMPI_Group_free(MPI_Group *group);
__attribute__((visibility("default")))  int PMPI_Group_incl(MPI_Group group, int n, const int ranks[], MPI_Group *newgroup);
__attribute__((visibility("default")))  int PMPI_Group_intersection(MPI_Group group1, MPI_Group group2, MPI_Group *newgroup);
__attribute__((visibility("default")))  int PMPI_Group_range_excl(MPI_Group group, int n, int ranges[][3], MPI_Group *newgroup);
__attribute__((visibility("default")))  int PMPI_Group_range_incl(MPI_Group group, int n, int ranges[][3], MPI_Group *newgroup);
__attribute__((visibility("default")))  int PMPI_Group_rank(MPI_Group group, int *rank);
__attribute__((visibility("default")))  int PMPI_Group_size(MPI_Group group, int *size);
__attribute__((visibility("default")))  int PMPI_Group_translate_ranks(MPI_Group group1, int n, const int ranks1[], MPI_Group group2, int ranks2[]);
__attribute__((visibility("default")))  int PMPI_Group_union(MPI_Group group1, MPI_Group group2, MPI_Group *newgroup);
__attribute__((visibility("default")))  int PMPI_Ibsend(const void *buf, int count, MPI_Datatype datatype, int dest, int tag, MPI_Comm comm, MPI_Request *request);
__attribute__((visibility("default")))  int PMPI_Improbe(int source, int tag, MPI_Comm comm, int *flag, MPI_Message *message, MPI_Status *status);
__attribute__((visibility("default")))  int PMPI_Imrecv(void *buf, int count, MPI_Datatype type, MPI_Message *message, MPI_Request *request);
__attribute__((visibility("default")))  int PMPI_Info_c2f(MPI_Info info);
__attribute__((visibility("default")))  int PMPI_Info_create(MPI_Info *info);
__attribute__((visibility("default")))  int PMPI_Info_delete(MPI_Info info, const char *key);
__attribute__((visibility("default")))  int PMPI_Info_dup(MPI_Info info, MPI_Info *newinfo);
__attribute__((visibility("default")))  MPI_Info PMPI_Info_f2c(int info);
__attribute__((visibility("default")))  int PMPI_Info_free(MPI_Info *info);
__attribute__((visibility("default")))  int PMPI_Info_get(MPI_Info info, const char *key, int valuelen, char *value, int *flag);
__attribute__((visibility("default")))  int PMPI_Info_get_nkeys(MPI_Info info, int *nkeys);
__attribute__((visibility("default")))  int PMPI_Info_get_nthkey(MPI_Info info, int n, char *key);
__attribute__((visibility("default")))  int PMPI_Info_get_valuelen(MPI_Info info, const char *key, int *valuelen, int *flag);
__attribute__((visibility("default")))  int PMPI_Info_set(MPI_Info info, const char *key, const char *value);
__attribute__((visibility("default")))  int PMPI_Init(int *argc, char ***argv);
__attribute__((visibility("default")))  int PMPI_Initialized(int *flag);
__attribute__((visibility("default")))  int PMPI_Init_thread(int *argc, char ***argv, int required, int *provided);
__attribute__((visibility("default")))  int PMPI_Intercomm_create(MPI_Comm local_comm, int local_leader, MPI_Comm bridge_comm, int remote_leader, int tag, MPI_Comm *newintercomm);
__attribute__((visibility("default")))  int PMPI_Intercomm_merge(MPI_Comm intercomm, int high, MPI_Comm *newintercomm);
__attribute__((visibility("default")))  int PMPI_Iprobe(int source, int tag, MPI_Comm comm, int *flag, MPI_Status *status);
__attribute__((visibility("default")))  int PMPI_Irecv(void *buf, int count, MPI_Datatype datatype, int source, int tag, MPI_Comm comm, MPI_Request *request);
__attribute__((visibility("default")))  int PMPI_Irsend(const void *buf, int count, MPI_Datatype datatype, int dest, int tag, MPI_Comm comm, MPI_Request *request);
__attribute__((visibility("default")))  int PMPI_Isend(const void *buf, int count, MPI_Datatype datatype, int dest, int tag, MPI_Comm comm, MPI_Request *request);
__attribute__((visibility("default")))  int PMPI_Issend(const void *buf, int count, MPI_Datatype datatype, int dest, int tag, MPI_Comm comm, MPI_Request *request);
__attribute__((visibility("default")))  int PMPI_Is_thread_main(int *flag);
__attribute__((visibility("default")))  int PMPI_Lookup_name(const char *service_name, MPI_Info info, char *port_name);
__attribute__((visibility("default")))  int PMPI_Message_c2f(MPI_Message message);
__attribute__((visibility("default")))  MPI_Message PMPI_Message_f2c(int message);
__attribute__((visibility("default")))  int PMPI_Mprobe(int source, int tag, MPI_Comm comm, MPI_Message *message, MPI_Status *status);
__attribute__((visibility("default")))  int PMPI_Mrecv(void *buf, int count, MPI_Datatype type, MPI_Message *message, MPI_Status *status);
__attribute__((visibility("default")))  int PMPI_Neighbor_allgather(const void *sendbuf, int sendcount, MPI_Datatype sendtype, void *recvbuf, int recvcount, MPI_Datatype recvtype, MPI_Comm comm);
__attribute__((visibility("default")))  int PMPI_Ineighbor_allgather(const void *sendbuf, int sendcount, MPI_Datatype sendtype, void *recvbuf, int recvcount, MPI_Datatype recvtype, MPI_Comm comm, MPI_Request *request);
__attribute__((visibility("default")))  int PMPI_Neighbor_allgatherv(const void *sendbuf, int sendcount, MPI_Datatype sendtype, void *recvbuf, const int recvcounts[], const int displs[], MPI_Datatype recvtype, MPI_Comm comm);
__attribute__((visibility("default")))  int PMPI_Ineighbor_allgatherv(const void *sendbuf, int sendcount, MPI_Datatype sendtype, void *recvbuf, const int recvcounts[], const int displs[], MPI_Datatype recvtype, MPI_Comm comm, MPI_Request *request);
__attribute__((visibility("default")))  int PMPI_Neighbor_alltoall(const void *sendbuf, int sendcount, MPI_Datatype sendtype, void *recvbuf, int recvcount, MPI_Datatype recvtype, MPI_Comm comm);
__attribute__((visibility("default")))  int PMPI_Ineighbor_alltoall(const void *sendbuf, int sendcount, MPI_Datatype sendtype, void *recvbuf, int recvcount, MPI_Datatype recvtype, MPI_Comm comm, MPI_Request *request);
__attribute__((visibility("default")))  int PMPI_Neighbor_alltoallv(const void *sendbuf, const int sendcounts[], const int sdispls[],  MPI_Datatype sendtype, void *recvbuf, const int recvcounts[], const int rdispls[], MPI_Datatype recvtype, MPI_Comm comm);
__attribute__((visibility("default")))  int PMPI_Ineighbor_alltoallv(const void *sendbuf, const int sendcounts[], const int sdispls[], MPI_Datatype sendtype, void *recvbuf, const int recvcounts[], const int rdispls[], MPI_Datatype recvtype, MPI_Comm comm, MPI_Request *request);
__attribute__((visibility("default")))  int PMPI_Neighbor_alltoallw(const void *sendbuf, const int sendcounts[], const MPI_Aint sdispls[], const MPI_Datatype sendtypes[], void *recvbuf, const int recvcounts[], const MPI_Aint rdispls[], const MPI_Datatype recvtypes[], MPI_Comm comm);
__attribute__((visibility("default")))  int PMPI_Ineighbor_alltoallw(const void *sendbuf, const int sendcounts[], const MPI_Aint sdispls[], const MPI_Datatype sendtypes[], void *recvbuf, const int recvcounts[], const MPI_Aint rdispls[], const MPI_Datatype recvtypes[], MPI_Comm comm, MPI_Request *request);
__attribute__((visibility("default")))  int PMPI_Op_c2f(MPI_Op op);
__attribute__((visibility("default")))  int PMPI_Op_commutative(MPI_Op op, int *commute);
__attribute__((visibility("default")))  int PMPI_Op_create(MPI_User_function *function, int commute, MPI_Op *op);
__attribute__((visibility("default")))  int PMPI_Open_port(MPI_Info info, char *port_name);
__attribute__((visibility("default")))  MPI_Op PMPI_Op_f2c(int op);
__attribute__((visibility("default")))  int PMPI_Op_free(MPI_Op *op);
__attribute__((visibility("default")))  int PMPI_Pack_external(const char datarep[], const void *inbuf, int incount, MPI_Datatype datatype, void *outbuf, MPI_Aint outsize, MPI_Aint *position);
__attribute__((visibility("default")))  int PMPI_Pack_external_size(const char datarep[], int incount, MPI_Datatype datatype, MPI_Aint *size);
__attribute__((visibility("default")))  int PMPI_Pack(const void *inbuf, int incount, MPI_Datatype datatype, void *outbuf, int outsize, int *position, MPI_Comm comm);
__attribute__((visibility("default")))  int PMPI_Pack_size(int incount, MPI_Datatype datatype, MPI_Comm comm, int *size);
__attribute__((visibility("default")))  int PMPI_Pcontrol(const int level, ...);
__attribute__((visibility("default")))  int PMPI_Probe(int source, int tag, MPI_Comm comm, MPI_Status *status);
__attribute__((visibility("default")))  int PMPI_Publish_name(const char *service_name, MPI_Info info, const char *port_name);
__attribute__((visibility("default")))  int PMPI_Put(const void *origin_addr, int origin_count, MPI_Datatype origin_datatype, int target_rank, MPI_Aint target_disp, int target_count, MPI_Datatype target_datatype, MPI_Win win);
__attribute__((visibility("default")))  int PMPI_Query_thread(int *provided);
__attribute__((visibility("default")))  int PMPI_Raccumulate(const void *origin_addr, int origin_count, MPI_Datatype origin_datatype, int target_rank, MPI_Aint target_disp, int target_count, MPI_Datatype target_datatype, MPI_Op op, MPI_Win win, MPI_Request *request);
__attribute__((visibility("default")))  int PMPI_Recv_init(void *buf, int count, MPI_Datatype datatype, int source, int tag, MPI_Comm comm, MPI_Request *request);
__attribute__((visibility("default")))  int PMPI_Recv(void *buf, int count, MPI_Datatype datatype, int source, int tag, MPI_Comm comm, MPI_Status *status);
__attribute__((visibility("default")))  int PMPI_Reduce(const void *sendbuf, void *recvbuf, int count, MPI_Datatype datatype, MPI_Op op, int root, MPI_Comm comm);
__attribute__((visibility("default")))  int PMPI_Ireduce(const void *sendbuf, void *recvbuf, int count, MPI_Datatype datatype, MPI_Op op, int root, MPI_Comm comm, MPI_Request *request);
__attribute__((visibility("default")))  int PMPI_Reduce_local(const void *inbuf, void *inoutbuf, int count, MPI_Datatype datatype, MPI_Op);
__attribute__((visibility("default")))  int PMPI_Reduce_scatter(const void *sendbuf, void *recvbuf, const int recvcounts[], MPI_Datatype datatype, MPI_Op op, MPI_Comm comm);
__attribute__((visibility("default")))  int PMPI_Ireduce_scatter(const void *sendbuf, void *recvbuf, const int recvcounts[], MPI_Datatype datatype, MPI_Op op, MPI_Comm comm, MPI_Request *request);
__attribute__((visibility("default")))  int PMPI_Reduce_scatter_block(const void *sendbuf, void *recvbuf, int recvcount, MPI_Datatype datatype, MPI_Op op, MPI_Comm comm);
__attribute__((visibility("default")))  int PMPI_Ireduce_scatter_block(const void *sendbuf, void *recvbuf, int recvcount, MPI_Datatype datatype, MPI_Op op, MPI_Comm comm, MPI_Request *request);
__attribute__((visibility("default")))  int PMPI_Register_datarep(const char *datarep, MPI_Datarep_conversion_function *read_conversion_fn, MPI_Datarep_conversion_function *write_conversion_fn, MPI_Datarep_extent_function *dtype_file_extent_fn, void *extra_state);
__attribute__((visibility("default")))  int PMPI_Request_c2f(MPI_Request request);
__attribute__((visibility("default")))  MPI_Request PMPI_Request_f2c(int request);
__attribute__((visibility("default")))  int PMPI_Request_free(MPI_Request *request);
__attribute__((visibility("default")))  int PMPI_Request_get_status(MPI_Request request, int *flag, MPI_Status *status);
__attribute__((visibility("default")))  int PMPI_Rget(void *origin_addr, int origin_count, MPI_Datatype origin_datatype, int target_rank, MPI_Aint target_disp, int target_count, MPI_Datatype target_datatype, MPI_Win win, MPI_Request *request);
__attribute__((visibility("default")))  int PMPI_Rget_accumulate(const void *origin_addr, int origin_count, MPI_Datatype origin_datatype, void *result_addr, int result_count, MPI_Datatype result_datatype, int target_rank, MPI_Aint target_disp, int target_count, MPI_Datatype target_datatype, MPI_Op op, MPI_Win win, MPI_Request *request);
__attribute__((visibility("default")))  int PMPI_Rput(const void *origin_addr, int origin_count, MPI_Datatype origin_datatype, int target_rank, MPI_Aint target_disp, int target_cout, MPI_Datatype target_datatype, MPI_Win win, MPI_Request *request);
__attribute__((visibility("default")))  int PMPI_Rsend(const void *ibuf, int count, MPI_Datatype datatype, int dest, int tag, MPI_Comm comm);
__attribute__((visibility("default")))  int PMPI_Rsend_init(const void *buf, int count, MPI_Datatype datatype, int dest, int tag, MPI_Comm comm, MPI_Request *request);
__attribute__((visibility("default")))  int PMPI_Scan(const void *sendbuf, void *recvbuf, int count, MPI_Datatype datatype, MPI_Op op, MPI_Comm comm);
__attribute__((visibility("default")))  int PMPI_Iscan(const void *sendbuf, void *recvbuf, int count, MPI_Datatype datatype, MPI_Op op, MPI_Comm comm, MPI_Request *request);
__attribute__((visibility("default")))  int PMPI_Scatter(const void *sendbuf, int sendcount, MPI_Datatype sendtype, void *recvbuf, int recvcount, MPI_Datatype recvtype, int root, MPI_Comm comm);
__attribute__((visibility("default")))  int PMPI_Iscatter(const void *sendbuf, int sendcount, MPI_Datatype sendtype, void *recvbuf, int recvcount, MPI_Datatype recvtype, int root, MPI_Comm comm, MPI_Request *request);
__attribute__((visibility("default")))  int PMPI_Scatterv(const void *sendbuf, const int sendcounts[], const int displs[], MPI_Datatype sendtype, void *recvbuf, int recvcount, MPI_Datatype recvtype, int root, MPI_Comm comm);
__attribute__((visibility("default")))  int PMPI_Iscatterv(const void *sendbuf, const int sendcounts[], const int displs[], MPI_Datatype sendtype, void *recvbuf, int recvcount, MPI_Datatype recvtype, int root, MPI_Comm comm, MPI_Request *request);
__attribute__((visibility("default")))  int PMPI_Send_init(const void *buf, int count, MPI_Datatype datatype, int dest, int tag, MPI_Comm comm, MPI_Request *request);
__attribute__((visibility("default")))  int PMPI_Send(const void *buf, int count, MPI_Datatype datatype, int dest, int tag, MPI_Comm comm);
__attribute__((visibility("default")))  int PMPI_Sendrecv(const void *sendbuf, int sendcount, MPI_Datatype sendtype, int dest, int sendtag, void *recvbuf, int recvcount, MPI_Datatype recvtype, int source, int recvtag, MPI_Comm comm,  MPI_Status *status);
__attribute__((visibility("default")))  int PMPI_Sendrecv_replace(void * buf, int count, MPI_Datatype datatype, int dest, int sendtag, int source, int recvtag, MPI_Comm comm, MPI_Status *status);
__attribute__((visibility("default")))  int PMPI_Ssend_init(const void *buf, int count, MPI_Datatype datatype, int dest, int tag, MPI_Comm comm, MPI_Request *request);
__attribute__((visibility("default")))  int PMPI_Ssend(const void *buf, int count, MPI_Datatype datatype, int dest, int tag, MPI_Comm comm);
__attribute__((visibility("default")))  int PMPI_Start(MPI_Request *request);
__attribute__((visibility("default")))  int PMPI_Startall(int count, MPI_Request array_of_requests[]);
__attribute__((visibility("default")))  int PMPI_Status_c2f(const MPI_Status *c_status, int *f_status);
__attribute__((visibility("default")))  int PMPI_Status_f2c(const int *f_status, MPI_Status *c_status);
__attribute__((visibility("default")))  int PMPI_Status_set_cancelled(MPI_Status *status, int flag);
__attribute__((visibility("default")))  int PMPI_Status_set_elements(MPI_Status *status, MPI_Datatype datatype, int count);
__attribute__((visibility("default")))  int PMPI_Status_set_elements_x(MPI_Status *status, MPI_Datatype datatype, MPI_Count count);
__attribute__((visibility("default")))  int PMPI_Testall(int count, MPI_Request array_of_requests[], int *flag, MPI_Status array_of_statuses[]);
__attribute__((visibility("default")))  int PMPI_Testany(int count, MPI_Request array_of_requests[], int *index, int *flag, MPI_Status *status);
__attribute__((visibility("default")))  int PMPI_Test(MPI_Request *request, int *flag, MPI_Status *status);
__attribute__((visibility("default")))  int PMPI_Test_cancelled(const MPI_Status *status, int *flag);
__attribute__((visibility("default")))  int PMPI_Testsome(int incount, MPI_Request array_of_requests[], int *outcount, int array_of_indices[], MPI_Status array_of_statuses[]);
__attribute__((visibility("default")))  int PMPI_Topo_test(MPI_Comm comm, int *status);
__attribute__((visibility("default")))  int PMPI_Type_c2f(MPI_Datatype datatype);
__attribute__((visibility("default")))  int PMPI_Type_commit(MPI_Datatype *type);
__attribute__((visibility("default")))  int PMPI_Type_contiguous(int count, MPI_Datatype oldtype, MPI_Datatype *newtype);
__attribute__((visibility("default")))  int PMPI_Type_create_darray(int size, int rank, int ndims, const int gsize_array[], const int distrib_array[], const int darg_array[], const int psize_array[], int order, MPI_Datatype oldtype, MPI_Datatype *newtype);
__attribute__((visibility("default")))  int PMPI_Type_create_f90_complex(int p, int r, MPI_Datatype *newtype);
__attribute__((visibility("default")))  int PMPI_Type_create_f90_integer(int r, MPI_Datatype *newtype);
__attribute__((visibility("default")))  int PMPI_Type_create_f90_real(int p, int r, MPI_Datatype *newtype);
__attribute__((visibility("default")))  int PMPI_Type_create_hindexed(int count, const int array_of_blocklengths[], const MPI_Aint array_of_displacements[], MPI_Datatype oldtype, MPI_Datatype *newtype);
__attribute__((visibility("default")))  int PMPI_Type_create_hvector(int count, int blocklength, MPI_Aint stride, MPI_Datatype oldtype, MPI_Datatype *newtype);
__attribute__((visibility("default")))  int PMPI_Type_create_keyval(MPI_Type_copy_attr_function *type_copy_attr_fn, MPI_Type_delete_attr_function *type_delete_attr_fn, int *type_keyval, void *extra_state);
__attribute__((visibility("default")))  int PMPI_Type_create_hindexed_block(int count, int blocklength, const MPI_Aint array_of_displacements[], MPI_Datatype oldtype, MPI_Datatype *newtype);
__attribute__((visibility("default")))  int PMPI_Type_create_indexed_block(int count, int blocklength, const int array_of_displacements[], MPI_Datatype oldtype, MPI_Datatype *newtype);
__attribute__((visibility("default")))  int PMPI_Type_create_struct(int count, const int array_of_block_lengths[], const MPI_Aint array_of_displacements[], const MPI_Datatype array_of_types[], MPI_Datatype *newtype);
__attribute__((visibility("default")))  int PMPI_Type_create_subarray(int ndims, const int size_array[], const int subsize_array[], const int start_array[], int order, MPI_Datatype oldtype, MPI_Datatype *newtype);
__attribute__((visibility("default")))  int PMPI_Type_create_resized(MPI_Datatype oldtype, MPI_Aint lb, MPI_Aint extent, MPI_Datatype *newtype);
__attribute__((visibility("default")))  int PMPI_Type_delete_attr(MPI_Datatype type, int type_keyval);
__attribute__((visibility("default")))  int PMPI_Type_dup(MPI_Datatype type, MPI_Datatype *newtype);
__attribute__((visibility("default")))  int PMPI_Type_free(MPI_Datatype *type);
__attribute__((visibility("default")))  int PMPI_Type_free_keyval(int *type_keyval);
__attribute__((visibility("default")))  MPI_Datatype PMPI_Type_f2c(int datatype);
__attribute__((visibility("default")))  int PMPI_Type_get_attr(MPI_Datatype type, int type_keyval, void *attribute_val, int *flag);
__attribute__((visibility("default")))  int PMPI_Type_get_contents(MPI_Datatype mtype, int max_integers, int max_addresses, int max_datatypes, int array_of_integers[], MPI_Aint array_of_addresses[], MPI_Datatype array_of_datatypes[]);
__attribute__((visibility("default")))  int PMPI_Type_get_envelope(MPI_Datatype type, int *num_integers, int *num_addresses, int *num_datatypes, int *combiner);
__attribute__((visibility("default")))  int PMPI_Type_get_extent(MPI_Datatype type, MPI_Aint *lb, MPI_Aint *extent);
__attribute__((visibility("default")))  int PMPI_Type_get_extent_x(MPI_Datatype type, MPI_Count *lb, MPI_Count *extent);
__attribute__((visibility("default")))  int PMPI_Type_get_name(MPI_Datatype type, char *type_name, int *resultlen);
__attribute__((visibility("default")))  int PMPI_Type_get_true_extent(MPI_Datatype datatype, MPI_Aint *true_lb, MPI_Aint *true_extent);
__attribute__((visibility("default")))  int PMPI_Type_get_true_extent_x(MPI_Datatype datatype, MPI_Count *true_lb, MPI_Count *true_extent);
__attribute__((visibility("default")))  int PMPI_Type_indexed(int count, const int array_of_blocklengths[], const int array_of_displacements[], MPI_Datatype oldtype, MPI_Datatype *newtype);
__attribute__((visibility("default")))  int PMPI_Type_match_size(int typeclass, int size, MPI_Datatype *type);
__attribute__((visibility("default")))  int PMPI_Type_set_attr(MPI_Datatype type, int type_keyval, void *attr_val);
__attribute__((visibility("default")))  int PMPI_Type_set_name(MPI_Datatype type, const char *type_name);
__attribute__((visibility("default")))  int PMPI_Type_size(MPI_Datatype type, int *size);
__attribute__((visibility("default")))  int PMPI_Type_size_x(MPI_Datatype type, MPI_Count *size);
__attribute__((visibility("default")))  int PMPI_Type_vector(int count, int blocklength, int stride, MPI_Datatype oldtype, MPI_Datatype *newtype);
__attribute__((visibility("default")))  int PMPI_Unpack(const void *inbuf, int insize, int *position, void *outbuf, int outcount, MPI_Datatype datatype, MPI_Comm comm);
__attribute__((visibility("default")))  int PMPI_Unpublish_name(const char *service_name, MPI_Info info, const char *port_name);
__attribute__((visibility("default")))  int PMPI_Unpack_external (const char datarep[], const void *inbuf, MPI_Aint insize, MPI_Aint *position, void *outbuf, int outcount, MPI_Datatype datatype);
__attribute__((visibility("default")))  int PMPI_Waitall(int count, MPI_Request array_of_requests[], MPI_Status array_of_statuses[]);
__attribute__((visibility("default")))  int PMPI_Waitany(int count, MPI_Request array_of_requests[], int *index, MPI_Status *status);
__attribute__((visibility("default")))  int PMPI_Wait(MPI_Request *request, MPI_Status *status);
__attribute__((visibility("default")))  int PMPI_Waitsome(int incount, MPI_Request array_of_requests[], int *outcount, int array_of_indices[], MPI_Status array_of_statuses[]);
__attribute__((visibility("default")))  int PMPI_Win_allocate(MPI_Aint size, int disp_unit, MPI_Info info, MPI_Comm comm, void *baseptr, MPI_Win *win);
__attribute__((visibility("default")))  int PMPI_Win_allocate_shared(MPI_Aint size, int disp_unit, MPI_Info info, MPI_Comm comm, void *baseptr, MPI_Win *win);
__attribute__((visibility("default")))  int PMPI_Win_attach(MPI_Win win, void *base, MPI_Aint size);
__attribute__((visibility("default")))  int PMPI_Win_c2f(MPI_Win win);
__attribute__((visibility("default")))  int PMPI_Win_call_errhandler(MPI_Win win, int errorcode);
__attribute__((visibility("default")))  int PMPI_Win_complete(MPI_Win win);
__attribute__((visibility("default")))  int PMPI_Win_create(void *base, MPI_Aint size, int disp_unit, MPI_Info info, MPI_Comm comm, MPI_Win *win);
__attribute__((visibility("default")))  int PMPI_Win_create_dynamic(MPI_Info info, MPI_Comm comm, MPI_Win *win);
__attribute__((visibility("default")))  int PMPI_Win_create_errhandler(MPI_Win_errhandler_function *function, MPI_Errhandler *errhandler);
__attribute__((visibility("default")))  int PMPI_Win_create_keyval(MPI_Win_copy_attr_function *win_copy_attr_fn, MPI_Win_delete_attr_function *win_delete_attr_fn, int *win_keyval, void *extra_state);
__attribute__((visibility("default")))  int PMPI_Win_delete_attr(MPI_Win win, int win_keyval);
__attribute__((visibility("default")))  int PMPI_Win_detach(MPI_Win win, const void *base);
__attribute__((visibility("default")))  MPI_Win PMPI_Win_f2c(int win);
__attribute__((visibility("default")))  int PMPI_Win_fence(int assert, MPI_Win win);
__attribute__((visibility("default")))  int PMPI_Win_flush(int rank, MPI_Win win);
__attribute__((visibility("default")))  int PMPI_Win_flush_all(MPI_Win win);
__attribute__((visibility("default")))  int PMPI_Win_flush_local(int rank, MPI_Win win);
__attribute__((visibility("default")))  int PMPI_Win_flush_local_all(MPI_Win win);
__attribute__((visibility("default")))  int PMPI_Win_free(MPI_Win *win);
__attribute__((visibility("default")))  int PMPI_Win_free_keyval(int *win_keyval);
__attribute__((visibility("default")))  int PMPI_Win_get_attr(MPI_Win win, int win_keyval, void *attribute_val, int *flag);
__attribute__((visibility("default")))  int PMPI_Win_get_errhandler(MPI_Win win, MPI_Errhandler *errhandler);
__attribute__((visibility("default")))  int PMPI_Win_get_group(MPI_Win win, MPI_Group *group);
__attribute__((visibility("default")))  int PMPI_Win_get_info(MPI_Win win, MPI_Info *info_used);
__attribute__((visibility("default")))  int PMPI_Win_get_name(MPI_Win win, char *win_name, int *resultlen);
__attribute__((visibility("default")))  int PMPI_Win_lock(int lock_type, int rank, int assert, MPI_Win win);
__attribute__((visibility("default")))  int PMPI_Win_lock_all(int assert, MPI_Win win);
__attribute__((visibility("default")))  int PMPI_Win_post(MPI_Group group, int assert, MPI_Win win);
__attribute__((visibility("default")))  int PMPI_Win_set_attr(MPI_Win win, int win_keyval, void *attribute_val);
__attribute__((visibility("default")))  int PMPI_Win_set_errhandler(MPI_Win win, MPI_Errhandler errhandler);
__attribute__((visibility("default")))  int PMPI_Win_set_info(MPI_Win win, MPI_Info info);
__attribute__((visibility("default")))  int PMPI_Win_set_name(MPI_Win win, const char *win_name);
__attribute__((visibility("default")))  int PMPI_Win_shared_query(MPI_Win win, int rank, MPI_Aint *size, int *disp_unit, void *baseptr);
__attribute__((visibility("default")))  int PMPI_Win_start(MPI_Group group, int assert, MPI_Win win);
__attribute__((visibility("default")))  int PMPI_Win_sync(MPI_Win win);
__attribute__((visibility("default")))  int PMPI_Win_test(MPI_Win win, int *flag);
__attribute__((visibility("default")))  int PMPI_Win_unlock(int rank, MPI_Win win);
__attribute__((visibility("default")))  int PMPI_Win_unlock_all(MPI_Win win);
__attribute__((visibility("default")))  int PMPI_Win_wait(MPI_Win win);
__attribute__((visibility("default")))  double PMPI_Wtick(void);
__attribute__((visibility("default")))  double PMPI_Wtime(void);
__attribute__((visibility("default")))  int PMPI_T_init_thread (int required, int *provided);
__attribute__((visibility("default")))  int PMPI_T_finalize (void);
__attribute__((visibility("default")))  int PMPI_T_cvar_get_num (int *num_cvar);
__attribute__((visibility("default")))  int PMPI_T_cvar_get_info (int cvar_index, char *name, int *name_len, int *verbosity, MPI_Datatype *datatype, MPI_T_enum *enumtype, char *desc, int *desc_len, int *bind, int *scope);
__attribute__((visibility("default")))  int PMPI_T_cvar_get_index (const char *name, int *cvar_index);
__attribute__((visibility("default")))  int PMPI_T_cvar_handle_alloc (int cvar_index, void *obj_handle, MPI_T_cvar_handle *handle, int *count);
__attribute__((visibility("default")))  int PMPI_T_cvar_handle_free (MPI_T_cvar_handle *handle);
__attribute__((visibility("default")))  int PMPI_T_cvar_read (MPI_T_cvar_handle handle, void *buf);
__attribute__((visibility("default")))  int PMPI_T_cvar_write (MPI_T_cvar_handle handle, const void *buf);
__attribute__((visibility("default")))  int PMPI_T_category_get_num(int *num_cat);
__attribute__((visibility("default")))  int PMPI_T_category_get_info(int cat_index, char *name, int *name_len, char *desc, int *desc_len, int *num_cvars, int *num_pvars, int *num_categories);
__attribute__((visibility("default")))  int PMPI_T_category_get_index (const char *name, int *category_index);
__attribute__((visibility("default")))  int PMPI_T_category_get_cvars(int cat_index, int len, int indices[]);
__attribute__((visibility("default")))  int PMPI_T_category_get_pvars(int cat_index, int len, int indices[]);
__attribute__((visibility("default")))  int PMPI_T_category_get_categories(int cat_index, int len, int indices[]);
__attribute__((visibility("default")))  int PMPI_T_category_changed(int *stamp);
__attribute__((visibility("default")))  int PMPI_T_pvar_get_num(int *num_pvar);
__attribute__((visibility("default")))  int PMPI_T_pvar_get_info(int pvar_index, char *name, int *name_len, int *verbosity, int *var_class, MPI_Datatype *datatype, MPI_T_enum *enumtype, char *desc, int *desc_len, int *bind, int *readonly, int *continuous, int *atomic);
__attribute__((visibility("default")))  int PMPI_T_pvar_get_index (const char *name, int var_class, int *pvar_index);
__attribute__((visibility("default")))  int PMPI_T_pvar_session_create(MPI_T_pvar_session *session);
__attribute__((visibility("default")))  int PMPI_T_pvar_session_free(MPI_T_pvar_session *session);
__attribute__((visibility("default")))  int PMPI_T_pvar_handle_alloc(MPI_T_pvar_session session, int pvar_index, void *obj_handle, MPI_T_pvar_handle *handle, int *count);
__attribute__((visibility("default")))  int PMPI_T_pvar_handle_free(MPI_T_pvar_session session, MPI_T_pvar_handle *handle);
__attribute__((visibility("default")))  int PMPI_T_pvar_start(MPI_T_pvar_session session, MPI_T_pvar_handle handle);
__attribute__((visibility("default")))  int PMPI_T_pvar_stop(MPI_T_pvar_session session, MPI_T_pvar_handle handle);
__attribute__((visibility("default")))  int PMPI_T_pvar_read(MPI_T_pvar_session session, MPI_T_pvar_handle handle, void *buf);
__attribute__((visibility("default")))  int PMPI_T_pvar_write(MPI_T_pvar_session session, MPI_T_pvar_handle handle, const void *buf);
__attribute__((visibility("default")))  int PMPI_T_pvar_reset(MPI_T_pvar_session session, MPI_T_pvar_handle handle);
__attribute__((visibility("default")))  int PMPI_T_pvar_readreset(MPI_T_pvar_session session, MPI_T_pvar_handle handle, void *buf);
__attribute__((visibility("default")))  int PMPI_T_enum_get_info(MPI_T_enum enumtype, int *num, char *name, int *name_len);
__attribute__((visibility("default")))  int PMPI_T_enum_get_item(MPI_T_enum enumtype, int index, int *value, char *name, int *name_len);
__attribute__((visibility("default")))  int MPI_T_init_thread (int required, int *provided);
__attribute__((visibility("default")))  int MPI_T_finalize (void);
__attribute__((visibility("default")))  int MPI_T_cvar_get_num (int *num_cvar);
__attribute__((visibility("default")))  int MPI_T_cvar_get_info (int cvar_index, char *name, int *name_len, int *verbosity, MPI_Datatype *datatype, MPI_T_enum *enumtype, char *desc, int *desc_len, int *bind, int *scope);
__attribute__((visibility("default")))  int MPI_T_cvar_get_index (const char *name, int *cvar_index);
__attribute__((visibility("default")))  int MPI_T_cvar_handle_alloc (int cvar_index, void *obj_handle, MPI_T_cvar_handle *handle, int *count);
__attribute__((visibility("default")))  int MPI_T_cvar_handle_free (MPI_T_cvar_handle *handle);
__attribute__((visibility("default")))  int MPI_T_cvar_read (MPI_T_cvar_handle handle, void *buf);
__attribute__((visibility("default")))  int MPI_T_cvar_write (MPI_T_cvar_handle handle, const void *buf);
__attribute__((visibility("default")))  int MPI_T_category_get_num(int *num_cat);
__attribute__((visibility("default")))  int MPI_T_category_get_info(int cat_index, char *name, int *name_len, char *desc, int *desc_len, int *num_cvars, int *num_pvars, int *num_categories);
__attribute__((visibility("default")))  int MPI_T_category_get_index (const char *name, int *category_index);
__attribute__((visibility("default")))  int MPI_T_category_get_cvars(int cat_index, int len, int indices[]);
__attribute__((visibility("default")))  int MPI_T_category_get_pvars(int cat_index, int len, int indices[]);
__attribute__((visibility("default")))  int MPI_T_category_get_categories(int cat_index, int len, int indices[]);
__attribute__((visibility("default")))  int MPI_T_category_changed(int *stamp);
__attribute__((visibility("default")))  int MPI_T_pvar_get_num(int *num_pvar);
__attribute__((visibility("default")))  int MPI_T_pvar_get_info(int pvar_index, char *name, int *name_len, int *verbosity, int *var_class, MPI_Datatype *datatype, MPI_T_enum *enumtype, char *desc, int *desc_len, int *bind, int *readonly, int *continuous, int *atomic);
__attribute__((visibility("default")))  int MPI_T_pvar_get_index (const char *name, int var_class, int *pvar_index);
__attribute__((visibility("default")))  int MPI_T_pvar_session_create(MPI_T_pvar_session *session);
__attribute__((visibility("default")))  int MPI_T_pvar_session_free(MPI_T_pvar_session *session);
__attribute__((visibility("default")))  int MPI_T_pvar_handle_alloc(MPI_T_pvar_session session, int pvar_index, void *obj_handle, MPI_T_pvar_handle *handle, int *count);
__attribute__((visibility("default")))  int MPI_T_pvar_handle_free(MPI_T_pvar_session session, MPI_T_pvar_handle *handle);
__attribute__((visibility("default")))  int MPI_T_pvar_start(MPI_T_pvar_session session, MPI_T_pvar_handle handle);
__attribute__((visibility("default")))  int MPI_T_pvar_stop(MPI_T_pvar_session session, MPI_T_pvar_handle handle);
__attribute__((visibility("default")))  int MPI_T_pvar_read(MPI_T_pvar_session session, MPI_T_pvar_handle handle, void *buf);
__attribute__((visibility("default")))  int MPI_T_pvar_write(MPI_T_pvar_session session, MPI_T_pvar_handle handle, const void *buf);
__attribute__((visibility("default")))  int MPI_T_pvar_reset(MPI_T_pvar_session session, MPI_T_pvar_handle handle);
__attribute__((visibility("default")))  int MPI_T_pvar_readreset(MPI_T_pvar_session session, MPI_T_pvar_handle handle, void *buf);
__attribute__((visibility("default")))  int MPI_T_enum_get_info(MPI_T_enum enumtype, int *num, char *name, int *name_len);
__attribute__((visibility("default")))  int MPI_T_enum_get_item(MPI_T_enum enumtype, int index, int *value, char *name, int *name_len);
__attribute__((visibility("default")))  int MPI_Attr_delete(MPI_Comm comm, int keyval) __attribute__((__deprecated__("MPI_Attr_delete was deprecated in MPI-2.0; use MPI_Comm_delete_attr instead"))) ;
__attribute__((visibility("default")))  int PMPI_Attr_delete(MPI_Comm comm, int keyval) __attribute__((__deprecated__("PMPI_Attr_delete was deprecated in MPI-2.0; use PMPI_Comm_delete_attr instead"))) ;
__attribute__((visibility("default")))  int MPI_Attr_get(MPI_Comm comm, int keyval, void *attribute_val, int *flag) __attribute__((__deprecated__("MPI_Attr_get was deprecated in MPI-2.0; use MPI_Comm_get_attr instead"))) ;
__attribute__((visibility("default")))  int PMPI_Attr_get(MPI_Comm comm, int keyval, void *attribute_val, int *flag) __attribute__((__deprecated__("PMPI_Attr_get was deprecated in MPI-2.0; use PMPI_Comm_get_attr instead"))) ;
__attribute__((visibility("default")))  int MPI_Attr_put(MPI_Comm comm, int keyval, void *attribute_val) __attribute__((__deprecated__("MPI_Attr_put was deprecated in MPI-2.0; use MPI_Comm_set_attr instead"))) ;
__attribute__((visibility("default")))  int PMPI_Attr_put(MPI_Comm comm, int keyval, void *attribute_val) __attribute__((__deprecated__("PMPI_Attr_put was deprecated in MPI-2.0; use PMPI_Comm_set_attr instead"))) ;
typedef int (MPI_Copy_function)(MPI_Comm, int, void *, void *, void *, int *);
typedef int (MPI_Delete_function)(MPI_Comm, int, void *, void *);
__attribute__((visibility("default")))  int MPI_Keyval_create(MPI_Copy_function *copy_fn, MPI_Delete_function *delete_fn, int *keyval, void *extra_state) __attribute__((__deprecated__("MPI_Keyval_create was deprecated in MPI-2.0; use MPI_Comm_create_keyval instead."))) ;
__attribute__((visibility("default")))  int PMPI_Keyval_create(MPI_Copy_function *copy_fn, MPI_Delete_function *delete_fn, int *keyval, void *extra_state) __attribute__((__deprecated__("PMPI_Keyval_create was deprecated in MPI-2.0; use PMPI_Comm_create_keyval instead."))) ;
__attribute__((visibility("default")))  int MPI_Keyval_free(int *keyval) __attribute__((__deprecated__("MPI_Keyval_free was deprecated in MPI-2.0; MPI_Comm_free_keyval instead."))) ;
__attribute__((visibility("default")))  int PMPI_Keyval_free(int *keyval) __attribute__((__deprecated__("PMPI_Keyval_free was deprecated in MPI-2.0; PMPI_Comm_free_keyval instead."))) ;
__attribute__((visibility("default"))) int OMPI_C_MPI_DUP_FN( MPI_Comm comm, int comm_keyval, void* extra_state, void* attribute_val_in, void* attribute_val_out, int* flag ) __attribute__((__deprecated__("OMPI_C_MPI_DUP_FN was deprecated in MPI-2.0; use OMPI_C_MPI_COMM_DUP_FN instead."))) ;
__attribute__((visibility("default"))) int OMPI_C_MPI_NULL_COPY_FN( MPI_Comm comm, int comm_keyval, void* extra_state, void* attribute_val_in, void* attribute_val_out, int* flag ) __attribute__((__deprecated__("OMPI_C_MPI_NULL_COPY_FN was deprecated in MPI-2.0; use OMPI_C_MPI_COMM_NULL_COPY_FN instead."))) ;
__attribute__((visibility("default"))) int OMPI_C_MPI_NULL_DELETE_FN( MPI_Comm comm, int comm_keyval, void* attribute_val_out, void* extra_state ) __attribute__((__deprecated__("OMPI_C_MPI_NULL_DELETE_FN was deprecated in MPI-2.0; use OMPI_C_MPI_COMM_NULL_DELETE_FN instead."))) ;
/* END /usr/lib/x86_64-1-gnu/openmpi/include/mpi.h */
/* BEGIN /usr/include/hdf5/openmpi/H5api_adpt.h */
/* END /usr/include/hdf5/openmpi/H5api_adpt.h */
enum { H5_VERS_MAJOR = 1 };
enum { H5_VERS_MINOR = 10 };
enum { H5_VERS_RELEASE = 6 };
typedef int herr_t;
typedef _Bool hbool_t;
typedef int htri_t;
typedef unsigned long long 	hsize_t;
typedef signed long long	hssize_t;
typedef unsigned long           haddr_t;
typedef enum { H5_ITER_UNKNOWN = -1, H5_ITER_INC, H5_ITER_DEC, H5_ITER_NATIVE, H5_ITER_N } H5_iter_order_t;
typedef enum H5_index_t { H5_INDEX_UNKNOWN = -1, H5_INDEX_NAME, H5_INDEX_CRT_ORDER, H5_INDEX_N } H5_index_t;
typedef struct H5_ih_info_t { hsize_t     index_size;
hsize_t     heap_size;
} H5_ih_info_t;
herr_t H5open(void);
herr_t H5close(void);
herr_t H5dont_atexit(void);
herr_t H5garbage_collect(void);
herr_t H5set_free_list_limits (int reg_global_lim, int reg_list_lim, int arr_global_lim, int arr_list_lim, int blk_global_lim, int blk_list_lim);
herr_t H5get_libversion(unsigned *majnum, unsigned *minnum, unsigned *relnum);
herr_t H5check_version(unsigned majnum, unsigned minnum, unsigned relnum);
herr_t H5is_library_threadsafe(hbool_t *is_ts);
herr_t H5free_memory(void *mem);
void *H5allocate_memory(size_t size, hbool_t clear);
void *H5resize_memory(void *mem, size_t size);
/* END /usr/include/hdf5/openmpi/H5public.h */
/* BEGIN /usr/include/hdf5/openmpi/H5Apublic.h */
/* BEGIN /usr/include/hdf5/openmpi/H5Ipublic.h */
/* BEGIN /usr/include/hdf5/openmpi/H5public.h */
/* END /usr/include/hdf5/openmpi/H5public.h */
typedef enum H5I_type_t { H5I_UNINIT      = (-2), H5I_BADID       = (-1), H5I_FILE        = 1, H5I_GROUP, H5I_DATATYPE, H5I_DATASPACE, H5I_DATASET, H5I_ATTR, H5I_REFERENCE, H5I_VFL, H5I_GENPROP_CLS, H5I_GENPROP_LST, H5I_ERROR_CLASS, H5I_ERROR_MSG, H5I_ERROR_STACK, H5I_NTYPES } H5I_type_t;
typedef int64_t hid_t;
typedef herr_t (*H5I_free_t)(void*);
typedef int (*H5I_search_func_t)(void *obj, hid_t id, void *key);
hid_t H5Iregister(H5I_type_t type, const void *object);
void *H5Iobject_verify(hid_t id, H5I_type_t id_type);
void *H5Iremove_verify(hid_t id, H5I_type_t id_type);
H5I_type_t H5Iget_type(hid_t id);
hid_t H5Iget_file_id(hid_t id);
ssize_t H5Iget_name(hid_t id, char *name, size_t size);
int H5Iinc_ref(hid_t id);
int H5Idec_ref(hid_t id);
int H5Iget_ref(hid_t id);
H5I_type_t H5Iregister_type(size_t hash_size, unsigned reserved, H5I_free_t free_func);
herr_t H5Iclear_type(H5I_type_t type, hbool_t force);
herr_t H5Idestroy_type(H5I_type_t type);
int H5Iinc_type_ref(H5I_type_t type);
int H5Idec_type_ref(H5I_type_t type);
int H5Iget_type_ref(H5I_type_t type);
void *H5Isearch(H5I_type_t type, H5I_search_func_t func, void *key);
herr_t H5Inmembers(H5I_type_t type, hsize_t *num_members);
htri_t H5Itype_exists(H5I_type_t type);
htri_t H5Iis_valid(hid_t id);
/* END /usr/include/hdf5/openmpi/H5Ipublic.h */
/* BEGIN /usr/include/hdf5/openmpi/H5Opublic.h */
/* BEGIN /usr/include/hdf5/openmpi/H5public.h */
/* END /usr/include/hdf5/openmpi/H5public.h */
/* BEGIN /usr/include/hdf5/openmpi/H5Ipublic.h */
/* END /usr/include/hdf5/openmpi/H5Ipublic.h */
/* BEGIN /usr/include/hdf5/openmpi/H5Lpublic.h */
/* BEGIN /usr/include/hdf5/openmpi/H5public.h */
/* END /usr/include/hdf5/openmpi/H5public.h */
/* BEGIN /usr/include/hdf5/openmpi/H5Ipublic.h */
/* END /usr/include/hdf5/openmpi/H5Ipublic.h */
/* BEGIN /usr/include/hdf5/openmpi/H5Tpublic.h */
/* BEGIN /usr/include/hdf5/openmpi/H5public.h */
/* END /usr/include/hdf5/openmpi/H5public.h */
/* BEGIN /usr/include/hdf5/openmpi/H5Ipublic.h */
/* END /usr/include/hdf5/openmpi/H5Ipublic.h */
typedef enum H5T_class_t { H5T_NO_CLASS         = -1, H5T_INTEGER          = 0, H5T_FLOAT            = 1, H5T_TIME             = 2, H5T_STRING           = 3, H5T_BITFIELD         = 4, H5T_OPAQUE           = 5, H5T_COMPOUND         = 6, H5T_REFERENCE        = 7, H5T_ENUM		 = 8, H5T_VLEN		 = 9, H5T_ARRAY	         = 10, H5T_NCLASSES } H5T_class_t;
typedef enum H5T_order_t { H5T_ORDER_ERROR      = -1, H5T_ORDER_LE         = 0, H5T_ORDER_BE         = 1, H5T_ORDER_VAX        = 2, H5T_ORDER_MIXED      = 3, H5T_ORDER_NONE       = 4 } H5T_order_t;
typedef enum H5T_sign_t { H5T_SGN_ERROR        = -1, H5T_SGN_NONE         = 0, H5T_SGN_2            = 1, H5T_NSGN             = 2 } H5T_sign_t;
typedef enum H5T_norm_t { H5T_NORM_ERROR       = -1, H5T_NORM_IMPLIED     = 0, H5T_NORM_MSBSET      = 1, H5T_NORM_NONE        = 2 } H5T_norm_t;
typedef enum H5T_cset_t { H5T_CSET_ERROR       = -1, H5T_CSET_ASCII       = 0, H5T_CSET_UTF8        = 1, H5T_CSET_RESERVED_2  = 2, H5T_CSET_RESERVED_3  = 3, H5T_CSET_RESERVED_4  = 4, H5T_CSET_RESERVED_5  = 5, H5T_CSET_RESERVED_6  = 6, H5T_CSET_RESERVED_7  = 7, H5T_CSET_RESERVED_8  = 8, H5T_CSET_RESERVED_9  = 9, H5T_CSET_RESERVED_10 = 10, H5T_CSET_RESERVED_11 = 11, H5T_CSET_RESERVED_12 = 12, H5T_CSET_RESERVED_13 = 13, H5T_CSET_RESERVED_14 = 14, H5T_CSET_RESERVED_15 = 15 } H5T_cset_t;
typedef enum H5T_str_t { H5T_STR_ERROR        = -1, H5T_STR_NULLTERM     = 0, H5T_STR_NULLPAD      = 1, H5T_STR_SPACEPAD     = 2, H5T_STR_RESERVED_3   = 3, H5T_STR_RESERVED_4   = 4, H5T_STR_RESERVED_5   = 5, H5T_STR_RESERVED_6   = 6, H5T_STR_RESERVED_7   = 7, H5T_STR_RESERVED_8   = 8, H5T_STR_RESERVED_9   = 9, H5T_STR_RESERVED_10  = 10, H5T_STR_RESERVED_11  = 11, H5T_STR_RESERVED_12  = 12, H5T_STR_RESERVED_13  = 13, H5T_STR_RESERVED_14  = 14, H5T_STR_RESERVED_15  = 15 } H5T_str_t;
typedef enum H5T_pad_t { H5T_PAD_ERROR        = -1, H5T_PAD_ZERO         = 0, H5T_PAD_ONE          = 1, H5T_PAD_BACKGROUND   = 2, H5T_NPAD             = 3 } H5T_pad_t;
typedef enum H5T_cmd_t { H5T_CONV_INIT	= 0, H5T_CONV_CONV	= 1, H5T_CONV_FREE	= 2 } H5T_cmd_t;
typedef enum H5T_bkg_t { H5T_BKG_NO		= 0, H5T_BKG_TEMP	= 1, H5T_BKG_YES		= 2 } H5T_bkg_t;
typedef struct H5T_cdata_t { H5T_cmd_t		command;
H5T_bkg_t		need_bkg;
hbool_t		recalc;
void		*priv;
} H5T_cdata_t;
typedef enum H5T_pers_t { H5T_PERS_DONTCARE	= -1, H5T_PERS_HARD	= 0, H5T_PERS_SOFT	= 1 } H5T_pers_t;
typedef enum H5T_direction_t { H5T_DIR_DEFAULT     = 0, H5T_DIR_ASCEND      = 1, H5T_DIR_DESCEND     = 2 } H5T_direction_t;
typedef enum H5T_conv_except_t { H5T_CONV_EXCEPT_RANGE_HI       = 0, H5T_CONV_EXCEPT_RANGE_LOW      = 1, H5T_CONV_EXCEPT_PRECISION      = 2, H5T_CONV_EXCEPT_TRUNCATE       = 3, H5T_CONV_EXCEPT_PINF           = 4, H5T_CONV_EXCEPT_NINF           = 5, H5T_CONV_EXCEPT_NAN            = 6 } H5T_conv_except_t;
typedef enum H5T_conv_ret_t { H5T_CONV_ABORT      = -1, H5T_CONV_UNHANDLED  = 0, H5T_CONV_HANDLED    = 1 } H5T_conv_ret_t;
typedef struct { size_t len;
void *p;
} hvl_t;
enum { H5T_OPAQUE_TAG_MAX = 256 };
typedef herr_t (*H5T_conv_t) (hid_t src_id, hid_t dst_id, H5T_cdata_t *cdata, size_t nelmts, size_t buf_stride, size_t bkg_stride, void *buf, void *bkg, hid_t dset_xfer_plist);
typedef H5T_conv_ret_t (*H5T_conv_except_func_t)(H5T_conv_except_t except_type, hid_t src_id, hid_t dst_id, void *src_buf, void *dst_buf, void *user_data);
extern hid_t H5T_IEEE_F32BE_g;
extern hid_t H5T_IEEE_F32LE_g;
extern hid_t H5T_IEEE_F64BE_g;
extern hid_t H5T_IEEE_F64LE_g;
extern hid_t H5T_STD_I8BE_g;
extern hid_t H5T_STD_I8LE_g;
extern hid_t H5T_STD_I16BE_g;
extern hid_t H5T_STD_I16LE_g;
extern hid_t H5T_STD_I32BE_g;
extern hid_t H5T_STD_I32LE_g;
extern hid_t H5T_STD_I64BE_g;
extern hid_t H5T_STD_I64LE_g;
extern hid_t H5T_STD_U8BE_g;
extern hid_t H5T_STD_U8LE_g;
extern hid_t H5T_STD_U16BE_g;
extern hid_t H5T_STD_U16LE_g;
extern hid_t H5T_STD_U32BE_g;
extern hid_t H5T_STD_U32LE_g;
extern hid_t H5T_STD_U64BE_g;
extern hid_t H5T_STD_U64LE_g;
extern hid_t H5T_STD_B8BE_g;
extern hid_t H5T_STD_B8LE_g;
extern hid_t H5T_STD_B16BE_g;
extern hid_t H5T_STD_B16LE_g;
extern hid_t H5T_STD_B32BE_g;
extern hid_t H5T_STD_B32LE_g;
extern hid_t H5T_STD_B64BE_g;
extern hid_t H5T_STD_B64LE_g;
extern hid_t H5T_STD_REF_OBJ_g;
extern hid_t H5T_STD_REF_DSETREG_g;
extern hid_t H5T_UNIX_D32BE_g;
extern hid_t H5T_UNIX_D32LE_g;
extern hid_t H5T_UNIX_D64BE_g;
extern hid_t H5T_UNIX_D64LE_g;
extern hid_t H5T_C_S1_g;
extern hid_t H5T_FORTRAN_S1_g;
extern hid_t H5T_VAX_F32_g;
extern hid_t H5T_VAX_F64_g;
extern hid_t H5T_NATIVE_SCHAR_g;
extern hid_t H5T_NATIVE_UCHAR_g;
extern hid_t H5T_NATIVE_SHORT_g;
extern hid_t H5T_NATIVE_USHORT_g;
extern hid_t H5T_NATIVE_INT_g;
extern hid_t H5T_NATIVE_UINT_g;
extern hid_t H5T_NATIVE_LONG_g;
extern hid_t H5T_NATIVE_ULONG_g;
extern hid_t H5T_NATIVE_LLONG_g;
extern hid_t H5T_NATIVE_ULLONG_g;
extern hid_t H5T_NATIVE_FLOAT_g;
extern hid_t H5T_NATIVE_DOUBLE_g;
extern hid_t H5T_NATIVE_LDOUBLE_g;
extern hid_t H5T_NATIVE_B8_g;
extern hid_t H5T_NATIVE_B16_g;
extern hid_t H5T_NATIVE_B32_g;
extern hid_t H5T_NATIVE_B64_g;
extern hid_t H5T_NATIVE_OPAQUE_g;
extern hid_t H5T_NATIVE_HADDR_g;
extern hid_t H5T_NATIVE_HSIZE_g;
extern hid_t H5T_NATIVE_HSSIZE_g;
extern hid_t H5T_NATIVE_HERR_g;
extern hid_t H5T_NATIVE_HBOOL_g;
extern hid_t H5T_NATIVE_INT8_g;
extern hid_t H5T_NATIVE_UINT8_g;
extern hid_t H5T_NATIVE_INT_LEAST8_g;
extern hid_t H5T_NATIVE_UINT_LEAST8_g;
extern hid_t H5T_NATIVE_INT_FAST8_g;
extern hid_t H5T_NATIVE_UINT_FAST8_g;
extern hid_t H5T_NATIVE_INT16_g;
extern hid_t H5T_NATIVE_UINT16_g;
extern hid_t H5T_NATIVE_INT_LEAST16_g;
extern hid_t H5T_NATIVE_UINT_LEAST16_g;
extern hid_t H5T_NATIVE_INT_FAST16_g;
extern hid_t H5T_NATIVE_UINT_FAST16_g;
extern hid_t H5T_NATIVE_INT32_g;
extern hid_t H5T_NATIVE_UINT32_g;
extern hid_t H5T_NATIVE_INT_LEAST32_g;
extern hid_t H5T_NATIVE_UINT_LEAST32_g;
extern hid_t H5T_NATIVE_INT_FAST32_g;
extern hid_t H5T_NATIVE_UINT_FAST32_g;
extern hid_t H5T_NATIVE_INT64_g;
extern hid_t H5T_NATIVE_UINT64_g;
extern hid_t H5T_NATIVE_INT_LEAST64_g;
extern hid_t H5T_NATIVE_UINT_LEAST64_g;
extern hid_t H5T_NATIVE_INT_FAST64_g;
extern hid_t H5T_NATIVE_UINT_FAST64_g;
hid_t H5Tcreate(H5T_class_t type, size_t size);
hid_t H5Tcopy(hid_t type_id);
herr_t H5Tclose(hid_t type_id);
htri_t H5Tequal(hid_t type1_id, hid_t type2_id);
herr_t H5Tlock(hid_t type_id);
herr_t H5Tcommit2(hid_t loc_id, const char *name, hid_t type_id, hid_t lcpl_id, hid_t tcpl_id, hid_t tapl_id);
hid_t H5Topen2(hid_t loc_id, const char *name, hid_t tapl_id);
herr_t H5Tcommit_anon(hid_t loc_id, hid_t type_id, hid_t tcpl_id, hid_t tapl_id);
hid_t H5Tget_create_plist(hid_t type_id);
htri_t H5Tcommitted(hid_t type_id);
herr_t H5Tencode(hid_t obj_id, void *buf, size_t *nalloc);
hid_t H5Tdecode(const void *buf);
herr_t H5Tflush(hid_t type_id);
herr_t H5Trefresh(hid_t type_id);
herr_t H5Tinsert(hid_t parent_id, const char *name, size_t offset, hid_t member_id);
herr_t H5Tpack(hid_t type_id);
hid_t H5Tenum_create(hid_t base_id);
herr_t H5Tenum_insert(hid_t type, const char *name, const void *value);
herr_t H5Tenum_nameof(hid_t type, const void *value, char *name, size_t size);
herr_t H5Tenum_valueof(hid_t type, const char *name, void *value);
hid_t H5Tvlen_create(hid_t base_id);
hid_t H5Tarray_create2(hid_t base_id, unsigned ndims, const hsize_t dim[]);
int H5Tget_array_ndims(hid_t type_id);
int H5Tget_array_dims2(hid_t type_id, hsize_t dims[]);
herr_t H5Tset_tag(hid_t type, const char *tag);
char *H5Tget_tag(hid_t type);
hid_t H5Tget_super(hid_t type);
H5T_class_t H5Tget_class(hid_t type_id);
htri_t H5Tdetect_class(hid_t type_id, H5T_class_t cls);
size_t H5Tget_size(hid_t type_id);
H5T_order_t H5Tget_order(hid_t type_id);
size_t H5Tget_precision(hid_t type_id);
int H5Tget_offset(hid_t type_id);
herr_t H5Tget_pad(hid_t type_id, H5T_pad_t *lsb, H5T_pad_t *msb);
H5T_sign_t H5Tget_sign(hid_t type_id);
herr_t H5Tget_fields(hid_t type_id, size_t *spos, size_t *epos, size_t *esize, size_t *mpos, size_t *msize);
size_t H5Tget_ebias(hid_t type_id);
H5T_norm_t H5Tget_norm(hid_t type_id);
H5T_pad_t H5Tget_inpad(hid_t type_id);
H5T_str_t H5Tget_strpad(hid_t type_id);
int H5Tget_nmembers(hid_t type_id);
char *H5Tget_member_name(hid_t type_id, unsigned membno);
int H5Tget_member_index(hid_t type_id, const char *name);
size_t H5Tget_member_offset(hid_t type_id, unsigned membno);
H5T_class_t H5Tget_member_class(hid_t type_id, unsigned membno);
hid_t H5Tget_member_type(hid_t type_id, unsigned membno);
herr_t H5Tget_member_value(hid_t type_id, unsigned membno, void *value);
H5T_cset_t H5Tget_cset(hid_t type_id);
htri_t H5Tis_variable_str(hid_t type_id);
hid_t H5Tget_native_type(hid_t type_id, H5T_direction_t direction);
herr_t H5Tset_size(hid_t type_id, size_t size);
herr_t H5Tset_order(hid_t type_id, H5T_order_t order);
herr_t H5Tset_precision(hid_t type_id, size_t prec);
herr_t H5Tset_offset(hid_t type_id, size_t offset);
herr_t H5Tset_pad(hid_t type_id, H5T_pad_t lsb, H5T_pad_t msb);
herr_t H5Tset_sign(hid_t type_id, H5T_sign_t sign);
herr_t H5Tset_fields(hid_t type_id, size_t spos, size_t epos, size_t esize, size_t mpos, size_t msize);
herr_t H5Tset_ebias(hid_t type_id, size_t ebias);
herr_t H5Tset_norm(hid_t type_id, H5T_norm_t norm);
herr_t H5Tset_inpad(hid_t type_id, H5T_pad_t pad);
herr_t H5Tset_cset(hid_t type_id, H5T_cset_t cset);
herr_t H5Tset_strpad(hid_t type_id, H5T_str_t strpad);
herr_t H5Tregister(H5T_pers_t pers, const char *name, hid_t src_id, hid_t dst_id, H5T_conv_t func);
herr_t H5Tunregister(H5T_pers_t pers, const char *name, hid_t src_id, hid_t dst_id, H5T_conv_t func);
H5T_conv_t H5Tfind(hid_t src_id, hid_t dst_id, H5T_cdata_t **pcdata);
htri_t H5Tcompiler_conv(hid_t src_id, hid_t dst_id);
herr_t H5Tconvert(hid_t src_id, hid_t dst_id, size_t nelmts, void *buf, void *background, hid_t plist_id);
herr_t H5Tcommit1(hid_t loc_id, const char *name, hid_t type_id);
hid_t H5Topen1(hid_t loc_id, const char *name);
hid_t H5Tarray_create1(hid_t base_id, int ndims, const hsize_t dim[], const int perm[]);
int H5Tget_array_dims1(hid_t type_id, hsize_t dims[], int perm[]);
/* END /usr/include/hdf5/openmpi/H5Tpublic.h */
enum { H5L_LINK_CLASS_T_VERS = 1 };
enum { H5L_LINK_CLASS_T_VERS_0 = 0 };
typedef enum { H5L_TYPE_ERROR = (-1), H5L_TYPE_HARD = 0, H5L_TYPE_SOFT = 1, H5L_TYPE_EXTERNAL = 64, H5L_TYPE_MAX = 255 } H5L_type_t;
typedef struct { H5L_type_t          type;
hbool_t             corder_valid;
int64_t             corder;
H5T_cset_t          cset;
union { haddr_t         address;
size_t          val_size;
} u;
} H5L_info_t;
typedef herr_t (*H5L_create_func_t)(const char *link_name, hid_t loc_group, const void *lnkdata, size_t lnkdata_size, hid_t lcpl_id);
typedef herr_t (*H5L_move_func_t)(const char *new_name, hid_t new_loc, const void *lnkdata, size_t lnkdata_size);
typedef herr_t (*H5L_copy_func_t)(const char *new_name, hid_t new_loc, const void *lnkdata, size_t lnkdata_size);
typedef hid_t (*H5L_traverse_0_func_t)(const char *link_name, hid_t cur_group, const void *lnkdata, size_t lnkdata_size, hid_t lapl_id);
typedef hid_t (*H5L_traverse_func_t)(const char *link_name, hid_t cur_group, const void *lnkdata, size_t lnkdata_size, hid_t lapl_id, hid_t dxpl_id);
typedef herr_t (*H5L_delete_func_t)(const char *link_name, hid_t file, const void *lnkdata, size_t lnkdata_size);
typedef ssize_t (*H5L_query_func_t)(const char *link_name, const void *lnkdata, size_t lnkdata_size, void *buf , size_t buf_size);
typedef struct { int version;
H5L_type_t id;
const char *comment;
H5L_create_func_t create_func;
H5L_move_func_t move_func;
H5L_copy_func_t copy_func;
H5L_traverse_0_func_t trav_func;
H5L_delete_func_t del_func;
H5L_query_func_t query_func;
} H5L_class_0_t;
typedef struct { int version;
H5L_type_t id;
const char *comment;
H5L_create_func_t create_func;
H5L_move_func_t move_func;
H5L_copy_func_t copy_func;
H5L_traverse_func_t trav_func;
H5L_delete_func_t del_func;
H5L_query_func_t query_func;
} H5L_class_t;
typedef herr_t (*H5L_iterate_t)(hid_t group, const char *name, const H5L_info_t *info, void *op_data);
typedef herr_t (*H5L_elink_traverse_t)(const char *parent_file_name, const char *parent_group_name, const char *child_file_name, const char *child_object_name, unsigned *acc_flags, hid_t fapl_id, void *op_data);
herr_t H5Lmove(hid_t src_loc, const char *src_name, hid_t dst_loc, const char *dst_name, hid_t lcpl_id, hid_t lapl_id);
herr_t H5Lcopy(hid_t src_loc, const char *src_name, hid_t dst_loc, const char *dst_name, hid_t lcpl_id, hid_t lapl_id);
herr_t H5Lcreate_hard(hid_t cur_loc, const char *cur_name, hid_t dst_loc, const char *dst_name, hid_t lcpl_id, hid_t lapl_id);
herr_t H5Lcreate_soft(const char *link_target, hid_t link_loc_id, const char *link_name, hid_t lcpl_id, hid_t lapl_id);
herr_t H5Ldelete(hid_t loc_id, const char *name, hid_t lapl_id);
herr_t H5Ldelete_by_idx(hid_t loc_id, const char *group_name, H5_index_t idx_type, H5_iter_order_t order, hsize_t n, hid_t lapl_id);
herr_t H5Lget_val(hid_t loc_id, const char *name, void *buf, size_t size, hid_t lapl_id);
herr_t H5Lget_val_by_idx(hid_t loc_id, const char *group_name, H5_index_t idx_type, H5_iter_order_t order, hsize_t n, void *buf, size_t size, hid_t lapl_id);
htri_t H5Lexists(hid_t loc_id, const char *name, hid_t lapl_id);
herr_t H5Lget_info(hid_t loc_id, const char *name, H5L_info_t *linfo , hid_t lapl_id);
herr_t H5Lget_info_by_idx(hid_t loc_id, const char *group_name, H5_index_t idx_type, H5_iter_order_t order, hsize_t n, H5L_info_t *linfo , hid_t lapl_id);
ssize_t H5Lget_name_by_idx(hid_t loc_id, const char *group_name, H5_index_t idx_type, H5_iter_order_t order, hsize_t n, char *name , size_t size, hid_t lapl_id);
herr_t H5Literate(hid_t grp_id, H5_index_t idx_type, H5_iter_order_t order, hsize_t *idx, H5L_iterate_t op, void *op_data);
herr_t H5Literate_by_name(hid_t loc_id, const char *group_name, H5_index_t idx_type, H5_iter_order_t order, hsize_t *idx, H5L_iterate_t op, void *op_data, hid_t lapl_id);
herr_t H5Lvisit(hid_t grp_id, H5_index_t idx_type, H5_iter_order_t order, H5L_iterate_t op, void *op_data);
herr_t H5Lvisit_by_name(hid_t loc_id, const char *group_name, H5_index_t idx_type, H5_iter_order_t order, H5L_iterate_t op, void *op_data, hid_t lapl_id);
herr_t H5Lcreate_ud(hid_t link_loc_id, const char *link_name, H5L_type_t link_type, const void *udata, size_t udata_size, hid_t lcpl_id, hid_t lapl_id);
herr_t H5Lregister(const H5L_class_t *cls);
herr_t H5Lunregister(H5L_type_t id);
htri_t H5Lis_registered(H5L_type_t id);
herr_t H5Lunpack_elink_val(const void *ext_linkval, size_t link_size, unsigned *flags, const char **filename, const char **obj_path );
herr_t H5Lcreate_external(const char *file_name, const char *obj_name, hid_t link_loc_id, const char *link_name, hid_t lcpl_id, hid_t lapl_id);
/* END /usr/include/hdf5/openmpi/H5Lpublic.h */
enum { H5O_SHMESG_NONE_FLAG = 0x0000 };
enum { H5O_HDR_CHUNK0_SIZE = 0x03 };
enum { H5O_HDR_ATTR_CRT_ORDER_TRACKED = 0x04 };
enum { H5O_HDR_ATTR_CRT_ORDER_INDEXED = 0x08 };
enum { H5O_HDR_ATTR_STORE_PHASE_CHANGE = 0x10 };
enum { H5O_HDR_STORE_TIMES = 0x20 };
enum { H5O_SHMESG_MAX_NINDEXES = 8 };
enum { H5O_SHMESG_MAX_LIST_SIZE = 5000 };
typedef enum H5O_type_t { H5O_TYPE_UNKNOWN = -1, H5O_TYPE_GROUP, H5O_TYPE_DATASET, H5O_TYPE_NAMED_DATATYPE, H5O_TYPE_NTYPES } H5O_type_t;
typedef struct H5O_hdr_info_t { unsigned version;
unsigned nmesgs;
unsigned nchunks;
unsigned flags;
struct { hsize_t total;
hsize_t meta;
hsize_t mesg;
hsize_t free;
} space;
struct { uint64_t present;
uint64_t shared;
} mesg;
} H5O_hdr_info_t;
typedef struct H5O_info_t { unsigned long     fileno;
haddr_t         addr;
H5O_type_t         type;
unsigned         rc;
time_t        atime;
time_t        mtime;
time_t        ctime;
time_t        btime;
hsize_t         num_attrs;
H5O_hdr_info_t      hdr;
struct { H5_ih_info_t   obj;
H5_ih_info_t   attr;
} meta_size;
} H5O_info_t;
typedef uint32_t H5O_msg_crt_idx_t;
typedef herr_t (*H5O_iterate_t)(hid_t obj, const char *name, const H5O_info_t *info, void *op_data);
typedef enum H5O_mcdt_search_ret_t { H5O_MCDT_SEARCH_ERROR = -1, H5O_MCDT_SEARCH_CONT, H5O_MCDT_SEARCH_STOP } H5O_mcdt_search_ret_t;
typedef H5O_mcdt_search_ret_t (*H5O_mcdt_search_cb_t)(void *op_data);
hid_t H5Oopen(hid_t loc_id, const char *name, hid_t lapl_id);
hid_t H5Oopen_by_addr(hid_t loc_id, haddr_t addr);
hid_t H5Oopen_by_idx(hid_t loc_id, const char *group_name, H5_index_t idx_type, H5_iter_order_t order, hsize_t n, hid_t lapl_id);
htri_t H5Oexists_by_name(hid_t loc_id, const char *name, hid_t lapl_id);
herr_t H5Oget_info2(hid_t loc_id, H5O_info_t *oinfo, unsigned fields);
herr_t H5Oget_info_by_name2(hid_t loc_id, const char *name, H5O_info_t *oinfo, unsigned fields, hid_t lapl_id);
herr_t H5Oget_info_by_idx2(hid_t loc_id, const char *group_name, H5_index_t idx_type, H5_iter_order_t order, hsize_t n, H5O_info_t *oinfo, unsigned fields, hid_t lapl_id);
herr_t H5Olink(hid_t obj_id, hid_t new_loc_id, const char *new_name, hid_t lcpl_id, hid_t lapl_id);
herr_t H5Oincr_refcount(hid_t object_id);
herr_t H5Odecr_refcount(hid_t object_id);
herr_t H5Ocopy(hid_t src_loc_id, const char *src_name, hid_t dst_loc_id, const char *dst_name, hid_t ocpypl_id, hid_t lcpl_id);
herr_t H5Oset_comment(hid_t obj_id, const char *comment);
herr_t H5Oset_comment_by_name(hid_t loc_id, const char *name, const char *comment, hid_t lapl_id);
ssize_t H5Oget_comment(hid_t obj_id, char *comment, size_t bufsize);
ssize_t H5Oget_comment_by_name(hid_t loc_id, const char *name, char *comment, size_t bufsize, hid_t lapl_id);
herr_t H5Ovisit2(hid_t obj_id, H5_index_t idx_type, H5_iter_order_t order, H5O_iterate_t op, void *op_data, unsigned fields);
herr_t H5Ovisit_by_name2(hid_t loc_id, const char *obj_name, H5_index_t idx_type, H5_iter_order_t order, H5O_iterate_t op, void *op_data, unsigned fields, hid_t lapl_id);
herr_t H5Oclose(hid_t object_id);
herr_t H5Oflush(hid_t obj_id);
herr_t H5Orefresh(hid_t oid);
herr_t H5Odisable_mdc_flushes(hid_t object_id);
herr_t H5Oenable_mdc_flushes(hid_t object_id);
herr_t H5Oare_mdc_flushes_disabled(hid_t object_id, hbool_t *are_disabled);
herr_t H5Oget_info(hid_t loc_id, H5O_info_t *oinfo);
herr_t H5Oget_info_by_name(hid_t loc_id, const char *name, H5O_info_t *oinfo, hid_t lapl_id);
herr_t H5Oget_info_by_idx(hid_t loc_id, const char *group_name, H5_index_t idx_type, H5_iter_order_t order, hsize_t n, H5O_info_t *oinfo, hid_t lapl_id);
herr_t H5Ovisit(hid_t obj_id, H5_index_t idx_type, H5_iter_order_t order, H5O_iterate_t op, void *op_data);
herr_t H5Ovisit_by_name(hid_t loc_id, const char *obj_name, H5_index_t idx_type, H5_iter_order_t order, H5O_iterate_t op, void *op_data, hid_t lapl_id);
herr_t H5Oget_info1(hid_t loc_id, H5O_info_t *oinfo);
herr_t H5Oget_info_by_name1(hid_t loc_id, const char *name, H5O_info_t *oinfo, hid_t lapl_id);
herr_t H5Oget_info_by_idx1(hid_t loc_id, const char *group_name, H5_index_t idx_type, H5_iter_order_t order, hsize_t n, H5O_info_t *oinfo, hid_t lapl_id);
herr_t H5Ovisit1(hid_t obj_id, H5_index_t idx_type, H5_iter_order_t order, H5O_iterate_t op, void *op_data);
herr_t H5Ovisit_by_name1(hid_t loc_id, const char *obj_name, H5_index_t idx_type, H5_iter_order_t order, H5O_iterate_t op, void *op_data, hid_t lapl_id);
typedef struct H5O_stat_t { hsize_t size;
hsize_t free;
unsigned nmesgs;
unsigned nchunks;
} H5O_stat_t;
/* END /usr/include/hdf5/openmpi/H5Opublic.h */
/* BEGIN /usr/include/hdf5/openmpi/H5Tpublic.h */
/* END /usr/include/hdf5/openmpi/H5Tpublic.h */
typedef struct { hbool_t             corder_valid;
H5O_msg_crt_idx_t   corder;
H5T_cset_t          cset;
hsize_t             data_size;
} H5A_info_t;
typedef herr_t (*H5A_operator2_t)(hid_t location_id, const char *attr_name, const H5A_info_t *ainfo, void *op_data);
hid_t   H5Acreate2(hid_t loc_id, const char *attr_name, hid_t type_id, hid_t space_id, hid_t acpl_id, hid_t aapl_id);
hid_t   H5Acreate_by_name(hid_t loc_id, const char *obj_name, const char *attr_name, hid_t type_id, hid_t space_id, hid_t acpl_id, hid_t aapl_id, hid_t lapl_id);
hid_t   H5Aopen(hid_t obj_id, const char *attr_name, hid_t aapl_id);
hid_t   H5Aopen_by_name(hid_t loc_id, const char *obj_name, const char *attr_name, hid_t aapl_id, hid_t lapl_id);
hid_t   H5Aopen_by_idx(hid_t loc_id, const char *obj_name, H5_index_t idx_type, H5_iter_order_t order, hsize_t n, hid_t aapl_id, hid_t lapl_id);
herr_t  H5Awrite(hid_t attr_id, hid_t type_id, const void *buf);
herr_t  H5Aread(hid_t attr_id, hid_t type_id, void *buf);
herr_t  H5Aclose(hid_t attr_id);
hid_t   H5Aget_space(hid_t attr_id);
hid_t   H5Aget_type(hid_t attr_id);
hid_t   H5Aget_create_plist(hid_t attr_id);
ssize_t H5Aget_name(hid_t attr_id, size_t buf_size, char *buf);
ssize_t H5Aget_name_by_idx(hid_t loc_id, const char *obj_name, H5_index_t idx_type, H5_iter_order_t order, hsize_t n, char *name , size_t size, hid_t lapl_id);
hsize_t H5Aget_storage_size(hid_t attr_id);
herr_t  H5Aget_info(hid_t attr_id, H5A_info_t *ainfo );
herr_t  H5Aget_info_by_name(hid_t loc_id, const char *obj_name, const char *attr_name, H5A_info_t *ainfo , hid_t lapl_id);
herr_t  H5Aget_info_by_idx(hid_t loc_id, const char *obj_name, H5_index_t idx_type, H5_iter_order_t order, hsize_t n, H5A_info_t *ainfo , hid_t lapl_id);
herr_t  H5Arename(hid_t loc_id, const char *old_name, const char *new_name);
herr_t  H5Arename_by_name(hid_t loc_id, const char *obj_name, const char *old_attr_name, const char *new_attr_name, hid_t lapl_id);
herr_t  H5Aiterate2(hid_t loc_id, H5_index_t idx_type, H5_iter_order_t order, hsize_t *idx, H5A_operator2_t op, void *op_data);
herr_t  H5Aiterate_by_name(hid_t loc_id, const char *obj_name, H5_index_t idx_type, H5_iter_order_t order, hsize_t *idx, H5A_operator2_t op, void *op_data, hid_t lapd_id);
herr_t  H5Adelete(hid_t loc_id, const char *name);
herr_t  H5Adelete_by_name(hid_t loc_id, const char *obj_name, const char *attr_name, hid_t lapl_id);
herr_t  H5Adelete_by_idx(hid_t loc_id, const char *obj_name, H5_index_t idx_type, H5_iter_order_t order, hsize_t n, hid_t lapl_id);
htri_t H5Aexists(hid_t obj_id, const char *attr_name);
htri_t H5Aexists_by_name(hid_t obj_id, const char *obj_name, const char *attr_name, hid_t lapl_id);
typedef herr_t (*H5A_operator1_t)(hid_t location_id, const char *attr_name, void *operator_data);
hid_t   H5Acreate1(hid_t loc_id, const char *name, hid_t type_id, hid_t space_id, hid_t acpl_id);
hid_t   H5Aopen_name(hid_t loc_id, const char *name);
hid_t   H5Aopen_idx(hid_t loc_id, unsigned idx);
int     H5Aget_num_attrs(hid_t loc_id);
herr_t  H5Aiterate1(hid_t loc_id, unsigned *attr_num, H5A_operator1_t op, void *op_data);
/* END /usr/include/hdf5/openmpi/H5Apublic.h */
/* BEGIN /usr/include/hdf5/openmpi/H5ACpublic.h */
/* BEGIN /usr/include/hdf5/openmpi/H5public.h */
/* END /usr/include/hdf5/openmpi/H5public.h */
/* BEGIN /usr/include/hdf5/openmpi/H5Cpublic.h */
/* BEGIN /usr/include/hdf5/openmpi/H5public.h */
/* END /usr/include/hdf5/openmpi/H5public.h */
enum H5C_cache_incr_mode { H5C_incr__off, H5C_incr__threshold };
enum H5C_cache_flash_incr_mode { H5C_flash_incr__off, H5C_flash_incr__add_space };
enum H5C_cache_decr_mode { H5C_decr__off, H5C_decr__threshold, H5C_decr__age_out, H5C_decr__age_out_with_threshold };
/* END /usr/include/hdf5/openmpi/H5Cpublic.h */
enum { H5AC__CURR_CACHE_CONFIG_VERSION = 1 };
enum { H5AC__MAX_TRACE_FILE_NAME_LEN = 1024 };
enum { H5AC_METADATA_WRITE_STRATEGY__PROCESS_0_ONLY = 0 };
enum { H5AC_METADATA_WRITE_STRATEGY__DISTRIBUTED = 1 };
typedef struct H5AC_cache_config_t { int                      version;
hbool_t             rpt_fcn_enabled;
hbool_t             open_trace_file;
hbool_t                  close_trace_file;
char                     trace_file_name[1024 + 1];
hbool_t                  evictions_enabled;
hbool_t                  set_initial_size;
size_t                   initial_size;
double                   min_clean_fraction;
size_t                   max_size;
size_t                   min_size;
long int                 epoch_length;
enum H5C_cache_incr_mode incr_mode;
double                   lower_hr_threshold;
double                   increment;
hbool_t                  apply_max_increment;
size_t                   max_increment;
enum H5C_cache_flash_incr_mode      flash_incr_mode;
double                              flash_multiple;
double                              flash_threshold;
enum H5C_cache_decr_mode decr_mode;
double                   upper_hr_threshold;
double                   decrement;
hbool_t                  apply_max_decrement;
size_t                   max_decrement;
int                      epochs_before_eviction;
hbool_t                  apply_empty_reserve;
double                   empty_reserve;
size_t                   dirty_bytes_threshold;
int                      metadata_write_strategy;
} H5AC_cache_config_t;
enum { H5AC__CURR_CACHE_IMAGE_CONFIG_VERSION = 1 };
enum { H5AC__CACHE_IMAGE__ENTRY_AGEOUT__NONE = -1 };
enum { H5AC__CACHE_IMAGE__ENTRY_AGEOUT__MAX = 100 };
typedef struct H5AC_cache_image_config_t { int                                 version;
hbool_t                             generate_image;
hbool_t                             save_resize_status;
int                                 entry_ageout;
} H5AC_cache_image_config_t;
/* END /usr/include/hdf5/openmpi/H5ACpublic.h */
/* BEGIN /usr/include/hdf5/openmpi/H5Dpublic.h */
/* BEGIN /usr/include/hdf5/openmpi/H5public.h */
/* END /usr/include/hdf5/openmpi/H5public.h */
/* BEGIN /usr/include/hdf5/openmpi/H5Ipublic.h */
/* END /usr/include/hdf5/openmpi/H5Ipublic.h */
typedef enum H5D_layout_t { H5D_LAYOUT_ERROR	= -1, H5D_COMPACT		= 0, H5D_CONTIGUOUS	= 1, H5D_CHUNKED		= 2, H5D_VIRTUAL         = 3, H5D_NLAYOUTS	= 4 } H5D_layout_t;
typedef enum H5D_chunk_index_t { H5D_CHUNK_IDX_BTREE	= 0, H5D_CHUNK_IDX_SINGLE = 1, H5D_CHUNK_IDX_NONE = 2, H5D_CHUNK_IDX_FARRAY = 3, H5D_CHUNK_IDX_EARRAY = 4, H5D_CHUNK_IDX_BT2 = 5, H5D_CHUNK_IDX_NTYPES } H5D_chunk_index_t;
typedef enum H5D_alloc_time_t { H5D_ALLOC_TIME_ERROR	= -1, H5D_ALLOC_TIME_DEFAULT  	= 0, H5D_ALLOC_TIME_EARLY	= 1, H5D_ALLOC_TIME_LATE		= 2, H5D_ALLOC_TIME_INCR		= 3 } H5D_alloc_time_t;
typedef enum H5D_space_status_t { H5D_SPACE_STATUS_ERROR		= -1, H5D_SPACE_STATUS_NOT_ALLOCATED	= 0, H5D_SPACE_STATUS_PART_ALLOCATED	= 1, H5D_SPACE_STATUS_ALLOCATED		= 2 } H5D_space_status_t;
typedef enum H5D_fill_time_t { H5D_FILL_TIME_ERROR	= -1, H5D_FILL_TIME_ALLOC = 0, H5D_FILL_TIME_NEVER	= 1, H5D_FILL_TIME_IFSET	= 2 } H5D_fill_time_t;
typedef enum H5D_fill_value_t { H5D_FILL_VALUE_ERROR        =-1, H5D_FILL_VALUE_UNDEFINED    =0, H5D_FILL_VALUE_DEFAULT      =1, H5D_FILL_VALUE_USER_DEFINED =2 } H5D_fill_value_t;
typedef enum H5D_vds_view_t { H5D_VDS_ERROR               = -1, H5D_VDS_FIRST_MISSING       = 0, H5D_VDS_LAST_AVAILABLE      = 1 } H5D_vds_view_t;
typedef herr_t (*H5D_append_cb_t)(hid_t dataset_id, hsize_t *cur_dims, void *op_data);
typedef herr_t (*H5D_operator_t)(void *elem, hid_t type_id, unsigned ndim, const hsize_t *point, void *operator_data);
typedef herr_t (*H5D_scatter_func_t)(const void **src_buf, size_t *src_buf_bytes_used, void *op_data);
typedef herr_t (*H5D_gather_func_t)(const void *dst_buf, size_t dst_buf_bytes_used, void *op_data);
hid_t H5Dcreate2(hid_t loc_id, const char *name, hid_t type_id, hid_t space_id, hid_t lcpl_id, hid_t dcpl_id, hid_t dapl_id);
hid_t H5Dcreate_anon(hid_t file_id, hid_t type_id, hid_t space_id, hid_t plist_id, hid_t dapl_id);
hid_t H5Dopen2(hid_t file_id, const char *name, hid_t dapl_id);
herr_t H5Dclose(hid_t dset_id);
hid_t H5Dget_space(hid_t dset_id);
herr_t H5Dget_space_status(hid_t dset_id, H5D_space_status_t *allocation);
hid_t H5Dget_type(hid_t dset_id);
hid_t H5Dget_create_plist(hid_t dset_id);
hid_t H5Dget_access_plist(hid_t dset_id);
hsize_t H5Dget_storage_size(hid_t dset_id);
herr_t H5Dget_chunk_storage_size(hid_t dset_id, const hsize_t *offset, hsize_t *chunk_bytes);
herr_t H5Dget_num_chunks(hid_t dset_id, hid_t fspace_id, hsize_t *nchunks);
herr_t H5Dget_chunk_info_by_coord(hid_t dset_id, const hsize_t *coord, unsigned *filter_mask, haddr_t *addr, hsize_t *size);
herr_t H5Dget_chunk_info(hid_t dset_id, hid_t fspace_id, hsize_t chk_idx, hsize_t *coord, unsigned *filter_mask, haddr_t *addr, hsize_t *size);
haddr_t H5Dget_offset(hid_t dset_id);
herr_t H5Dread(hid_t dset_id, hid_t mem_type_id, hid_t mem_space_id, hid_t file_space_id, hid_t plist_id, void *buf);
herr_t H5Dwrite(hid_t dset_id, hid_t mem_type_id, hid_t mem_space_id, hid_t file_space_id, hid_t plist_id, const void *buf);
herr_t H5Dwrite_chunk(hid_t dset_id, hid_t dxpl_id, uint32_t filters, const hsize_t *offset, size_t data_size, const void *buf);
herr_t H5Dread_chunk(hid_t dset_id, hid_t dxpl_id, const hsize_t *offset, uint32_t *filters, void *buf);
herr_t H5Diterate(void *buf, hid_t type_id, hid_t space_id, H5D_operator_t op, void *operator_data);
herr_t H5Dvlen_reclaim(hid_t type_id, hid_t space_id, hid_t plist_id, void *buf);
herr_t H5Dvlen_get_buf_size(hid_t dataset_id, hid_t type_id, hid_t space_id, hsize_t *size);
herr_t H5Dfill(const void *fill, hid_t fill_type, void *buf, hid_t buf_type, hid_t space);
herr_t H5Dset_extent(hid_t dset_id, const hsize_t size[]);
herr_t H5Dflush(hid_t dset_id);
herr_t H5Drefresh(hid_t dset_id);
herr_t H5Dscatter(H5D_scatter_func_t op, void *op_data, hid_t type_id, hid_t dst_space_id, void *dst_buf);
herr_t H5Dgather(hid_t src_space_id, const void *src_buf, hid_t type_id, size_t dst_buf_size, void *dst_buf, H5D_gather_func_t op, void *op_data);
herr_t H5Ddebug(hid_t dset_id);
herr_t H5Dformat_convert(hid_t dset_id);
herr_t H5Dget_chunk_index_type(hid_t did, H5D_chunk_index_t *idx_type);
hid_t H5Dcreate1(hid_t file_id, const char *name, hid_t type_id, hid_t space_id, hid_t dcpl_id);
hid_t H5Dopen1(hid_t file_id, const char *name);
herr_t H5Dextend(hid_t dset_id, const hsize_t size[]);
/* END /usr/include/hdf5/openmpi/H5Dpublic.h */
/* BEGIN /usr/include/hdf5/openmpi/H5Epublic.h */
/* BEGIN /usr/include/hdf5/openmpi/H5public.h */
/* END /usr/include/hdf5/openmpi/H5public.h */
/* BEGIN /usr/include/hdf5/openmpi/H5Ipublic.h */
/* END /usr/include/hdf5/openmpi/H5Ipublic.h */
typedef enum H5E_type_t { H5E_MAJOR, H5E_MINOR } H5E_type_t;
typedef struct H5E_error2_t { hid_t       cls_id;
hid_t       maj_num;
hid_t       min_num;
unsigned	line;
const char	*func_name;
const char	*file_name;
const char	*desc;
} H5E_error2_t;
extern hid_t H5E_ERR_CLS_g;
/* BEGIN /usr/include/hdf5/openmpi/H5Epubgen.h */
extern hid_t H5E_FUNC_g;
extern hid_t H5E_FILE_g;
extern hid_t H5E_SOHM_g;
extern hid_t H5E_SYM_g;
extern hid_t H5E_PLUGIN_g;
extern hid_t H5E_VFL_g;
extern hid_t H5E_INTERNAL_g;
extern hid_t H5E_BTREE_g;
extern hid_t H5E_REFERENCE_g;
extern hid_t H5E_DATASPACE_g;
extern hid_t H5E_RESOURCE_g;
extern hid_t H5E_RS_g;
extern hid_t H5E_FARRAY_g;
extern hid_t H5E_HEAP_g;
extern hid_t H5E_ATTR_g;
extern hid_t H5E_IO_g;
extern hid_t H5E_EFL_g;
extern hid_t H5E_TST_g;
extern hid_t H5E_PAGEBUF_g;
extern hid_t H5E_FSPACE_g;
extern hid_t H5E_DATASET_g;
extern hid_t H5E_STORAGE_g;
extern hid_t H5E_LINK_g;
extern hid_t H5E_PLIST_g;
extern hid_t H5E_DATATYPE_g;
extern hid_t H5E_OHDR_g;
extern hid_t H5E_ATOM_g;
extern hid_t H5E_NONE_MAJOR_g;
extern hid_t H5E_SLIST_g;
extern hid_t H5E_ARGS_g;
extern hid_t H5E_CONTEXT_g;
extern hid_t H5E_EARRAY_g;
extern hid_t H5E_PLINE_g;
extern hid_t H5E_ERROR_g;
extern hid_t H5E_CACHE_g;
extern hid_t H5E_SEEKERROR_g;
extern hid_t H5E_READERROR_g;
extern hid_t H5E_WRITEERROR_g;
extern hid_t H5E_CLOSEERROR_g;
extern hid_t H5E_OVERFLOW_g;
extern hid_t H5E_FCNTL_g;
extern hid_t H5E_NOSPACE_g;
extern hid_t H5E_CANTALLOC_g;
extern hid_t H5E_CANTCOPY_g;
extern hid_t H5E_CANTFREE_g;
extern hid_t H5E_ALREADYEXISTS_g;
extern hid_t H5E_CANTLOCK_g;
extern hid_t H5E_CANTUNLOCK_g;
extern hid_t H5E_CANTGC_g;
extern hid_t H5E_CANTGETSIZE_g;
extern hid_t H5E_OBJOPEN_g;
extern hid_t H5E_CANTRESTORE_g;
extern hid_t H5E_CANTCOMPUTE_g;
extern hid_t H5E_CANTEXTEND_g;
extern hid_t H5E_CANTATTACH_g;
extern hid_t H5E_CANTUPDATE_g;
extern hid_t H5E_CANTOPERATE_g;
extern hid_t H5E_CANTINIT_g;
extern hid_t H5E_ALREADYINIT_g;
extern hid_t H5E_CANTRELEASE_g;
extern hid_t H5E_CANTGET_g;
extern hid_t H5E_CANTSET_g;
extern hid_t H5E_DUPCLASS_g;
extern hid_t H5E_SETDISALLOWED_g;
extern hid_t H5E_CANTMERGE_g;
extern hid_t H5E_CANTREVIVE_g;
extern hid_t H5E_CANTSHRINK_g;
extern hid_t H5E_LINKCOUNT_g;
extern hid_t H5E_VERSION_g;
extern hid_t H5E_ALIGNMENT_g;
extern hid_t H5E_BADMESG_g;
extern hid_t H5E_CANTDELETE_g;
extern hid_t H5E_BADITER_g;
extern hid_t H5E_CANTPACK_g;
extern hid_t H5E_CANTRESET_g;
extern hid_t H5E_CANTRENAME_g;
extern hid_t H5E_SYSERRSTR_g;
extern hid_t H5E_NOFILTER_g;
extern hid_t H5E_CALLBACK_g;
extern hid_t H5E_CANAPPLY_g;
extern hid_t H5E_SETLOCAL_g;
extern hid_t H5E_NOENCODER_g;
extern hid_t H5E_CANTFILTER_g;
extern hid_t H5E_CANTOPENOBJ_g;
extern hid_t H5E_CANTCLOSEOBJ_g;
extern hid_t H5E_COMPLEN_g;
extern hid_t H5E_PATH_g;
extern hid_t H5E_NONE_MINOR_g;
extern hid_t H5E_OPENERROR_g;
extern hid_t H5E_FILEEXISTS_g;
extern hid_t H5E_FILEOPEN_g;
extern hid_t H5E_CANTCREATE_g;
extern hid_t H5E_CANTOPENFILE_g;
extern hid_t H5E_CANTCLOSEFILE_g;
extern hid_t H5E_NOTHDF5_g;
extern hid_t H5E_BADFILE_g;
extern hid_t H5E_TRUNCATED_g;
extern hid_t H5E_MOUNT_g;
extern hid_t H5E_BADATOM_g;
extern hid_t H5E_BADGROUP_g;
extern hid_t H5E_CANTREGISTER_g;
extern hid_t H5E_CANTINC_g;
extern hid_t H5E_CANTDEC_g;
extern hid_t H5E_NOIDS_g;
extern hid_t H5E_CANTFLUSH_g;
extern hid_t H5E_CANTUNSERIALIZE_g;
extern hid_t H5E_CANTSERIALIZE_g;
extern hid_t H5E_CANTTAG_g;
extern hid_t H5E_CANTLOAD_g;
extern hid_t H5E_PROTECT_g;
extern hid_t H5E_NOTCACHED_g;
extern hid_t H5E_SYSTEM_g;
extern hid_t H5E_CANTINS_g;
extern hid_t H5E_CANTPROTECT_g;
extern hid_t H5E_CANTUNPROTECT_g;
extern hid_t H5E_CANTPIN_g;
extern hid_t H5E_CANTUNPIN_g;
extern hid_t H5E_CANTMARKDIRTY_g;
extern hid_t H5E_CANTMARKCLEAN_g;
extern hid_t H5E_CANTMARKUNSERIALIZED_g;
extern hid_t H5E_CANTMARKSERIALIZED_g;
extern hid_t H5E_CANTDIRTY_g;
extern hid_t H5E_CANTCLEAN_g;
extern hid_t H5E_CANTEXPUNGE_g;
extern hid_t H5E_CANTRESIZE_g;
extern hid_t H5E_CANTDEPEND_g;
extern hid_t H5E_CANTUNDEPEND_g;
extern hid_t H5E_CANTNOTIFY_g;
extern hid_t H5E_LOGGING_g;
extern hid_t H5E_LOGFAIL_g;
extern hid_t H5E_CANTCORK_g;
extern hid_t H5E_CANTUNCORK_g;
extern hid_t H5E_TRAVERSE_g;
extern hid_t H5E_NLINKS_g;
extern hid_t H5E_NOTREGISTERED_g;
extern hid_t H5E_CANTMOVE_g;
extern hid_t H5E_CANTSORT_g;
extern hid_t H5E_MPI_g;
extern hid_t H5E_MPIERRSTR_g;
extern hid_t H5E_CANTRECV_g;
extern hid_t H5E_CANTGATHER_g;
extern hid_t H5E_NO_INDEPENDENT_g;
extern hid_t H5E_CANTCLIP_g;
extern hid_t H5E_CANTCOUNT_g;
extern hid_t H5E_CANTSELECT_g;
extern hid_t H5E_CANTNEXT_g;
extern hid_t H5E_BADSELECT_g;
extern hid_t H5E_CANTCOMPARE_g;
extern hid_t H5E_CANTAPPEND_g;
extern hid_t H5E_UNINITIALIZED_g;
extern hid_t H5E_UNSUPPORTED_g;
extern hid_t H5E_BADTYPE_g;
extern hid_t H5E_BADRANGE_g;
extern hid_t H5E_BADVALUE_g;
extern hid_t H5E_NOTFOUND_g;
extern hid_t H5E_EXISTS_g;
extern hid_t H5E_CANTENCODE_g;
extern hid_t H5E_CANTDECODE_g;
extern hid_t H5E_CANTSPLIT_g;
extern hid_t H5E_CANTREDISTRIBUTE_g;
extern hid_t H5E_CANTSWAP_g;
extern hid_t H5E_CANTINSERT_g;
extern hid_t H5E_CANTLIST_g;
extern hid_t H5E_CANTMODIFY_g;
extern hid_t H5E_CANTREMOVE_g;
extern hid_t H5E_CANTCONVERT_g;
extern hid_t H5E_BADSIZE_g;
/* END /usr/include/hdf5/openmpi/H5Epubgen.h */
typedef enum H5E_direction_t { H5E_WALK_UPWARD	= 0, H5E_WALK_DOWNWARD	= 1 } H5E_direction_t;
typedef herr_t (*H5E_walk2_t)(unsigned n, const H5E_error2_t *err_desc, void *client_data);
typedef herr_t (*H5E_auto2_t)(hid_t estack, void *client_data);
hid_t  H5Eregister_class(const char *cls_name, const char *lib_name, const char *version);
herr_t H5Eunregister_class(hid_t class_id);
herr_t H5Eclose_msg(hid_t err_id);
hid_t  H5Ecreate_msg(hid_t cls, H5E_type_t msg_type, const char *msg);
hid_t  H5Ecreate_stack(void);
hid_t  H5Eget_current_stack(void);
herr_t H5Eclose_stack(hid_t stack_id);
ssize_t H5Eget_class_name(hid_t class_id, char *name, size_t size);
herr_t H5Eset_current_stack(hid_t err_stack_id);
herr_t H5Epush2(hid_t err_stack, const char *file, const char *func, unsigned line, hid_t cls_id, hid_t maj_id, hid_t min_id, const char *msg, ...);
herr_t H5Epop(hid_t err_stack, size_t count);
herr_t H5Eprint2(hid_t err_stack, FILE *stream);
herr_t H5Ewalk2(hid_t err_stack, H5E_direction_t direction, H5E_walk2_t func, void *client_data);
herr_t H5Eget_auto2(hid_t estack_id, H5E_auto2_t *func, void **client_data);
herr_t H5Eset_auto2(hid_t estack_id, H5E_auto2_t func, void *client_data);
herr_t H5Eclear2(hid_t err_stack);
herr_t H5Eauto_is_v2(hid_t err_stack, unsigned *is_stack);
ssize_t H5Eget_msg(hid_t msg_id, H5E_type_t *type, char *msg, size_t size);
ssize_t H5Eget_num(hid_t error_stack_id);
typedef hid_t   H5E_major_t;
typedef hid_t   H5E_minor_t;
typedef struct H5E_error1_t { H5E_major_t maj_num;
H5E_minor_t min_num;
const char  *func_name;
const char  *file_name;
unsigned    line;
const char  *desc;
} H5E_error1_t;
typedef herr_t (*H5E_walk1_t)(int n, H5E_error1_t *err_desc, void *client_data);
typedef herr_t (*H5E_auto1_t)(void *client_data);
herr_t H5Eclear1(void);
herr_t H5Eget_auto1(H5E_auto1_t *func, void **client_data);
herr_t H5Epush1(const char *file, const char *func, unsigned line, H5E_major_t maj, H5E_minor_t min, const char *str);
herr_t H5Eprint1(FILE *stream);
herr_t H5Eset_auto1(H5E_auto1_t func, void *client_data);
herr_t H5Ewalk1(H5E_direction_t direction, H5E_walk1_t func, void *client_data);
char *H5Eget_major(H5E_major_t maj);
char *H5Eget_minor(H5E_minor_t min);
/* END /usr/include/hdf5/openmpi/H5Epublic.h */
/* BEGIN /usr/include/hdf5/openmpi/H5Fpublic.h */
/* BEGIN /usr/include/hdf5/openmpi/H5public.h */
/* END /usr/include/hdf5/openmpi/H5public.h */
/* BEGIN /usr/include/hdf5/openmpi/H5ACpublic.h */
/* END /usr/include/hdf5/openmpi/H5ACpublic.h */
/* BEGIN /usr/include/hdf5/openmpi/H5Ipublic.h */
/* END /usr/include/hdf5/openmpi/H5Ipublic.h */
typedef enum H5F_scope_t { H5F_SCOPE_LOCAL    = 0, H5F_SCOPE_GLOBAL    = 1 } H5F_scope_t;
typedef enum H5F_close_degree_t { H5F_CLOSE_DEFAULT   = 0, H5F_CLOSE_WEAK      = 1, H5F_CLOSE_SEMI      = 2, H5F_CLOSE_STRONG    = 3 } H5F_close_degree_t;
typedef struct H5F_info2_t { struct { unsigned    version;
hsize_t        super_size;
hsize_t        super_ext_size;
} super;
struct { unsigned    version;
hsize_t        meta_size;
hsize_t        tot_space;
} free;
struct { unsigned    version;
hsize_t        hdr_size;
H5_ih_info_t    msgs_info;
} sohm;
} H5F_info2_t;
typedef enum H5F_mem_t { H5FD_MEM_NOLIST     = -1, H5FD_MEM_DEFAULT    = 0, H5FD_MEM_SUPER      = 1, H5FD_MEM_BTREE      = 2, H5FD_MEM_DRAW       = 3, H5FD_MEM_GHEAP      = 4, H5FD_MEM_LHEAP      = 5, H5FD_MEM_OHDR       = 6, H5FD_MEM_NTYPES } H5F_mem_t;
typedef struct H5F_sect_info_t { haddr_t             addr;
hsize_t             size;
} H5F_sect_info_t;
typedef enum H5F_libver_t { H5F_LIBVER_ERROR = -1, H5F_LIBVER_EARLIEST = 0, H5F_LIBVER_V18 = 1, H5F_LIBVER_V110 = 2, H5F_LIBVER_NBOUNDS } H5F_libver_t;
typedef enum H5F_fspace_strategy_t { H5F_FSPACE_STRATEGY_FSM_AGGR = 0, H5F_FSPACE_STRATEGY_PAGE = 1, H5F_FSPACE_STRATEGY_AGGR = 2, H5F_FSPACE_STRATEGY_NONE = 3, H5F_FSPACE_STRATEGY_NTYPES } H5F_fspace_strategy_t;
typedef enum H5F_file_space_type_t { H5F_FILE_SPACE_DEFAULT = 0, H5F_FILE_SPACE_ALL_PERSIST = 1, H5F_FILE_SPACE_ALL = 2, H5F_FILE_SPACE_AGGR_VFD = 3, H5F_FILE_SPACE_VFD = 4, H5F_FILE_SPACE_NTYPES } H5F_file_space_type_t;
enum { H5F_NUM_METADATA_READ_RETRY_TYPES = 21 };
typedef struct H5F_retry_info_t { unsigned nbins;
uint32_t *retries[21];
} H5F_retry_info_t;
typedef herr_t (*H5F_flush_cb_t)(hid_t object_id, void *udata);
htri_t H5Fis_hdf5(const char *filename);
hid_t  H5Fcreate(const char *filename, unsigned flags, hid_t create_plist, hid_t access_plist);
hid_t  H5Fopen(const char *filename, unsigned flags, hid_t access_plist);
hid_t  H5Freopen(hid_t file_id);
herr_t H5Fflush(hid_t object_id, H5F_scope_t scope);
herr_t H5Fclose(hid_t file_id);
hid_t  H5Fget_create_plist(hid_t file_id);
hid_t  H5Fget_access_plist(hid_t file_id);
herr_t H5Fget_intent(hid_t file_id, unsigned *intent);
ssize_t H5Fget_obj_count(hid_t file_id, unsigned types);
ssize_t H5Fget_obj_ids(hid_t file_id, unsigned types, size_t max_objs, hid_t *obj_id_list);
herr_t H5Fget_vfd_handle(hid_t file_id, hid_t fapl, void **file_handle);
herr_t H5Fmount(hid_t loc, const char *name, hid_t child, hid_t plist);
herr_t H5Funmount(hid_t loc, const char *name);
hssize_t H5Fget_freespace(hid_t file_id);
herr_t H5Fget_filesize(hid_t file_id, hsize_t *size);
herr_t H5Fget_eoa(hid_t file_id, haddr_t *eoa);
herr_t H5Fincrement_filesize(hid_t file_id, hsize_t increment);
ssize_t H5Fget_file_image(hid_t file_id, void * buf_ptr, size_t buf_len);
herr_t H5Fget_mdc_config(hid_t file_id, H5AC_cache_config_t * config_ptr);
herr_t H5Fset_mdc_config(hid_t file_id, H5AC_cache_config_t * config_ptr);
herr_t H5Fget_mdc_hit_rate(hid_t file_id, double * hit_rate_ptr);
herr_t H5Fget_mdc_size(hid_t file_id, size_t * max_size_ptr, size_t * min_clean_size_ptr, size_t * cur_size_ptr, int * cur_num_entries_ptr);
herr_t H5Freset_mdc_hit_rate_stats(hid_t file_id);
ssize_t H5Fget_name(hid_t obj_id, char *name, size_t size);
herr_t H5Fget_info2(hid_t obj_id, H5F_info2_t *finfo);
herr_t H5Fget_metadata_read_retry_info(hid_t file_id, H5F_retry_info_t *info);
herr_t H5Fstart_swmr_write(hid_t file_id);
ssize_t H5Fget_free_sections(hid_t file_id, H5F_mem_t type, size_t nsects, H5F_sect_info_t *sect_info);
herr_t H5Fclear_elink_file_cache(hid_t file_id);
herr_t H5Fset_libver_bounds(hid_t file_id, H5F_libver_t low, H5F_libver_t high);
herr_t H5Fstart_mdc_logging(hid_t file_id);
herr_t H5Fstop_mdc_logging(hid_t file_id);
herr_t H5Fget_mdc_logging_status(hid_t file_id, hbool_t *is_enabled, hbool_t *is_currently_logging);
herr_t H5Fformat_convert(hid_t fid);
herr_t H5Freset_page_buffering_stats(hid_t file_id);
herr_t H5Fget_page_buffering_stats(hid_t file_id, unsigned accesses[2], unsigned hits[2], unsigned misses[2], unsigned evictions[2], unsigned bypasses[2]);
herr_t H5Fget_mdc_image_info(hid_t file_id, haddr_t *image_addr, hsize_t *image_size);
herr_t H5Fget_dset_no_attrs_hint(hid_t file_id, hbool_t *minimize);
herr_t H5Fset_dset_no_attrs_hint(hid_t file_id, hbool_t minimize);
herr_t H5Fset_mpi_atomicity(hid_t file_id, hbool_t flag);
herr_t H5Fget_mpi_atomicity(hid_t file_id, hbool_t *flag);
typedef struct H5F_info1_t { hsize_t        super_ext_size;
struct { hsize_t        hdr_size;
H5_ih_info_t    msgs_info;
} sohm;
} H5F_info1_t;
herr_t H5Fget_info1(hid_t obj_id, H5F_info1_t *finfo);
herr_t H5Fset_latest_format(hid_t file_id, hbool_t latest_format);
/* END /usr/include/hdf5/openmpi/H5Fpublic.h */
/* BEGIN /usr/include/hdf5/openmpi/H5FDpublic.h */
/* BEGIN /usr/include/hdf5/openmpi/H5public.h */
/* END /usr/include/hdf5/openmpi/H5public.h */
/* BEGIN /usr/include/hdf5/openmpi/H5Fpublic.h */
/* END /usr/include/hdf5/openmpi/H5Fpublic.h */
enum { H5_HAVE_VFL = 1 };
enum { H5FD_VFD_DEFAULT = 0 };
typedef enum H5F_mem_t	H5FD_mem_t;
enum { H5FD_FEAT_AGGREGATE_METADATA = 0x00000001 };
enum { H5FD_FEAT_ACCUMULATE_METADATA_WRITE = 0x00000002 };
enum { H5FD_FEAT_ACCUMULATE_METADATA_READ = 0x00000004 };
enum { H5FD_FEAT_DATA_SIEVE = 0x00000008 };
enum { H5FD_FEAT_AGGREGATE_SMALLDATA = 0x00000010 };
enum { H5FD_FEAT_IGNORE_DRVRINFO = 0x00000020 };
enum { H5FD_FEAT_DIRTY_DRVRINFO_LOAD = 0x00000040 };
enum { H5FD_FEAT_POSIX_COMPAT_HANDLE = 0x00000080 };
enum { H5FD_FEAT_HAS_MPI = 0x00000100 };
enum { H5FD_FEAT_ALLOCATE_EARLY = 0x00000200 };
enum { H5FD_FEAT_ALLOW_FILE_IMAGE = 0x00000400 };
enum { H5FD_FEAT_CAN_USE_FILE_IMAGE_CALLBACKS = 0x00000800 };
enum { H5FD_FEAT_SUPPORTS_SWMR_IO = 0x00001000 };
enum { H5FD_FEAT_USE_ALLOC_SIZE = 0x00002000 };
enum { H5FD_FEAT_PAGED_AGGR = 0x00004000 };
enum { H5FD_FEAT_DEFAULT_VFD_COMPATIBLE = 0x00008000 };
typedef struct H5FD_t H5FD_t;
typedef struct H5FD_class_t { const char *name;
haddr_t maxaddr;
H5F_close_degree_t fc_degree;
herr_t  (*terminate)(void);
hsize_t (*sb_size)(H5FD_t *file);
herr_t  (*sb_encode)(H5FD_t *file, char *name, unsigned char *p);
herr_t  (*sb_decode)(H5FD_t *f, const char *name, const unsigned char *p);
size_t  fapl_size;
void *  (*fapl_get)(H5FD_t *file);
void *  (*fapl_copy)(const void *fapl);
herr_t  (*fapl_free)(void *fapl);
size_t  dxpl_size;
void *  (*dxpl_copy)(const void *dxpl);
herr_t  (*dxpl_free)(void *dxpl);
H5FD_t *(*open)(const char *name, unsigned flags, hid_t fapl, haddr_t maxaddr);
herr_t  (*close)(H5FD_t *file);
int     (*cmp)(const H5FD_t *f1, const H5FD_t *f2);
herr_t  (*query)(const H5FD_t *f1, unsigned long *flags);
herr_t  (*get_type_map)(const H5FD_t *file, H5FD_mem_t *type_map);
haddr_t (*alloc)(H5FD_t *file, H5FD_mem_t type, hid_t dxpl_id, hsize_t size);
herr_t  (*free)(H5FD_t *file, H5FD_mem_t type, hid_t dxpl_id, haddr_t addr, hsize_t size);
haddr_t (*get_eoa)(const H5FD_t *file, H5FD_mem_t type);
herr_t  (*set_eoa)(H5FD_t *file, H5FD_mem_t type, haddr_t addr);
haddr_t (*get_eof)(const H5FD_t *file, H5FD_mem_t type);
herr_t  (*get_handle)(H5FD_t *file, hid_t fapl, void**file_handle);
herr_t  (*read)(H5FD_t *file, H5FD_mem_t type, hid_t dxpl, haddr_t addr, size_t size, void *buffer);
herr_t  (*write)(H5FD_t *file, H5FD_mem_t type, hid_t dxpl, haddr_t addr, size_t size, const void *buffer);
herr_t  (*flush)(H5FD_t *file, hid_t dxpl_id, hbool_t closing);
herr_t  (*truncate)(H5FD_t *file, hid_t dxpl_id, hbool_t closing);
herr_t  (*lock)(H5FD_t *file, hbool_t rw);
herr_t  (*unlock)(H5FD_t *file);
H5FD_mem_t fl_map[H5FD_MEM_NTYPES];
} H5FD_class_t;
typedef struct H5FD_free_t { haddr_t		addr;
hsize_t		size;
struct H5FD_free_t	*next;
} H5FD_free_t;
struct H5FD_t { hid_t               driver_id;
const H5FD_class_t *cls;
unsigned long       fileno;
unsigned            access_flags;
unsigned long       feature_flags;
haddr_t             maxaddr;
haddr_t             base_addr;
hsize_t             threshold;
hsize_t             alignment;
hbool_t             paged_aggr;
};
typedef enum { H5FD_FILE_IMAGE_OP_NO_OP, H5FD_FILE_IMAGE_OP_PROPERTY_LIST_SET, H5FD_FILE_IMAGE_OP_PROPERTY_LIST_COPY, H5FD_FILE_IMAGE_OP_PROPERTY_LIST_GET, H5FD_FILE_IMAGE_OP_PROPERTY_LIST_CLOSE, H5FD_FILE_IMAGE_OP_FILE_OPEN, H5FD_FILE_IMAGE_OP_FILE_RESIZE, H5FD_FILE_IMAGE_OP_FILE_CLOSE } H5FD_file_image_op_t;
typedef struct { void   *(*image_malloc)(size_t size, H5FD_file_image_op_t file_image_op, void *udata);
void   *(*image_memcpy)(void *dest, const void *src, size_t size, H5FD_file_image_op_t file_image_op, void *udata);
void   *(*image_realloc)(void *ptr, size_t size, H5FD_file_image_op_t file_image_op, void *udata);
herr_t  (*image_free)(void *ptr, H5FD_file_image_op_t file_image_op, void *udata);
void   *(*udata_copy)(void *udata);
herr_t  (*udata_free)(void *udata);
void *udata;
} H5FD_file_image_callbacks_t;
hid_t H5FDregister(const H5FD_class_t *cls);
herr_t H5FDunregister(hid_t driver_id);
H5FD_t *H5FDopen(const char *name, unsigned flags, hid_t fapl_id, haddr_t maxaddr);
herr_t H5FDclose(H5FD_t *file);
int H5FDcmp(const H5FD_t *f1, const H5FD_t *f2);
int H5FDquery(const H5FD_t *f, unsigned long *flags);
haddr_t H5FDalloc(H5FD_t *file, H5FD_mem_t type, hid_t dxpl_id, hsize_t size);
herr_t H5FDfree(H5FD_t *file, H5FD_mem_t type, hid_t dxpl_id, haddr_t addr, hsize_t size);
haddr_t H5FDget_eoa(H5FD_t *file, H5FD_mem_t type);
herr_t H5FDset_eoa(H5FD_t *file, H5FD_mem_t type, haddr_t eoa);
haddr_t H5FDget_eof(H5FD_t *file, H5FD_mem_t type);
herr_t H5FDget_vfd_handle(H5FD_t *file, hid_t fapl, void**file_handle);
herr_t H5FDread(H5FD_t *file, H5FD_mem_t type, hid_t dxpl_id, haddr_t addr, size_t size, void *buf);
herr_t H5FDwrite(H5FD_t *file, H5FD_mem_t type, hid_t dxpl_id, haddr_t addr, size_t size, const void *buf);
herr_t H5FDflush(H5FD_t *file, hid_t dxpl_id, hbool_t closing);
herr_t H5FDtruncate(H5FD_t *file, hid_t dxpl_id, hbool_t closing);
herr_t H5FDlock(H5FD_t *file, hbool_t rw);
herr_t H5FDunlock(H5FD_t *file);
herr_t H5FDdriver_query(hid_t driver_id, unsigned long *flags);
/* END /usr/include/hdf5/openmpi/H5FDpublic.h */
/* BEGIN /usr/include/hdf5/openmpi/H5Gpublic.h */
/* BEGIN /usr/include/hdf5/openmpi/H5public.h */
/* END /usr/include/hdf5/openmpi/H5public.h */
/* BEGIN /usr/include/hdf5/openmpi/H5Lpublic.h */
/* END /usr/include/hdf5/openmpi/H5Lpublic.h */
/* BEGIN /usr/include/hdf5/openmpi/H5Opublic.h */
/* END /usr/include/hdf5/openmpi/H5Opublic.h */
/* BEGIN /usr/include/hdf5/openmpi/H5Tpublic.h */
/* END /usr/include/hdf5/openmpi/H5Tpublic.h */
typedef enum H5G_storage_type_t { H5G_STORAGE_TYPE_UNKNOWN = -1, H5G_STORAGE_TYPE_SYMBOL_TABLE, H5G_STORAGE_TYPE_COMPACT, H5G_STORAGE_TYPE_DENSE } H5G_storage_type_t;
typedef struct H5G_info_t { H5G_storage_type_t 	storage_type;
hsize_t 	nlinks;
int64_t     max_corder;
hbool_t     mounted;
} H5G_info_t;
hid_t H5Gcreate2(hid_t loc_id, const char *name, hid_t lcpl_id, hid_t gcpl_id, hid_t gapl_id);
hid_t H5Gcreate_anon(hid_t loc_id, hid_t gcpl_id, hid_t gapl_id);
hid_t H5Gopen2(hid_t loc_id, const char *name, hid_t gapl_id);
hid_t H5Gget_create_plist(hid_t group_id);
herr_t H5Gget_info(hid_t loc_id, H5G_info_t *ginfo);
herr_t H5Gget_info_by_name(hid_t loc_id, const char *name, H5G_info_t *ginfo, hid_t lapl_id);
herr_t H5Gget_info_by_idx(hid_t loc_id, const char *group_name, H5_index_t idx_type, H5_iter_order_t order, hsize_t n, H5G_info_t *ginfo, hid_t lapl_id);
herr_t H5Gclose(hid_t group_id);
herr_t H5Gflush(hid_t group_id);
herr_t H5Grefresh(hid_t group_id);
enum { H5G_NTYPES = 256 };
enum { H5G_NLIBTYPES = 8 };
typedef enum H5G_obj_t { H5G_UNKNOWN = -1, H5G_GROUP, H5G_DATASET, H5G_TYPE, H5G_LINK, H5G_UDLINK, H5G_RESERVED_5, H5G_RESERVED_6, H5G_RESERVED_7 } H5G_obj_t;
typedef herr_t (*H5G_iterate_t)(hid_t group, const char *name, void *op_data);
typedef struct H5G_stat_t { unsigned long 	fileno[2];
unsigned long 	objno[2];
unsigned 		nlink;
H5G_obj_t 		type;
time_t		mtime;
size_t		linklen;
H5O_stat_t          ohdr;
} H5G_stat_t;
hid_t H5Gcreate1(hid_t loc_id, const char *name, size_t size_hint);
hid_t H5Gopen1(hid_t loc_id, const char *name);
herr_t H5Glink(hid_t cur_loc_id, H5L_type_t type, const char *cur_name, const char *new_name);
herr_t H5Glink2(hid_t cur_loc_id, const char *cur_name, H5L_type_t type, hid_t new_loc_id, const char *new_name);
herr_t H5Gmove(hid_t src_loc_id, const char *src_name, const char *dst_name);
herr_t H5Gmove2(hid_t src_loc_id, const char *src_name, hid_t dst_loc_id, const char *dst_name);
herr_t H5Gunlink(hid_t loc_id, const char *name);
herr_t H5Gget_linkval(hid_t loc_id, const char *name, size_t size, char *buf);
herr_t H5Gset_comment(hid_t loc_id, const char *name, const char *comment);
int H5Gget_comment(hid_t loc_id, const char *name, size_t bufsize, char *buf);
herr_t H5Giterate(hid_t loc_id, const char *name, int *idx, H5G_iterate_t op, void *op_data);
herr_t H5Gget_num_objs(hid_t loc_id, hsize_t *num_objs);
herr_t H5Gget_objinfo(hid_t loc_id, const char *name, hbool_t follow_link, H5G_stat_t *statbuf);
ssize_t H5Gget_objname_by_idx(hid_t loc_id, hsize_t idx, char* name, size_t size);
H5G_obj_t H5Gget_objtype_by_idx(hid_t loc_id, hsize_t idx);
/* END /usr/include/hdf5/openmpi/H5Gpublic.h */
/* BEGIN /usr/include/hdf5/openmpi/H5Ipublic.h */
/* END /usr/include/hdf5/openmpi/H5Ipublic.h */
/* BEGIN /usr/include/hdf5/openmpi/H5Lpublic.h */
/* END /usr/include/hdf5/openmpi/H5Lpublic.h */
/* BEGIN /usr/include/hdf5/openmpi/H5MMpublic.h */
/* BEGIN /usr/include/hdf5/openmpi/H5public.h */
/* END /usr/include/hdf5/openmpi/H5public.h */
typedef void *(*H5MM_allocate_t)(size_t size, void *alloc_info);
typedef void (*H5MM_free_t)(void *mem, void *free_info);
/* END /usr/include/hdf5/openmpi/H5MMpublic.h */
/* BEGIN /usr/include/hdf5/openmpi/H5Opublic.h */
/* END /usr/include/hdf5/openmpi/H5Opublic.h */
/* BEGIN /usr/include/hdf5/openmpi/H5Ppublic.h */
/* BEGIN /usr/include/hdf5/openmpi/H5public.h */
/* END /usr/include/hdf5/openmpi/H5public.h */
/* BEGIN /usr/include/hdf5/openmpi/H5ACpublic.h */
/* END /usr/include/hdf5/openmpi/H5ACpublic.h */
/* BEGIN /usr/include/hdf5/openmpi/H5Dpublic.h */
/* END /usr/include/hdf5/openmpi/H5Dpublic.h */
/* BEGIN /usr/include/hdf5/openmpi/H5Fpublic.h */
/* END /usr/include/hdf5/openmpi/H5Fpublic.h */
/* BEGIN /usr/include/hdf5/openmpi/H5FDpublic.h */
/* END /usr/include/hdf5/openmpi/H5FDpublic.h */
/* BEGIN /usr/include/hdf5/openmpi/H5Ipublic.h */
/* END /usr/include/hdf5/openmpi/H5Ipublic.h */
/* BEGIN /usr/include/hdf5/openmpi/H5Lpublic.h */
/* END /usr/include/hdf5/openmpi/H5Lpublic.h */
/* BEGIN /usr/include/hdf5/openmpi/H5Opublic.h */
/* END /usr/include/hdf5/openmpi/H5Opublic.h */
/* BEGIN /usr/include/hdf5/openmpi/H5MMpublic.h */
/* END /usr/include/hdf5/openmpi/H5MMpublic.h */
/* BEGIN /usr/include/hdf5/openmpi/H5Tpublic.h */
/* END /usr/include/hdf5/openmpi/H5Tpublic.h */
/* BEGIN /usr/include/hdf5/openmpi/H5Zpublic.h */
/* BEGIN /usr/include/hdf5/openmpi/H5public.h */
/* END /usr/include/hdf5/openmpi/H5public.h */
typedef int H5Z_filter_t;
enum { H5Z_FILTER_NONE = 0 };
enum { H5Z_FILTER_DEFLATE = 1 };
enum { H5Z_FILTER_SHUFFLE = 2 };
enum { H5Z_FILTER_FLETCHER32 = 3 };
enum { H5Z_FILTER_SZIP = 4 };
enum { H5Z_FILTER_NBIT = 5 };
enum { H5Z_FILTER_SCALEOFFSET = 6 };
enum { H5Z_FILTER_RESERVED = 256 };
enum { H5Z_FILTER_MAX = 65535 };
enum { H5Z_FILTER_ALL = 0 };
enum { H5Z_MAX_NFILTERS = 32 };
enum { H5Z_FLAG_DEFMASK = 0x00ff };
enum { H5Z_FLAG_MANDATORY = 0x0000 };
enum { H5Z_FLAG_OPTIONAL = 0x0001 };
enum { H5Z_FLAG_INVMASK = 0xff00 };
enum { H5Z_FLAG_REVERSE = 0x0100 };
enum { H5Z_FLAG_SKIP_EDC = 0x0200 };
enum { H5_SZIP_ALLOW_K13_OPTION_MASK = 1 };
enum { H5_SZIP_CHIP_OPTION_MASK = 2 };
enum { H5_SZIP_EC_OPTION_MASK = 4 };
enum { H5_SZIP_NN_OPTION_MASK = 32 };
enum { H5_SZIP_MAX_PIXELS_PER_BLOCK = 32 };
enum { H5Z_SHUFFLE_USER_NPARMS = 0 };
enum { H5Z_SHUFFLE_TOTAL_NPARMS = 1 };
enum { H5Z_SZIP_USER_NPARMS = 2 };
enum { H5Z_SZIP_TOTAL_NPARMS = 4 };
enum { H5Z_SZIP_PARM_MASK = 0 };
enum { H5Z_SZIP_PARM_PPB = 1 };
enum { H5Z_SZIP_PARM_BPP = 2 };
enum { H5Z_SZIP_PARM_PPS = 3 };
enum { H5Z_NBIT_USER_NPARMS = 0 };
enum { H5Z_SCALEOFFSET_USER_NPARMS = 2 };
enum { H5Z_SO_INT_MINBITS_DEFAULT = 0 };
typedef enum H5Z_SO_scale_type_t { H5Z_SO_FLOAT_DSCALE = 0, H5Z_SO_FLOAT_ESCALE = 1, H5Z_SO_INT          = 2 } H5Z_SO_scale_type_t;
typedef enum H5Z_EDC_t { H5Z_ERROR_EDC       = -1, H5Z_DISABLE_EDC     = 0, H5Z_ENABLE_EDC      = 1, H5Z_NO_EDC          = 2 } H5Z_EDC_t;
typedef enum H5Z_cb_return_t { H5Z_CB_ERROR  = -1, H5Z_CB_FAIL   = 0, H5Z_CB_CONT   = 1, H5Z_CB_NO     = 2 } H5Z_cb_return_t;
typedef H5Z_cb_return_t (*H5Z_filter_func_t)(H5Z_filter_t filter, void* buf, size_t buf_size, void* op_data);
typedef struct H5Z_cb_t { H5Z_filter_func_t   func;
void                *op_data;
} H5Z_cb_t;
typedef htri_t (*H5Z_can_apply_func_t)(hid_t dcpl_id, hid_t type_id, hid_t space_id);
typedef herr_t (*H5Z_set_local_func_t)(hid_t dcpl_id, hid_t type_id, hid_t space_id);
typedef size_t (*H5Z_func_t)(unsigned int flags, size_t cd_nelmts, const unsigned int cd_values[], size_t nbytes, size_t *buf_size, void **buf);
typedef struct H5Z_class2_t { int version;
H5Z_filter_t id;
unsigned encoder_present;
unsigned decoder_present;
const char	*name;
H5Z_can_apply_func_t can_apply;
H5Z_set_local_func_t set_local;
H5Z_func_t filter;
} H5Z_class2_t;
herr_t H5Zregister(const void *cls);
herr_t H5Zunregister(H5Z_filter_t id);
htri_t H5Zfilter_avail(H5Z_filter_t id);
herr_t H5Zget_filter_info(H5Z_filter_t filter, unsigned int *filter_config_flags);
typedef struct H5Z_class1_t { H5Z_filter_t id;
const char	*name;
H5Z_can_apply_func_t can_apply;
H5Z_set_local_func_t set_local;
H5Z_func_t filter;
} H5Z_class1_t;
/* END /usr/include/hdf5/openmpi/H5Zpublic.h */
enum { H5P_CRT_ORDER_TRACKED = 0x0001 };
enum { H5P_CRT_ORDER_INDEXED = 0x0002 };
typedef herr_t (*H5P_cls_create_func_t)(hid_t prop_id, void *create_data);
typedef herr_t (*H5P_cls_copy_func_t)(hid_t new_prop_id, hid_t old_prop_id, void *copy_data);
typedef herr_t (*H5P_cls_close_func_t)(hid_t prop_id, void *close_data);
typedef herr_t (*H5P_prp_cb1_t)(const char *name, size_t size, void *value);
typedef herr_t (*H5P_prp_cb2_t)(hid_t prop_id, const char *name, size_t size, void *value);
typedef H5P_prp_cb1_t H5P_prp_create_func_t;
typedef H5P_prp_cb2_t H5P_prp_set_func_t;
typedef H5P_prp_cb2_t H5P_prp_get_func_t;
typedef H5P_prp_cb2_t H5P_prp_delete_func_t;
typedef H5P_prp_cb1_t H5P_prp_copy_func_t;
typedef int (*H5P_prp_compare_func_t)(const void *value1, const void *value2, size_t size);
typedef H5P_prp_cb1_t H5P_prp_close_func_t;
typedef herr_t (*H5P_iterate_t)(hid_t id, const char *name, void *iter_data);
typedef enum H5D_mpio_actual_chunk_opt_mode_t { H5D_MPIO_NO_CHUNK_OPTIMIZATION = 0, H5D_MPIO_LINK_CHUNK, H5D_MPIO_MULTI_CHUNK }  H5D_mpio_actual_chunk_opt_mode_t;
typedef enum H5D_mpio_actual_io_mode_t { H5D_MPIO_NO_COLLECTIVE = 0x0, H5D_MPIO_CHUNK_INDEPENDENT = 0x1, H5D_MPIO_CHUNK_COLLECTIVE = 0x2, H5D_MPIO_CHUNK_MIXED = 0x1 | 0x2, H5D_MPIO_CONTIGUOUS_COLLECTIVE = 0x4 } H5D_mpio_actual_io_mode_t;
typedef enum H5D_mpio_no_collective_cause_t { H5D_MPIO_COLLECTIVE = 0x00, H5D_MPIO_SET_INDEPENDENT = 0x01, H5D_MPIO_DATATYPE_CONVERSION = 0x02, H5D_MPIO_DATA_TRANSFORMS = 0x04, H5D_MPIO_MPI_OPT_TYPES_ENV_VAR_DISABLED = 0x08, H5D_MPIO_NOT_SIMPLE_OR_SCALAR_DATASPACES = 0x10, H5D_MPIO_NOT_CONTIGUOUS_OR_CHUNKED_DATASET = 0x20, H5D_MPIO_PARALLEL_FILTERED_WRITES_DISABLED = 0x40, H5D_MPIO_ERROR_WHILE_CHECKING_COLLECTIVE_POSSIBLE = 0x80, H5D_MPIO_NO_COLLECTIVE_MAX_CAUSE = 0x100 } H5D_mpio_no_collective_cause_t;
extern hid_t H5P_CLS_ROOT_ID_g;
extern hid_t H5P_CLS_OBJECT_CREATE_ID_g;
extern hid_t H5P_CLS_FILE_CREATE_ID_g;
extern hid_t H5P_CLS_FILE_ACCESS_ID_g;
extern hid_t H5P_CLS_DATASET_CREATE_ID_g;
extern hid_t H5P_CLS_DATASET_ACCESS_ID_g;
extern hid_t H5P_CLS_DATASET_XFER_ID_g;
extern hid_t H5P_CLS_FILE_MOUNT_ID_g;
extern hid_t H5P_CLS_GROUP_CREATE_ID_g;
extern hid_t H5P_CLS_GROUP_ACCESS_ID_g;
extern hid_t H5P_CLS_DATATYPE_CREATE_ID_g;
extern hid_t H5P_CLS_DATATYPE_ACCESS_ID_g;
extern hid_t H5P_CLS_STRING_CREATE_ID_g;
extern hid_t H5P_CLS_ATTRIBUTE_CREATE_ID_g;
extern hid_t H5P_CLS_ATTRIBUTE_ACCESS_ID_g;
extern hid_t H5P_CLS_OBJECT_COPY_ID_g;
extern hid_t H5P_CLS_LINK_CREATE_ID_g;
extern hid_t H5P_CLS_LINK_ACCESS_ID_g;
extern hid_t H5P_LST_FILE_CREATE_ID_g;
extern hid_t H5P_LST_FILE_ACCESS_ID_g;
extern hid_t H5P_LST_DATASET_CREATE_ID_g;
extern hid_t H5P_LST_DATASET_ACCESS_ID_g;
extern hid_t H5P_LST_DATASET_XFER_ID_g;
extern hid_t H5P_LST_FILE_MOUNT_ID_g;
extern hid_t H5P_LST_GROUP_CREATE_ID_g;
extern hid_t H5P_LST_GROUP_ACCESS_ID_g;
extern hid_t H5P_LST_DATATYPE_CREATE_ID_g;
extern hid_t H5P_LST_DATATYPE_ACCESS_ID_g;
extern hid_t H5P_LST_ATTRIBUTE_CREATE_ID_g;
extern hid_t H5P_LST_ATTRIBUTE_ACCESS_ID_g;
extern hid_t H5P_LST_OBJECT_COPY_ID_g;
extern hid_t H5P_LST_LINK_CREATE_ID_g;
extern hid_t H5P_LST_LINK_ACCESS_ID_g;
hid_t H5Pcreate_class(hid_t parent, const char *name, H5P_cls_create_func_t cls_create, void *create_data, H5P_cls_copy_func_t cls_copy, void *copy_data, H5P_cls_close_func_t cls_close, void *close_data);
char *H5Pget_class_name(hid_t pclass_id);
hid_t H5Pcreate(hid_t cls_id);
herr_t H5Pregister2(hid_t cls_id, const char *name, size_t size, void *def_value, H5P_prp_create_func_t prp_create, H5P_prp_set_func_t prp_set, H5P_prp_get_func_t prp_get, H5P_prp_delete_func_t prp_del, H5P_prp_copy_func_t prp_copy, H5P_prp_compare_func_t prp_cmp, H5P_prp_close_func_t prp_close);
herr_t H5Pinsert2(hid_t plist_id, const char *name, size_t size, void *value, H5P_prp_set_func_t prp_set, H5P_prp_get_func_t prp_get, H5P_prp_delete_func_t prp_delete, H5P_prp_copy_func_t prp_copy, H5P_prp_compare_func_t prp_cmp, H5P_prp_close_func_t prp_close);
herr_t H5Pset(hid_t plist_id, const char *name, const void *value);
htri_t H5Pexist(hid_t plist_id, const char *name);
herr_t H5Pencode(hid_t plist_id, void *buf, size_t *nalloc);
hid_t  H5Pdecode(const void *buf);
herr_t H5Pget_size(hid_t id, const char *name, size_t *size);
herr_t H5Pget_nprops(hid_t id, size_t *nprops);
hid_t H5Pget_class(hid_t plist_id);
hid_t H5Pget_class_parent(hid_t pclass_id);
herr_t H5Pget(hid_t plist_id, const char *name, void * value);
htri_t H5Pequal(hid_t id1, hid_t id2);
htri_t H5Pisa_class(hid_t plist_id, hid_t pclass_id);
int H5Piterate(hid_t id, int *idx, H5P_iterate_t iter_func, void *iter_data);
herr_t H5Pcopy_prop(hid_t dst_id, hid_t src_id, const char *name);
herr_t H5Premove(hid_t plist_id, const char *name);
herr_t H5Punregister(hid_t pclass_id, const char *name);
herr_t H5Pclose_class(hid_t plist_id);
herr_t H5Pclose(hid_t plist_id);
hid_t H5Pcopy(hid_t plist_id);
herr_t H5Pset_attr_phase_change(hid_t plist_id, unsigned max_compact, unsigned min_dense);
herr_t H5Pget_attr_phase_change(hid_t plist_id, unsigned *max_compact, unsigned *min_dense);
herr_t H5Pset_attr_creation_order(hid_t plist_id, unsigned crt_order_flags);
herr_t H5Pget_attr_creation_order(hid_t plist_id, unsigned *crt_order_flags);
herr_t H5Pset_obj_track_times(hid_t plist_id, hbool_t track_times);
herr_t H5Pget_obj_track_times(hid_t plist_id, hbool_t *track_times);
herr_t H5Pmodify_filter(hid_t plist_id, H5Z_filter_t filter, unsigned int flags, size_t cd_nelmts, const unsigned int cd_values[]);
herr_t H5Pset_filter(hid_t plist_id, H5Z_filter_t filter, unsigned int flags, size_t cd_nelmts, const unsigned int c_values[]);
int H5Pget_nfilters(hid_t plist_id);
H5Z_filter_t H5Pget_filter2(hid_t plist_id, unsigned filter, unsigned int *flags, size_t *cd_nelmts, unsigned cd_values[], size_t namelen, char name[], unsigned *filter_config );
herr_t H5Pget_filter_by_id2(hid_t plist_id, H5Z_filter_t id, unsigned int *flags, size_t *cd_nelmts, unsigned cd_values[], size_t namelen, char name[], unsigned *filter_config);
htri_t H5Pall_filters_avail(hid_t plist_id);
herr_t H5Premove_filter(hid_t plist_id, H5Z_filter_t filter);
herr_t H5Pset_deflate(hid_t plist_id, unsigned aggression);
herr_t H5Pset_fletcher32(hid_t plist_id);
herr_t H5Pset_userblock(hid_t plist_id, hsize_t size);
herr_t H5Pget_userblock(hid_t plist_id, hsize_t *size);
herr_t H5Pset_sizes(hid_t plist_id, size_t sizeof_addr, size_t sizeof_size);
herr_t H5Pget_sizes(hid_t plist_id, size_t *sizeof_addr, size_t *sizeof_size);
herr_t H5Pset_sym_k(hid_t plist_id, unsigned ik, unsigned lk);
herr_t H5Pget_sym_k(hid_t plist_id, unsigned *ik, unsigned *lk);
herr_t H5Pset_istore_k(hid_t plist_id, unsigned ik);
herr_t H5Pget_istore_k(hid_t plist_id, unsigned *ik);
herr_t H5Pset_shared_mesg_nindexes(hid_t plist_id, unsigned nindexes);
herr_t H5Pget_shared_mesg_nindexes(hid_t plist_id, unsigned *nindexes);
herr_t H5Pset_shared_mesg_index(hid_t plist_id, unsigned index_num, unsigned mesg_type_flags, unsigned min_mesg_size);
herr_t H5Pget_shared_mesg_index(hid_t plist_id, unsigned index_num, unsigned *mesg_type_flags, unsigned *min_mesg_size);
herr_t H5Pset_shared_mesg_phase_change(hid_t plist_id, unsigned max_list, unsigned min_btree);
herr_t H5Pget_shared_mesg_phase_change(hid_t plist_id, unsigned *max_list, unsigned *min_btree);
herr_t H5Pset_file_space_strategy(hid_t plist_id, H5F_fspace_strategy_t strategy, hbool_t persist, hsize_t threshold);
herr_t H5Pget_file_space_strategy(hid_t plist_id, H5F_fspace_strategy_t *strategy, hbool_t *persist, hsize_t *threshold);
herr_t H5Pset_file_space_page_size(hid_t plist_id, hsize_t fsp_size);
herr_t H5Pget_file_space_page_size(hid_t plist_id, hsize_t *fsp_size);
herr_t H5Pset_alignment(hid_t fapl_id, hsize_t threshold, hsize_t alignment);
herr_t H5Pget_alignment(hid_t fapl_id, hsize_t *threshold, hsize_t *alignment);
herr_t H5Pset_driver(hid_t plist_id, hid_t driver_id, const void *driver_info);
hid_t H5Pget_driver(hid_t plist_id);
const void *H5Pget_driver_info(hid_t plist_id);
herr_t H5Pset_family_offset(hid_t fapl_id, hsize_t offset);
herr_t H5Pget_family_offset(hid_t fapl_id, hsize_t *offset);
herr_t H5Pset_multi_type(hid_t fapl_id, H5FD_mem_t type);
herr_t H5Pget_multi_type(hid_t fapl_id, H5FD_mem_t *type);
herr_t H5Pset_cache(hid_t plist_id, int mdc_nelmts, size_t rdcc_nslots, size_t rdcc_nbytes, double rdcc_w0);
herr_t H5Pget_cache(hid_t plist_id, int *mdc_nelmts, size_t *rdcc_nslots, size_t *rdcc_nbytes, double *rdcc_w0);
herr_t H5Pset_mdc_config(hid_t    plist_id, H5AC_cache_config_t * config_ptr);
herr_t H5Pget_mdc_config(hid_t     plist_id, H5AC_cache_config_t * config_ptr);
herr_t H5Pset_gc_references(hid_t fapl_id, unsigned gc_ref);
herr_t H5Pget_gc_references(hid_t fapl_id, unsigned *gc_ref);
herr_t H5Pset_fclose_degree(hid_t fapl_id, H5F_close_degree_t degree);
herr_t H5Pget_fclose_degree(hid_t fapl_id, H5F_close_degree_t *degree);
herr_t H5Pset_meta_block_size(hid_t fapl_id, hsize_t size);
herr_t H5Pget_meta_block_size(hid_t fapl_id, hsize_t *size);
herr_t H5Pset_sieve_buf_size(hid_t fapl_id, size_t size);
herr_t H5Pget_sieve_buf_size(hid_t fapl_id, size_t *size);
herr_t H5Pset_small_data_block_size(hid_t fapl_id, hsize_t size);
herr_t H5Pget_small_data_block_size(hid_t fapl_id, hsize_t *size);
herr_t H5Pset_libver_bounds(hid_t plist_id, H5F_libver_t low, H5F_libver_t high);
herr_t H5Pget_libver_bounds(hid_t plist_id, H5F_libver_t *low, H5F_libver_t *high);
herr_t H5Pset_elink_file_cache_size(hid_t plist_id, unsigned efc_size);
herr_t H5Pget_elink_file_cache_size(hid_t plist_id, unsigned *efc_size);
herr_t H5Pset_file_image(hid_t fapl_id, void *buf_ptr, size_t buf_len);
herr_t H5Pget_file_image(hid_t fapl_id, void **buf_ptr_ptr, size_t *buf_len_ptr);
herr_t H5Pset_file_image_callbacks(hid_t fapl_id, H5FD_file_image_callbacks_t *callbacks_ptr);
herr_t H5Pget_file_image_callbacks(hid_t fapl_id, H5FD_file_image_callbacks_t *callbacks_ptr);
herr_t H5Pset_core_write_tracking(hid_t fapl_id, hbool_t is_enabled, size_t page_size);
herr_t H5Pget_core_write_tracking(hid_t fapl_id, hbool_t *is_enabled, size_t *page_size);
herr_t H5Pset_metadata_read_attempts(hid_t plist_id, unsigned attempts);
herr_t H5Pget_metadata_read_attempts(hid_t plist_id, unsigned *attempts);
herr_t H5Pset_object_flush_cb(hid_t plist_id, H5F_flush_cb_t func, void *udata);
herr_t H5Pget_object_flush_cb(hid_t plist_id, H5F_flush_cb_t *func, void **udata);
herr_t H5Pset_mdc_log_options(hid_t plist_id, hbool_t is_enabled, const char *location, hbool_t start_on_access);
herr_t H5Pget_mdc_log_options(hid_t plist_id, hbool_t *is_enabled, char *location, size_t *location_size, hbool_t *start_on_access);
herr_t H5Pset_evict_on_close(hid_t fapl_id, hbool_t evict_on_close);
herr_t H5Pget_evict_on_close(hid_t fapl_id, hbool_t *evict_on_close);
herr_t H5Pset_all_coll_metadata_ops(hid_t plist_id, hbool_t is_collective);
herr_t H5Pget_all_coll_metadata_ops(hid_t plist_id, hbool_t *is_collective);
herr_t H5Pset_coll_metadata_write(hid_t plist_id, hbool_t is_collective);
herr_t H5Pget_coll_metadata_write(hid_t plist_id, hbool_t *is_collective);
herr_t H5Pset_mdc_image_config(hid_t plist_id, H5AC_cache_image_config_t *config_ptr);
herr_t H5Pget_mdc_image_config(hid_t plist_id, H5AC_cache_image_config_t *config_ptr );
herr_t H5Pset_page_buffer_size(hid_t plist_id, size_t buf_size, unsigned min_meta_per, unsigned min_raw_per);
herr_t H5Pget_page_buffer_size(hid_t plist_id, size_t *buf_size, unsigned *min_meta_per, unsigned *min_raw_per);
herr_t H5Pset_layout(hid_t plist_id, H5D_layout_t layout);
H5D_layout_t H5Pget_layout(hid_t plist_id);
herr_t H5Pset_chunk(hid_t plist_id, int ndims, const hsize_t dim[]);
int H5Pget_chunk(hid_t plist_id, int max_ndims, hsize_t dim[]);
herr_t H5Pset_virtual(hid_t dcpl_id, hid_t vspace_id, const char *src_file_name, const char *src_dset_name, hid_t src_space_id);
herr_t H5Pget_virtual_count(hid_t dcpl_id, size_t *count);
hid_t H5Pget_virtual_vspace(hid_t dcpl_id, size_t index);
hid_t H5Pget_virtual_srcspace(hid_t dcpl_id, size_t index);
ssize_t H5Pget_virtual_filename(hid_t dcpl_id, size_t index, char *name, size_t size);
ssize_t H5Pget_virtual_dsetname(hid_t dcpl_id, size_t index, char *name, size_t size);
herr_t H5Pset_external(hid_t plist_id, const char *name, off_t offset, hsize_t size);
herr_t H5Pset_chunk_opts(hid_t plist_id, unsigned opts);
herr_t H5Pget_chunk_opts(hid_t plist_id, unsigned *opts);
int H5Pget_external_count(hid_t plist_id);
herr_t H5Pget_external(hid_t plist_id, unsigned idx, size_t name_size, char *name, off_t *offset, hsize_t *size);
herr_t H5Pset_szip(hid_t plist_id, unsigned options_mask, unsigned pixels_per_block);
herr_t H5Pset_shuffle(hid_t plist_id);
herr_t H5Pset_nbit(hid_t plist_id);
herr_t H5Pset_scaleoffset(hid_t plist_id, H5Z_SO_scale_type_t scale_type, int scale_factor);
herr_t H5Pset_fill_value(hid_t plist_id, hid_t type_id, const void *value);
herr_t H5Pget_fill_value(hid_t plist_id, hid_t type_id, void *value);
herr_t H5Pfill_value_defined(hid_t plist, H5D_fill_value_t *status);
herr_t H5Pset_alloc_time(hid_t plist_id, H5D_alloc_time_t alloc_time);
herr_t H5Pget_alloc_time(hid_t plist_id, H5D_alloc_time_t *alloc_time);
herr_t H5Pset_fill_time(hid_t plist_id, H5D_fill_time_t fill_time);
herr_t H5Pget_fill_time(hid_t plist_id, H5D_fill_time_t *fill_time);
herr_t H5Pget_dset_no_attrs_hint(hid_t dcpl_id, hbool_t *minimize);
herr_t H5Pset_dset_no_attrs_hint(hid_t dcpl_id, hbool_t minimize);
herr_t H5Pset_chunk_cache(hid_t dapl_id, size_t rdcc_nslots, size_t rdcc_nbytes, double rdcc_w0);
herr_t H5Pget_chunk_cache(hid_t dapl_id, size_t *rdcc_nslots, size_t *rdcc_nbytes, double *rdcc_w0);
herr_t H5Pset_virtual_view(hid_t plist_id, H5D_vds_view_t view);
herr_t H5Pget_virtual_view(hid_t plist_id, H5D_vds_view_t *view);
herr_t H5Pset_virtual_printf_gap(hid_t plist_id, hsize_t gap_size);
herr_t H5Pget_virtual_printf_gap(hid_t plist_id, hsize_t *gap_size);
herr_t H5Pset_virtual_prefix(hid_t dapl_id, const char* prefix);
ssize_t H5Pget_virtual_prefix(hid_t dapl_id, char* prefix , size_t size);
herr_t H5Pset_append_flush(hid_t plist_id, unsigned ndims, const hsize_t boundary[], H5D_append_cb_t func, void *udata);
herr_t H5Pget_append_flush(hid_t plist_id, unsigned dims, hsize_t boundary[], H5D_append_cb_t *func, void **udata);
herr_t H5Pset_efile_prefix(hid_t dapl_id, const char* prefix);
ssize_t H5Pget_efile_prefix(hid_t dapl_id, char* prefix , size_t size);
herr_t H5Pset_data_transform(hid_t plist_id, const char* expression);
ssize_t H5Pget_data_transform(hid_t plist_id, char* expression , size_t size);
herr_t H5Pset_buffer(hid_t plist_id, size_t size, void *tconv, void *bkg);
size_t H5Pget_buffer(hid_t plist_id, void **tconv, void **bkg);
herr_t H5Pset_preserve(hid_t plist_id, hbool_t status);
int H5Pget_preserve(hid_t plist_id);
herr_t H5Pset_edc_check(hid_t plist_id, H5Z_EDC_t check);
H5Z_EDC_t H5Pget_edc_check(hid_t plist_id);
herr_t H5Pset_filter_callback(hid_t plist_id, H5Z_filter_func_t func, void* op_data);
herr_t H5Pset_btree_ratios(hid_t plist_id, double left, double middle, double right);
herr_t H5Pget_btree_ratios(hid_t plist_id, double *left, double *middle, double *right);
herr_t H5Pset_vlen_mem_manager(hid_t plist_id, H5MM_allocate_t alloc_func, void *alloc_info, H5MM_free_t free_func, void *free_info);
herr_t H5Pget_vlen_mem_manager(hid_t plist_id, H5MM_allocate_t *alloc_func, void **alloc_info, H5MM_free_t *free_func, void **free_info);
herr_t H5Pset_hyper_vector_size(hid_t fapl_id, size_t size);
herr_t H5Pget_hyper_vector_size(hid_t fapl_id, size_t *size);
herr_t H5Pset_type_conv_cb(hid_t dxpl_id, H5T_conv_except_func_t op, void* operate_data);
herr_t H5Pget_type_conv_cb(hid_t dxpl_id, H5T_conv_except_func_t *op, void** operate_data);
herr_t H5Pget_mpio_actual_chunk_opt_mode(hid_t plist_id, H5D_mpio_actual_chunk_opt_mode_t *actual_chunk_opt_mode);
herr_t H5Pget_mpio_actual_io_mode(hid_t plist_id, H5D_mpio_actual_io_mode_t *actual_io_mode);
herr_t H5Pget_mpio_no_collective_cause(hid_t plist_id, uint32_t *local_no_collective_cause, uint32_t *global_no_collective_cause);
herr_t H5Pset_create_intermediate_group(hid_t plist_id, unsigned crt_intmd);
herr_t H5Pget_create_intermediate_group(hid_t plist_id, unsigned *crt_intmd );
herr_t H5Pset_local_heap_size_hint(hid_t plist_id, size_t size_hint);
herr_t H5Pget_local_heap_size_hint(hid_t plist_id, size_t *size_hint );
herr_t H5Pset_link_phase_change(hid_t plist_id, unsigned max_compact, unsigned min_dense);
herr_t H5Pget_link_phase_change(hid_t plist_id, unsigned *max_compact , unsigned *min_dense );
herr_t H5Pset_est_link_info(hid_t plist_id, unsigned est_num_entries, unsigned est_name_len);
herr_t H5Pget_est_link_info(hid_t plist_id, unsigned *est_num_entries , unsigned *est_name_len );
herr_t H5Pset_link_creation_order(hid_t plist_id, unsigned crt_order_flags);
herr_t H5Pget_link_creation_order(hid_t plist_id, unsigned *crt_order_flags );
herr_t H5Pset_char_encoding(hid_t plist_id, H5T_cset_t encoding);
herr_t H5Pget_char_encoding(hid_t plist_id, H5T_cset_t *encoding );
herr_t H5Pset_nlinks(hid_t plist_id, size_t nlinks);
herr_t H5Pget_nlinks(hid_t plist_id, size_t *nlinks);
herr_t H5Pset_elink_prefix(hid_t plist_id, const char *prefix);
ssize_t H5Pget_elink_prefix(hid_t plist_id, char *prefix, size_t size);
hid_t H5Pget_elink_fapl(hid_t lapl_id);
herr_t H5Pset_elink_fapl(hid_t lapl_id, hid_t fapl_id);
herr_t H5Pset_elink_acc_flags(hid_t lapl_id, unsigned flags);
herr_t H5Pget_elink_acc_flags(hid_t lapl_id, unsigned *flags);
herr_t H5Pset_elink_cb(hid_t lapl_id, H5L_elink_traverse_t func, void *op_data);
herr_t H5Pget_elink_cb(hid_t lapl_id, H5L_elink_traverse_t *func, void **op_data);
herr_t H5Pset_copy_object(hid_t plist_id, unsigned crt_intmd);
herr_t H5Pget_copy_object(hid_t plist_id, unsigned *crt_intmd );
herr_t H5Padd_merge_committed_dtype_path(hid_t plist_id, const char *path);
herr_t H5Pfree_merge_committed_dtype_paths(hid_t plist_id);
herr_t H5Pset_mcdt_search_cb(hid_t plist_id, H5O_mcdt_search_cb_t func, void *op_data);
herr_t H5Pget_mcdt_search_cb(hid_t plist_id, H5O_mcdt_search_cb_t *func, void **op_data);
herr_t H5Pregister1(hid_t cls_id, const char *name, size_t size, void *def_value, H5P_prp_create_func_t prp_create, H5P_prp_set_func_t prp_set, H5P_prp_get_func_t prp_get, H5P_prp_delete_func_t prp_del, H5P_prp_copy_func_t prp_copy, H5P_prp_close_func_t prp_close);
herr_t H5Pinsert1(hid_t plist_id, const char *name, size_t size, void *value, H5P_prp_set_func_t prp_set, H5P_prp_get_func_t prp_get, H5P_prp_delete_func_t prp_delete, H5P_prp_copy_func_t prp_copy, H5P_prp_close_func_t prp_close);
H5Z_filter_t H5Pget_filter1(hid_t plist_id, unsigned filter, unsigned int *flags, size_t *cd_nelmts, unsigned cd_values[], size_t namelen, char name[]);
herr_t H5Pget_filter_by_id1(hid_t plist_id, H5Z_filter_t id, unsigned int *flags, size_t *cd_nelmts, unsigned cd_values[], size_t namelen, char name[]);
herr_t H5Pget_version(hid_t plist_id, unsigned *boot, unsigned *freelist, unsigned *stab, unsigned *shhdr);
herr_t H5Pset_file_space(hid_t plist_id, H5F_file_space_type_t strategy, hsize_t threshold);
herr_t H5Pget_file_space(hid_t plist_id, H5F_file_space_type_t *strategy, hsize_t *threshold);
/* END /usr/include/hdf5/openmpi/H5Ppublic.h */
/* BEGIN /usr/include/hdf5/openmpi/H5PLpublic.h */
/* BEGIN /usr/include/hdf5/openmpi/H5public.h */
/* END /usr/include/hdf5/openmpi/H5public.h */
typedef enum H5PL_type_t { H5PL_TYPE_ERROR         = -1, H5PL_TYPE_FILTER        =  0, H5PL_TYPE_NONE          =  1 } H5PL_type_t;
enum { H5PL_FILTER_PLUGIN = 0x0001 };
enum { H5PL_ALL_PLUGIN = 0xFFFF };
herr_t H5PLset_loading_state(unsigned int plugin_control_mask);
herr_t H5PLget_loading_state(unsigned int *plugin_control_mask );
herr_t H5PLappend(const char *search_path);
herr_t H5PLprepend(const char *search_path);
herr_t H5PLreplace(const char *search_path, unsigned int index);
herr_t H5PLinsert(const char *search_path, unsigned int index);
herr_t H5PLremove(unsigned int index);
ssize_t H5PLget(unsigned int index, char *path_buf , size_t buf_size);
herr_t H5PLsize(unsigned int *num_paths );
/* END /usr/include/hdf5/openmpi/H5PLpublic.h */
/* BEGIN /usr/include/hdf5/openmpi/H5Rpublic.h */
/* BEGIN /usr/include/hdf5/openmpi/H5public.h */
/* END /usr/include/hdf5/openmpi/H5public.h */
/* BEGIN /usr/include/hdf5/openmpi/H5Gpublic.h */
/* END /usr/include/hdf5/openmpi/H5Gpublic.h */
/* BEGIN /usr/include/hdf5/openmpi/H5Ipublic.h */
/* END /usr/include/hdf5/openmpi/H5Ipublic.h */
typedef enum H5R_type_t { H5R_BADTYPE     =   (-1), H5R_OBJECT, H5R_DATASET_REGION, H5R_MAXTYPE } H5R_type_t;
typedef haddr_t hobj_ref_t;
typedef unsigned char hdset_reg_ref_t[(sizeof(haddr_t) + 4)];
herr_t H5Rcreate(void *ref, hid_t loc_id, const char *name, H5R_type_t ref_type, hid_t space_id);
hid_t H5Rdereference2(hid_t obj_id, hid_t oapl_id, H5R_type_t ref_type, const void *ref);
hid_t H5Rget_region(hid_t dataset, H5R_type_t ref_type, const void *ref);
herr_t H5Rget_obj_type2(hid_t id, H5R_type_t ref_type, const void *_ref, H5O_type_t *obj_type);
ssize_t H5Rget_name(hid_t loc_id, H5R_type_t ref_type, const void *ref, char *name , size_t size);
H5G_obj_t H5Rget_obj_type1(hid_t id, H5R_type_t ref_type, const void *_ref);
hid_t H5Rdereference1(hid_t obj_id, H5R_type_t ref_type, const void *ref);
/* END /usr/include/hdf5/openmpi/H5Rpublic.h */
/* BEGIN /usr/include/hdf5/openmpi/H5Spublic.h */
/* BEGIN /usr/include/hdf5/openmpi/H5public.h */
/* END /usr/include/hdf5/openmpi/H5public.h */
/* BEGIN /usr/include/hdf5/openmpi/H5Ipublic.h */
/* END /usr/include/hdf5/openmpi/H5Ipublic.h */
enum { H5S_MAX_RANK = 32 };
typedef enum H5S_class_t { H5S_NO_CLASS         = -1, H5S_SCALAR           = 0, H5S_SIMPLE           = 1, H5S_NULL             = 2 } H5S_class_t;
typedef enum H5S_seloper_t { H5S_SELECT_NOOP      = -1, H5S_SELECT_SET       = 0, H5S_SELECT_OR, H5S_SELECT_AND, H5S_SELECT_XOR, H5S_SELECT_NOTB, H5S_SELECT_NOTA, H5S_SELECT_APPEND, H5S_SELECT_PREPEND, H5S_SELECT_INVALID } H5S_seloper_t;
typedef enum { H5S_SEL_ERROR	= -1, H5S_SEL_NONE	= 0, H5S_SEL_POINTS	= 1, H5S_SEL_HYPERSLABS  = 2, H5S_SEL_ALL		= 3, H5S_SEL_N }H5S_sel_type;
hid_t H5Screate(H5S_class_t type);
hid_t H5Screate_simple(int rank, const hsize_t dims[], const hsize_t maxdims[]);
herr_t H5Sset_extent_simple(hid_t space_id, int rank, const hsize_t dims[], const hsize_t max[]);
hid_t H5Scopy(hid_t space_id);
herr_t H5Sclose(hid_t space_id);
herr_t H5Sencode(hid_t obj_id, void *buf, size_t *nalloc);
hid_t H5Sdecode(const void *buf);
hssize_t H5Sget_simple_extent_npoints(hid_t space_id);
int H5Sget_simple_extent_ndims(hid_t space_id);
int H5Sget_simple_extent_dims(hid_t space_id, hsize_t dims[], hsize_t maxdims[]);
htri_t H5Sis_simple(hid_t space_id);
hssize_t H5Sget_select_npoints(hid_t spaceid);
herr_t H5Sselect_hyperslab(hid_t space_id, H5S_seloper_t op, const hsize_t start[], const hsize_t _stride[], const hsize_t count[], const hsize_t _block[]);
herr_t H5Sselect_elements(hid_t space_id, H5S_seloper_t op, size_t num_elem, const hsize_t *coord);
H5S_class_t H5Sget_simple_extent_type(hid_t space_id);
herr_t H5Sset_extent_none(hid_t space_id);
herr_t H5Sextent_copy(hid_t dst_id,hid_t src_id);
htri_t H5Sextent_equal(hid_t sid1, hid_t sid2);
herr_t H5Sselect_all(hid_t spaceid);
herr_t H5Sselect_none(hid_t spaceid);
herr_t H5Soffset_simple(hid_t space_id, const hssize_t *offset);
htri_t H5Sselect_valid(hid_t spaceid);
htri_t H5Sis_regular_hyperslab(hid_t spaceid);
htri_t H5Sget_regular_hyperslab(hid_t spaceid, hsize_t start[], hsize_t stride[], hsize_t count[], hsize_t block[]);
hssize_t H5Sget_select_hyper_nblocks(hid_t spaceid);
hssize_t H5Sget_select_elem_npoints(hid_t spaceid);
herr_t H5Sget_select_hyper_blocklist(hid_t spaceid, hsize_t startblock, hsize_t numblocks, hsize_t buf[]);
herr_t H5Sget_select_elem_pointlist(hid_t spaceid, hsize_t startpoint, hsize_t numpoints, hsize_t buf[]);
herr_t H5Sget_select_bounds(hid_t spaceid, hsize_t start[], hsize_t end[]);
H5S_sel_type H5Sget_select_type(hid_t spaceid);
/* END /usr/include/hdf5/openmpi/H5Spublic.h */
/* BEGIN /usr/include/hdf5/openmpi/H5Tpublic.h */
/* END /usr/include/hdf5/openmpi/H5Tpublic.h */
/* BEGIN /usr/include/hdf5/openmpi/H5Zpublic.h */
/* END /usr/include/hdf5/openmpi/H5Zpublic.h */
/* BEGIN /usr/include/hdf5/openmpi/H5FDcore.h */
hid_t H5FD_core_init(void);
herr_t H5Pset_fapl_core(hid_t fapl_id, size_t increment, hbool_t backing_store);
herr_t H5Pget_fapl_core(hid_t fapl_id, size_t *increment, hbool_t *backing_store);
/* END /usr/include/hdf5/openmpi/H5FDcore.h */
/* BEGIN /usr/include/hdf5/openmpi/H5FDdirect.h */
/* END /usr/include/hdf5/openmpi/H5FDdirect.h */
/* BEGIN /usr/include/hdf5/openmpi/H5FDfamily.h */
hid_t H5FD_family_init(void);
herr_t H5Pset_fapl_family(hid_t fapl_id, hsize_t memb_size, hid_t memb_fapl_id);
herr_t H5Pget_fapl_family(hid_t fapl_id, hsize_t *memb_size, hid_t *memb_fapl_id);
/* END /usr/include/hdf5/openmpi/H5FDfamily.h */
/* BEGIN /usr/include/hdf5/openmpi/H5FDhdfs.h */
enum { H5FD__CURR_HDFS_FAPL_T_VERSION = 1 };
enum { H5FD__HDFS_NODE_NAME_SPACE = 128 };
enum { H5FD__HDFS_USER_NAME_SPACE = 128 };
enum { H5FD__HDFS_KERB_CACHE_PATH_SPACE = 128 };
typedef struct H5FD_hdfs_fapl_t { int32_t version;
char    namenode_name[128 + 1];
int32_t namenode_port;
char    user_name[128 + 1];
char    kerberos_ticket_cache[128 + 1];
int32_t stream_buffer_size;
} H5FD_hdfs_fapl_t;
hid_t H5FD_hdfs_init(void);
herr_t H5Pget_fapl_hdfs(hid_t fapl_id, H5FD_hdfs_fapl_t *fa_out);
herr_t H5Pset_fapl_hdfs(hid_t fapl_id, H5FD_hdfs_fapl_t *fa);
/* END /usr/include/hdf5/openmpi/H5FDhdfs.h */
/* BEGIN /usr/include/hdf5/openmpi/H5FDlog.h */
enum { H5FD_LOG_TRUNCATE = 0x00000001 };
enum { H5FD_LOG_LOC_READ = 0x00000002 };
enum { H5FD_LOG_LOC_WRITE = 0x00000004 };
enum { H5FD_LOG_LOC_SEEK = 0x00000008 };
enum { H5FD_LOG_FILE_READ = 0x00000010 };
enum { H5FD_LOG_FILE_WRITE = 0x00000020 };
enum { H5FD_LOG_FLAVOR = 0x00000040 };
enum { H5FD_LOG_NUM_READ = 0x00000080 };
enum { H5FD_LOG_NUM_WRITE = 0x00000100 };
enum { H5FD_LOG_NUM_SEEK = 0x00000200 };
enum { H5FD_LOG_NUM_TRUNCATE = 0x00000400 };
enum { H5FD_LOG_TIME_OPEN = 0x00000800 };
enum { H5FD_LOG_TIME_STAT = 0x00001000 };
enum { H5FD_LOG_TIME_READ = 0x00002000 };
enum { H5FD_LOG_TIME_WRITE = 0x00004000 };
enum { H5FD_LOG_TIME_SEEK = 0x00008000 };
enum { H5FD_LOG_TIME_TRUNCATE = 0x00010000 };
enum { H5FD_LOG_TIME_CLOSE = 0x00020000 };
enum { H5FD_LOG_ALLOC = 0x00040000 };
enum { H5FD_LOG_FREE = 0x00080000 };
hid_t H5FD_log_init(void);
herr_t H5Pset_fapl_log(hid_t fapl_id, const char *logfile, unsigned long long flags, size_t buf_size);
/* END /usr/include/hdf5/openmpi/H5FDlog.h */
/* BEGIN /usr/include/hdf5/openmpi/H5FDmpi.h */
enum { H5D_ONE_LINK_CHUNK_IO_THRESHOLD = 0 };
enum { H5D_MULTI_CHUNK_IO_COL_THRESHOLD = 60 };
typedef enum H5FD_mpio_xfer_t { H5FD_MPIO_INDEPENDENT = 0, H5FD_MPIO_COLLECTIVE } H5FD_mpio_xfer_t;
typedef enum H5FD_mpio_chunk_opt_t { H5FD_MPIO_CHUNK_DEFAULT = 0, H5FD_MPIO_CHUNK_ONE_IO, H5FD_MPIO_CHUNK_MULTI_IO } H5FD_mpio_chunk_opt_t;
typedef enum H5FD_mpio_collective_opt_t { H5FD_MPIO_COLLECTIVE_IO = 0, H5FD_MPIO_INDIVIDUAL_IO } H5FD_mpio_collective_opt_t;
/* BEGIN /usr/include/hdf5/openmpi/H5FDmpio.h */
extern hbool_t H5FD_mpi_opt_types_g;
hid_t H5FD_mpio_init(void);
herr_t H5Pset_fapl_mpio(hid_t fapl_id, MPI_Comm comm, MPI_Info info);
herr_t H5Pget_fapl_mpio(hid_t fapl_id, MPI_Comm *comm, MPI_Info *info);
herr_t H5Pset_dxpl_mpio(hid_t dxpl_id, H5FD_mpio_xfer_t xfer_mode);
herr_t H5Pget_dxpl_mpio(hid_t dxpl_id, H5FD_mpio_xfer_t *xfer_mode);
herr_t H5Pset_dxpl_mpio_collective_opt(hid_t dxpl_id, H5FD_mpio_collective_opt_t opt_mode);
herr_t H5Pset_dxpl_mpio_chunk_opt(hid_t dxpl_id, H5FD_mpio_chunk_opt_t opt_mode);
herr_t H5Pset_dxpl_mpio_chunk_opt_num(hid_t dxpl_id, unsigned num_chunk_per_proc);
herr_t H5Pset_dxpl_mpio_chunk_opt_ratio(hid_t dxpl_id, unsigned percent_num_proc_per_chunk);
/* END /usr/include/hdf5/openmpi/H5FDmpio.h */
/* END /usr/include/hdf5/openmpi/H5FDmpi.h */
/* BEGIN /usr/include/hdf5/openmpi/H5FDmulti.h */
hid_t H5FD_multi_init(void);
herr_t H5Pset_fapl_multi(hid_t fapl_id, const H5FD_mem_t *memb_map, const hid_t *memb_fapl, const char * const *memb_name, const haddr_t *memb_addr, hbool_t relax);
herr_t H5Pget_fapl_multi(hid_t fapl_id, H5FD_mem_t *memb_map, hid_t *memb_fapl, char **memb_name, haddr_t *memb_addr, hbool_t *relax);
herr_t H5Pset_fapl_split(hid_t fapl, const char *meta_ext, hid_t meta_plist_id, const char *raw_ext, hid_t raw_plist_id);
/* END /usr/include/hdf5/openmpi/H5FDmulti.h */
/* BEGIN /usr/include/hdf5/openmpi/H5FDros3.h */
/* END /usr/include/hdf5/openmpi/H5FDros3.h */
/* BEGIN /usr/include/hdf5/openmpi/H5FDsec2.h */
hid_t H5FD_sec2_init(void);
herr_t H5Pset_fapl_sec2(hid_t fapl_id);
/* END /usr/include/hdf5/openmpi/H5FDsec2.h */
/* BEGIN /usr/include/hdf5/openmpi/H5FDstdio.h */
/* BEGIN /usr/include/hdf5/openmpi/H5Ipublic.h */
/* END /usr/include/hdf5/openmpi/H5Ipublic.h */
hid_t H5FD_stdio_init(void);
herr_t H5Pset_fapl_stdio(hid_t fapl_id);
/* END /usr/include/hdf5/openmpi/H5FDstdio.h */
/* END /usr/include/hdf5/openmpi/hdf5.h */
]]


xpcall(function()
	ffi.cdef(code)	
end, function(err)
	print(require 'template.showcode'(code))
	print(err..debug.traceback())
	os.exit(1)
end)

return hdf5
